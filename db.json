{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/images/bg1.jpg","path":"images/bg1.jpg","modified":0,"renderable":0},{"_id":"source/images/bkg.png","path":"images/bkg.png","modified":0,"renderable":0},{"_id":"source/images/blacktocat.png","path":"images/blacktocat.png","modified":0,"renderable":0},{"_id":"source/images/icon/githubIcon.png","path":"images/icon/githubIcon.png","modified":0,"renderable":0},{"_id":"source/images/icon/cat.png","path":"images/icon/cat.png","modified":0,"renderable":0},{"_id":"source/images/math/avg.png","path":"images/math/avg.png","modified":0,"renderable":0},{"_id":"source/images/math/normaldis.png","path":"images/math/normaldis.png","modified":0,"renderable":0},{"_id":"source/images/math/obb.jpg","path":"images/math/obb.jpg","modified":0,"renderable":0},{"_id":"source/images/mindMap/garbage_collector.png","path":"images/mindMap/garbage_collector.png","modified":0,"renderable":0},{"_id":"source/images/mindMap/hashmap.png","path":"images/mindMap/hashmap.png","modified":0,"renderable":0},{"_id":"source/images/mindMap/jvm_memory.png","path":"images/mindMap/jvm_memory.png","modified":0,"renderable":0},{"_id":"source/images/mindMap/无标题.png","path":"images/mindMap/无标题.png","modified":0,"renderable":0},{"_id":"source/images/mindMap/mysql_optimal.png","path":"images/mindMap/mysql_optimal.png","modified":0,"renderable":0},{"_id":"source/images/novel/liucheng.png","path":"images/novel/liucheng.png","modified":0,"renderable":0},{"_id":"source/images/otherRes/GetPort.__exe__","path":"images/otherRes/GetPort.__exe__","modified":0,"renderable":0},{"_id":"source/images/otherRes/Program.cs","path":"images/otherRes/Program.cs","modified":0,"renderable":0},{"_id":"source/images/otherRes/merge_1.png","path":"images/otherRes/merge_1.png","modified":0,"renderable":0},{"_id":"source/images/otherRes/merge_2.png","path":"images/otherRes/merge_2.png","modified":0,"renderable":0},{"_id":"source/images/otherRes/merge_4.png","path":"images/otherRes/merge_4.png","modified":0,"renderable":0},{"_id":"source/images/otherRes/merge_5.png","path":"images/otherRes/merge_5.png","modified":0,"renderable":0},{"_id":"source/images/resextract/dontstarve_2.jpg","path":"images/resextract/dontstarve_2.jpg","modified":0,"renderable":0},{"_id":"source/images/math/circleXcircle.gif","path":"images/math/circleXcircle.gif","modified":0,"renderable":0},{"_id":"source/images/math/rectAngleXcircle.gif","path":"images/math/rectAngleXcircle.gif","modified":0,"renderable":0},{"_id":"source/images/math/rectXrect.gif","path":"images/math/rectXrect.gif","modified":0,"renderable":0},{"_id":"source/images/otherRes/merge_3.png","path":"images/otherRes/merge_3.png","modified":0,"renderable":0},{"_id":"source/images/resextract/dontstarve.jpg","path":"images/resextract/dontstarve.jpg","modified":0,"renderable":0},{"_id":"source/images/resextract/ko98.jpg","path":"images/resextract/ko98.jpg","modified":0,"renderable":0},{"_id":"source/images/resextract/ko98_2.jpg","path":"images/resextract/ko98_2.jpg","modified":0,"renderable":0},{"_id":"source/images/math/rectXcircle.gif","path":"images/math/rectXcircle.gif","modified":0,"renderable":0},{"_id":"source/images/musicextract/fsbextract.gif","path":"images/musicextract/fsbextract.gif","modified":0,"renderable":0},{"_id":"source/images/math/obb.gif","path":"images/math/obb.gif","modified":0,"renderable":0},{"_id":"source/images/cocos/rotateMenu.gif","path":"images/cocos/rotateMenu.gif","modified":0,"renderable":0},{"_id":"source/images/cocos/heroLevel.gif","path":"images/cocos/heroLevel.gif","modified":0,"renderable":0},{"_id":"source/images/cocos/lolMenu.gif","path":"images/cocos/lolMenu.gif","modified":0,"renderable":0}],"Cache":[{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1545558204362},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1545558204363},{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1545558204362},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1545558204363},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1545558204363},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1545558204375},{"_id":"source/_posts/hello-world.md","hash":"968835b078c58c3208b241fc356164156e65df4c","modified":1545651856286},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1545558204364},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1545558204364},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1545558204364},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1545558204365},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1545558204365},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1545558204365},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1545558204365},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1545558204366},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1545558204366},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1545558204366},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1545558204367},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1545558204367},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1545558204372},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1545558204373},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1545558204373},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1545558204373},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1545558204374},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1545558204374},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1545558204375},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1545558204374},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1545558204367},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1545558204367},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1545558204368},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1545558204368},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1545558204368},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1545558204368},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1545558204369},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1545558204369},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1545558204371},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1545558204369},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1545558204367},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1545558204371},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1545558204371},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1545558204372},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1545558204372},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1545558204372},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1545558204375},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1545558204397},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1545558204380},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1545558204404},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1545558204398},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1545558204399},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1545558204399},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1545558204399},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1545558204400},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1545558204400},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1545558204402},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1545558204403},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1545558204404},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1545558204370},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1545558204369},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1545558204370},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1545558204370},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1545558204370},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1545558204370},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1545558204376},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1545558204376},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1545558204377},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1545558204377},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1545558204377},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1545558204377},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1545558204378},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1545558204378},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1545558204378},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1545558204379},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1545558204381},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1545558204385},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1545558204392},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1545558204379},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1545558204379},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1545558204401},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1545558204400},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1545558204401},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1545558204401},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1545558204401},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1545558204402},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1545558204391},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1545558204397},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1545558204387},{"_id":"source/_posts/2016-03-19-collide.markdown","hash":"2ad715e59a2804cfe568246b59eb24325a5f656c","modified":1545652453182},{"_id":"source/_posts/2016-03-23-luckydraw.markdown","hash":"ecbcc811152f3bc4ba2e4e13417cec1e52a75ca3","modified":1545652592698},{"_id":"source/_posts/2016-04-03-articleincocos.markdown","hash":"34245e914e2a7c45139359e52be1d5ceaa31250b","modified":1545652591790},{"_id":"source/_posts/2016-04-09-skynetstudy.markdown","hash":"a368bac8eab6ba1180fda721109c1dae69547458","modified":1545652542425},{"_id":"source/_posts/2016-04-18-gameresextract.markdown","hash":"d09ef81efa9f0bf0a72ca12663302b1488f84915","modified":1545652954715},{"_id":"source/_posts/2016-04-25-getgamemusic.markdown","hash":"1c303b0c82a5cc90023d2fc784626ae78fecb0a4","modified":1545652954715},{"_id":"source/_posts/2016-05-21-getdebugport.markdown","hash":"4fee0dfb26e1e604c8090445936078bdf290aa58","modified":1545652954716},{"_id":"source/_posts/2016-05-21-nodejsinstallursa.markdown","hash":"9a21a34d8985ac684ee48fb815340f718c9f1cba","modified":1545652954783},{"_id":"source/_posts/2016-07-10-xxtea.markdown","hash":"3a729e87bef7b64cf7aa6873b50c78a2679cbbbb","modified":1545652954717},{"_id":"source/_posts/2016-10-02-crush.markdown","hash":"7627da5a0fd2361c5cdfc08c2e239ad5d78c54f0","modified":1545652954732},{"_id":"source/_posts/2016-10-16-pythoncoding.markdown","hash":"0e03023a1e9dfd314d4052c7bdf1e5cda0bdb8f8","modified":1545652954717},{"_id":"source/_posts/2016-11-26-random.markdown","hash":"e4c7a8d07d95a3bd937d52974097fa6d63a6598e","modified":1545652954716},{"_id":"source/_posts/2017-06-30-javacollection.markdown","hash":"81c7bb8b3ab5a5a1cae0d8849891cd38dd34ec28","modified":1545652954732},{"_id":"source/_posts/2017-08-11-chapter_1.md","hash":"d7b8d44a1643d4e74239728fb20a20c85b811e44","modified":1545652954717},{"_id":"source/_posts/2017-08-18-chapter_2.md","hash":"39fb48a26f56c7b6bcbee34934a1f060a1326d0c","modified":1545652954732},{"_id":"source/_posts/2017-08-20-draw.md","hash":"5f0bbbffba271372b39aaf933dce33af75a494fc","modified":1545652954716},{"_id":"source/_posts/2018-04-01-mind_map.md","hash":"6415d3ea1206816eaa23408eaa2499b85d9b343f","modified":1545652954714},{"_id":"source/_posts/2018-11-06-lock.md","hash":"52d78fbaec88e0dc8dfc876cb4c49fad47540a08","modified":1545652954717},{"_id":"source/_posts/2016-03-26-collide2.markdown","hash":"c79bd719a3a25e1bdf95481bcac45358df4adca7","modified":1545652593410},{"_id":"public/2018/12/23/hello-world/index.html","hash":"94c6428431c9064d058ce5e575d0580910b6980b","modified":1545570078173},{"_id":"public/categories/math/index.html","hash":"1eb2d60e337bff4fd42b8a90ab463e1137c22ce9","modified":1545653172501},{"_id":"public/categories/game-music/index.html","hash":"63599e80fcf97e5372ffd43fa665dbd2cf49c570","modified":1545653172501},{"_id":"public/categories/cocos/index.html","hash":"a55a93ef2bd6aff28c1aad468a53705de6c69237","modified":1545653172501},{"_id":"public/tags/normal-distribution/index.html","hash":"e59d2d91226a9c0978c506260127f8909c25bc3b","modified":1545653172501},{"_id":"public/tags/music/index.html","hash":"81e3d587e229341ff83d2aa1c4b2c4a1200895ca","modified":1545653172501},{"_id":"public/tags/collide-math/index.html","hash":"16d304e192135e6d62fd37235c23ef63869ffb69","modified":1545653172501},{"_id":"public/tags/cocos/index.html","hash":"20d8854b99e8fca596183767b62a26587db53165","modified":1545653172501},{"_id":"public/tags/math-collide/index.html","hash":"50b5333241be2e4bff52ceab1b86f6b03958f1d5","modified":1545653172501},{"_id":"public/archives/index.html","hash":"b2641a190b8d95eaf95f45f9f9d1f2184f45fe40","modified":1545653172500},{"_id":"public/archives/page/2/index.html","hash":"25e4d51ae92b5d9a03859a6347e33c8e629c1e0c","modified":1545653172500},{"_id":"public/archives/2018/index.html","hash":"2b3c0029aa1ae55de46c14c1bc648dd5e170def6","modified":1545653172500},{"_id":"public/archives/2018/page/2/index.html","hash":"17ce81954815c773166a508993d9c263247e3a7d","modified":1545653172500},{"_id":"public/archives/2018/11/index.html","hash":"3eea29632ff716956587fbf5976e4e447bf3a796","modified":1545653172500},{"_id":"public/archives/2018/11/page/2/index.html","hash":"ec50ed7e6f19c856c0e3cd08fa03db4e0ac54d68","modified":1545570078176},{"_id":"public/archives/2018/12/index.html","hash":"a96845f8122de533a954f126e626e5926d16bc54","modified":1545653172501},{"_id":"public/2018/11/05//:categories/:title.html/index.html","hash":"5945510947ca46a84f0f16238ccbe6a4cdf36941","modified":1545570078176},{"_id":"public/index.html","hash":"4958d37b9df66b759f342b207194f8ce3590e5e7","modified":1545653172501},{"_id":"public/page/2/index.html","hash":"670a0e0ebc1f110c9ebd67e9a0142dcfc925caaf","modified":1545653172501},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1545570078182},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1545570078182},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1545570078182},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1545570078182},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1545570078182},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1545570078182},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1545570078182},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1545570078182},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1545570078183},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1545570078648},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1545570078649},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1545570078652},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1545570078652},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1545570078652},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1545570078652},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1545570078653},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1545570078653},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1545570078653},{"_id":"public/css/style.css","hash":"5f8dadd37d0052c557061018fe6f568f64fced9b","modified":1545570078653},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1545570078656},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1545570078656},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1545570078658},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1545570078668},{"_id":"source/images/bg1.jpg","hash":"7f2a1b7182f86536289d4eb5fe26f24d9c25be4e","modified":1545626348097},{"_id":"source/images/bkg.png","hash":"cb2b29141d76342bb988e18626362ac69ed21c19","modified":1545626348106},{"_id":"source/images/blacktocat.png","hash":"2ee6742d5f6f505106233bf8a2605cda9f49c272","modified":1545626348107},{"_id":"source/images/icon/githubIcon.png","hash":"e814f219f19b2302238b354851826c42ef13a8c5","modified":1545626348239},{"_id":"source/images/icon/cat.png","hash":"57909384f83e87bdef4f8dcaccf0e82e78949c31","modified":1545626348228},{"_id":"source/images/math/avg.png","hash":"6def9eeb8d22a5962d7b62cd48db15cc3525a2ad","modified":1545626348251},{"_id":"source/images/math/normaldis.png","hash":"4f9f79262ad7754dbb669c9bc5c2cb667c404fa1","modified":1545626348278},{"_id":"source/images/math/obb.jpg","hash":"d41adf5608a5486181308cc2773557da4e4f0fd0","modified":1545626348322},{"_id":"source/images/mindMap/garbage_collector.png","hash":"1a519be9ab588830662dcd247ddfb24f194e39b9","modified":1545626348385},{"_id":"source/images/mindMap/hashmap.png","hash":"ef0b7fecb2238e21ada74fa8c72581a1b7b0ac67","modified":1545626348403},{"_id":"source/images/mindMap/jvm_memory.png","hash":"925ac25d73b3bf3f32d95285f594536a6573d3f2","modified":1545626348416},{"_id":"source/images/mindMap/无标题.png","hash":"eb2060ef2b39b08da935253162e2e74dd60a6102","modified":1525619308793},{"_id":"source/images/mindMap/mysql_optimal.png","hash":"6302c915f2a4b15346cd62d9e6387ce1085cb87d","modified":1545626348430},{"_id":"source/images/novel/liucheng.png","hash":"e547df4305ef38e2462317e94924f098ce07bfb9","modified":1545626348455},{"_id":"source/images/otherRes/GetPort.__exe__","hash":"2ac9cc8ca4de8a1ecfa9b1bcdfbec218f4c9524e","modified":1545626348464},{"_id":"source/images/otherRes/Program.cs","hash":"abab4c57fb43ff5d9e9fea69a32372f312f1b51e","modified":1545650223472},{"_id":"source/images/otherRes/merge_1.png","hash":"6dd436b41aa576dda523c062fa70690d987c11c0","modified":1545626348471},{"_id":"source/images/otherRes/merge_2.png","hash":"67440afe7c773453ee41ef27f979a1d34e876bc2","modified":1545626348485},{"_id":"source/images/otherRes/merge_4.png","hash":"1afa0095870c3ec120500ccbe7be43a58f3fca49","modified":1545626348505},{"_id":"source/images/otherRes/merge_5.png","hash":"d0edde0c9bec01b4f31f464cbd37b107b20b2b55","modified":1545626348522},{"_id":"source/images/resextract/dontstarve_2.jpg","hash":"f2500662cad144e07e5ef3c6f8ef3dfdd1a860de","modified":1545626348552},{"_id":"source/images/math/circleXcircle.gif","hash":"27f80895c5e2d26b6fd3a8c1ba0f9dfe0136e9e1","modified":1545626348270},{"_id":"source/images/math/rectAngleXcircle.gif","hash":"72318431248ef814b25647abd809eec564a2165e","modified":1545626348339},{"_id":"source/images/math/rectXrect.gif","hash":"88a01e2d859f3864b4db227137093c986bd1c416","modified":1545626348381},{"_id":"source/images/otherRes/merge_3.png","hash":"ab63410f17df28570dc41fe9d543824518138aec","modified":1545626348492},{"_id":"source/images/resextract/dontstarve.jpg","hash":"1a1357fed6dad0b20442166ad55240fb48e75392","modified":1545626348536},{"_id":"source/images/resextract/ko98.jpg","hash":"2095e53c065c0188174550e1b7aaf5b29e958ba2","modified":1545626348567},{"_id":"source/images/resextract/ko98_2.jpg","hash":"dbf7988310ea23e465d58996c9c877643a179dda","modified":1545626348573},{"_id":"source/images/math/rectXcircle.gif","hash":"8ef7249aef029127e521bdbb057150b1101776fb","modified":1545626348362},{"_id":"source/images/musicextract/fsbextract.gif","hash":"ab95239c79db64a2eefc4e457ee8680dbb06d1c8","modified":1545626348440},{"_id":"source/images/math/obb.gif","hash":"c014280d696b63a0d07b970acf55e27fba31d16a","modified":1545626348310},{"_id":"source/images/cocos/rotateMenu.gif","hash":"6f469e6d885cb7cb9b030051b48c5c9758494c8d","modified":1545626348221},{"_id":"source/images/cocos/heroLevel.gif","hash":"36949bc9194636d7c6741c3ca4485eb4eec96106","modified":1545626348146},{"_id":"source/images/cocos/lolMenu.gif","hash":"765fa3a28be905be0cc1d0729cb08fe394290af0","modified":1545626348201},{"_id":"public/2018/12/24/java知识点-思维导图.html","hash":"b0a453faaa315a2996466ed43946def930d8751e","modified":1545653172414},{"_id":"public/2018/12/24/小说开发-第一章-注册登录.html","hash":"849eb0e0c779c2128fede9d3865bf081de7f0efe","modified":1545653172414},{"_id":"public/2018/12/24/游戏音效获取方法.html","hash":"8ebfd7ae6abbc5a681edd661e35769e748b9ec10","modified":1545653172498},{"_id":"public/2018/12/24/游戏资源提取方法合集.html","hash":"e90f7eb30492e3009dc9d24098d2788ea78a4332","modified":1545653172498},{"_id":"public/2018/12/24/我在cocos官网发布的文章合集.html","hash":"0ed5b00b92dbd2bee4830f681fafeca74c71f64c","modified":1545653172500},{"_id":"public/2018/12/24/碰撞检测之obb.html","hash":"b287c92dd3ff2724cdd441f84748b872623817f9","modified":1545653172501},{"_id":"public/2018/12/24/游戏限时抽奖策略.html","hash":"a6252d9245e9e9a2cddd24d0317a1e3b3765d796","modified":1545653172501},{"_id":"public/2018/12/24/简单几何图形的碰撞检测.html","hash":"972cc314ae643d35aa9e854c6589c2c5d775c230","modified":1545653172501},{"_id":"public/2018/11/05/java并发控制简介.html","hash":"edf9d577a2bfb714b727e4ce6d94a8f5cd4dd16d","modified":1545653172511},{"_id":"public/2018/11/05/java容器简介.html","hash":"09cbe5a1265bf4871717902677ef9b11a777498c","modified":1545653172511},{"_id":"public/2018/11/05/浅谈随机及其在游戏中的应用.html","hash":"8a4d0a29d3afee213e3e357e1a8274a17301360f","modified":1545653172511},{"_id":"public/2018/11/05/小说开发-第二章-图片收藏分享.html","hash":"76dbe48ec8fe5a75f437ed2d857502046a08ccab","modified":1545653172511},{"_id":"public/2018/11/05/python编码解析.html","hash":"425f4339aa160e7d9964920bb3dfbba42b2bf5d1","modified":1545653172511},{"_id":"public/2018/11/05/vs2015无法attach-to-unity解决方案.html","hash":"ee835531431261c396034ec3032540d794b806b0","modified":1545653172511},{"_id":"public/2018/11/05/在windows环境下安装ursa正确方法.html","hash":"f961a8dd3cf370ce489876c8080144fb886eae3c","modified":1545653172511},{"_id":"public/archives/2013/index.html","hash":"00e631368eb48cade0682c9f44c89cd0803f5310","modified":1545653172512},{"_id":"public/2013/07/14/hello-world.html","hash":"aed07582617369352a7da7cedfa663fdcb8df6f9","modified":1545653172512},{"_id":"public/categories/foo/index.html","hash":"0ae84b2ec26cc7455b5cf0df9a83fd8feedb46a2","modified":1545653172512},{"_id":"public/archives/2013/07/index.html","hash":"5515bf1631d1ee3c902ca7de41e3b798830144e7","modified":1545653172512},{"_id":"public/categories/foo/bar/index.html","hash":"32e773fd9c5d1507aa0956c5ba5ad43f20322fd6","modified":1545653172512},{"_id":"public/2018/11/05/xxtea解密文件代码.html","hash":"8937129b2ab5697cad5179e534a5493d1b05ddc8","modified":1545653172512},{"_id":"public/images/bg1.jpg","hash":"7f2a1b7182f86536289d4eb5fe26f24d9c25be4e","modified":1545653172512},{"_id":"public/images/bkg.png","hash":"cb2b29141d76342bb988e18626362ac69ed21c19","modified":1545653172512},{"_id":"public/images/blacktocat.png","hash":"2ee6742d5f6f505106233bf8a2605cda9f49c272","modified":1545653172512},{"_id":"public/images/icon/githubIcon.png","hash":"e814f219f19b2302238b354851826c42ef13a8c5","modified":1545653172512},{"_id":"public/images/icon/cat.png","hash":"57909384f83e87bdef4f8dcaccf0e82e78949c31","modified":1545653172512},{"_id":"public/images/math/avg.png","hash":"6def9eeb8d22a5962d7b62cd48db15cc3525a2ad","modified":1545653172512},{"_id":"public/images/math/normaldis.png","hash":"4f9f79262ad7754dbb669c9bc5c2cb667c404fa1","modified":1545653172513},{"_id":"public/images/math/obb.jpg","hash":"d41adf5608a5486181308cc2773557da4e4f0fd0","modified":1545653172513},{"_id":"public/images/mindMap/garbage_collector.png","hash":"1a519be9ab588830662dcd247ddfb24f194e39b9","modified":1545653172513},{"_id":"public/images/mindMap/hashmap.png","hash":"ef0b7fecb2238e21ada74fa8c72581a1b7b0ac67","modified":1545653172513},{"_id":"public/images/mindMap/jvm_memory.png","hash":"925ac25d73b3bf3f32d95285f594536a6573d3f2","modified":1545653172513},{"_id":"public/images/mindMap/无标题.png","hash":"eb2060ef2b39b08da935253162e2e74dd60a6102","modified":1545653172513},{"_id":"public/images/mindMap/mysql_optimal.png","hash":"6302c915f2a4b15346cd62d9e6387ce1085cb87d","modified":1545653172513},{"_id":"public/images/novel/liucheng.png","hash":"e547df4305ef38e2462317e94924f098ce07bfb9","modified":1545653172513},{"_id":"public/images/otherRes/GetPort.__exe__","hash":"2ac9cc8ca4de8a1ecfa9b1bcdfbec218f4c9524e","modified":1545653172513},{"_id":"public/images/otherRes/Program.cs","hash":"abab4c57fb43ff5d9e9fea69a32372f312f1b51e","modified":1545653172513},{"_id":"public/images/otherRes/merge_1.png","hash":"6dd436b41aa576dda523c062fa70690d987c11c0","modified":1545653172513},{"_id":"public/images/otherRes/merge_2.png","hash":"67440afe7c773453ee41ef27f979a1d34e876bc2","modified":1545653172513},{"_id":"public/images/otherRes/merge_4.png","hash":"1afa0095870c3ec120500ccbe7be43a58f3fca49","modified":1545653172513},{"_id":"public/images/otherRes/merge_5.png","hash":"d0edde0c9bec01b4f31f464cbd37b107b20b2b55","modified":1545653172513},{"_id":"public/images/resextract/dontstarve_2.jpg","hash":"f2500662cad144e07e5ef3c6f8ef3dfdd1a860de","modified":1545653172514},{"_id":"public/images/math/circleXcircle.gif","hash":"27f80895c5e2d26b6fd3a8c1ba0f9dfe0136e9e1","modified":1545653172517},{"_id":"public/images/math/rectAngleXcircle.gif","hash":"72318431248ef814b25647abd809eec564a2165e","modified":1545653172517},{"_id":"public/images/otherRes/merge_3.png","hash":"ab63410f17df28570dc41fe9d543824518138aec","modified":1545653172517},{"_id":"public/images/math/rectXrect.gif","hash":"88a01e2d859f3864b4db227137093c986bd1c416","modified":1545653172517},{"_id":"public/images/resextract/dontstarve.jpg","hash":"1a1357fed6dad0b20442166ad55240fb48e75392","modified":1545653172517},{"_id":"public/images/resextract/ko98.jpg","hash":"2095e53c065c0188174550e1b7aaf5b29e958ba2","modified":1545653172517},{"_id":"public/images/resextract/ko98_2.jpg","hash":"dbf7988310ea23e465d58996c9c877643a179dda","modified":1545653172517},{"_id":"public/images/math/rectXcircle.gif","hash":"8ef7249aef029127e521bdbb057150b1101776fb","modified":1545653172526},{"_id":"public/images/musicextract/fsbextract.gif","hash":"ab95239c79db64a2eefc4e457ee8680dbb06d1c8","modified":1545653172526},{"_id":"public/images/math/obb.gif","hash":"c014280d696b63a0d07b970acf55e27fba31d16a","modified":1545653172548},{"_id":"public/images/cocos/heroLevel.gif","hash":"36949bc9194636d7c6741c3ca4485eb4eec96106","modified":1545653172637},{"_id":"public/images/cocos/rotateMenu.gif","hash":"6f469e6d885cb7cb9b030051b48c5c9758494c8d","modified":1545653172642},{"_id":"public/images/cocos/lolMenu.gif","hash":"765fa3a28be905be0cc1d0729cb08fe394290af0","modified":1545653172652}],"Category":[{"name":"server","_id":"cjq0w6f0e00053292343syg63"},{"name":"math","_id":"cjq0w6f0o000a3292f0iag8jc"},{"name":"game music","_id":"cjq0w6f11000h3292943d5w79"},{"name":"cocos","_id":"cjq0w6f1h000w32924ja48h3b"},{"name":"foo","_id":"cjq28voe60000ex92y8xxhndv"},{"name":"bar","parent":"cjq28voe60000ex92y8xxhndv","_id":"cjq28voe70001ex92vwuu9ke9"}],"Data":[],"Page":[],"Post":[{"title":"Hello World","date":"2013-07-14T09:01:34.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2013-07-14 17:01:34\ncategories:\n- foo\n- bar\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"updated":"2018-12-24T11:44:16.286Z","_id":"cjq0w5ieb00003292imgg3vj4","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"layout":"post","title":"游戏资源提取方法合集","published":1,"_content":"\n前言\n===\n这篇文章主要介绍一些我提取过的美术资源的方法\n\n1.饥荒\n===\n\n![dontsarve](/images/resextract/dontstarve_2.jpg)\n\n饥荒的美术资源是没有加密过，但是是```tex```后缀，网上没找到这种格式的相关信息。我找到一个工具，可以\n将这种格式的资源转化为png，工具名称```ktool```.[百度网盘ktool下载地址](http://pan.baidu.com/s/1dEEN7dn)\n解压后可以在目录下看到```ktech.exe```文件，通过下面的方法进行转换\n\n\tktech.exe srcFileName targetFileName\n\n为了遍历所有的图片，我又写了一个批处理\n\n\tcd C:\\Users\\isghost\\Desktop\\ktools-4.0-win32\\ktools\\image\n\tfor /r   %%i in (*.tex)  do (\n\t   ..\\ktech.exe %%i %%~ni.png\n\t)\n\n这个批处理会遍历所有的tex结尾的文件，将其转化为png。\n![dontsarve](/images/resextract/dontstarve.jpg)\n\n[百度网盘下载地址](http://pan.baidu.com/s/1dEEN7dn)，包含饥荒和饥荒dlc的资源\n\n---\n\n2.拳皇98终极之战ol\n===\n![拳皇98](/images/resextract/ko98.jpg)\n\n由于PNG图片的开头都是一样的。将拳皇的图片资源与普通图片对比，可以发现，除了开头二进制部分有一些不一样，替换成正常头部，就可以读取了。\n\n![拳皇98](/images/resextract/ko98_2.jpg)","source":"_posts/2016-04-18-gameresextract.markdown","raw":"---\nlayout: post\ntitle: 游戏资源提取方法合集\npublished: true\ncategories:\ntags:\n---\n\n前言\n===\n这篇文章主要介绍一些我提取过的美术资源的方法\n\n1.饥荒\n===\n\n![dontsarve](/images/resextract/dontstarve_2.jpg)\n\n饥荒的美术资源是没有加密过，但是是```tex```后缀，网上没找到这种格式的相关信息。我找到一个工具，可以\n将这种格式的资源转化为png，工具名称```ktool```.[百度网盘ktool下载地址](http://pan.baidu.com/s/1dEEN7dn)\n解压后可以在目录下看到```ktech.exe```文件，通过下面的方法进行转换\n\n\tktech.exe srcFileName targetFileName\n\n为了遍历所有的图片，我又写了一个批处理\n\n\tcd C:\\Users\\isghost\\Desktop\\ktools-4.0-win32\\ktools\\image\n\tfor /r   %%i in (*.tex)  do (\n\t   ..\\ktech.exe %%i %%~ni.png\n\t)\n\n这个批处理会遍历所有的tex结尾的文件，将其转化为png。\n![dontsarve](/images/resextract/dontstarve.jpg)\n\n[百度网盘下载地址](http://pan.baidu.com/s/1dEEN7dn)，包含饥荒和饥荒dlc的资源\n\n---\n\n2.拳皇98终极之战ol\n===\n![拳皇98](/images/resextract/ko98.jpg)\n\n由于PNG图片的开头都是一样的。将拳皇的图片资源与普通图片对比，可以发现，除了开头二进制部分有一些不一样，替换成正常头部，就可以读取了。\n\n![拳皇98](/images/resextract/ko98_2.jpg)","slug":"2016-04-18-gameresextract","date":"2018-12-24T11:17:03.382Z","updated":"2018-12-24T12:02:34.715Z","_id":"cjq0w6f0100013292zqkoqgz3","comments":1,"photos":[],"link":"","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>这篇文章主要介绍一些我提取过的美术资源的方法</p>\n<h1 id=\"1-饥荒\"><a href=\"#1-饥荒\" class=\"headerlink\" title=\"1.饥荒\"></a>1.饥荒</h1><p><img src=\"/images/resextract/dontstarve_2.jpg\" alt=\"dontsarve\"></p>\n<p>饥荒的美术资源是没有加密过，但是是<code>tex</code>后缀，网上没找到这种格式的相关信息。我找到一个工具，可以<br>将这种格式的资源转化为png，工具名称<code>ktool</code>.<a href=\"http://pan.baidu.com/s/1dEEN7dn\" target=\"_blank\" rel=\"noopener\">百度网盘ktool下载地址</a><br>解压后可以在目录下看到<code>ktech.exe</code>文件，通过下面的方法进行转换</p>\n<pre><code>ktech.exe srcFileName targetFileName\n</code></pre><p>为了遍历所有的图片，我又写了一个批处理</p>\n<pre><code>cd C:\\Users\\isghost\\Desktop\\ktools-4.0-win32\\ktools\\image\nfor /r   %%i in (*.tex)  do (\n   ..\\ktech.exe %%i %%~ni.png\n)\n</code></pre><p>这个批处理会遍历所有的tex结尾的文件，将其转化为png。<br><img src=\"/images/resextract/dontstarve.jpg\" alt=\"dontsarve\"></p>\n<p><a href=\"http://pan.baidu.com/s/1dEEN7dn\" target=\"_blank\" rel=\"noopener\">百度网盘下载地址</a>，包含饥荒和饥荒dlc的资源</p>\n<hr>\n<h1 id=\"2-拳皇98终极之战ol\"><a href=\"#2-拳皇98终极之战ol\" class=\"headerlink\" title=\"2.拳皇98终极之战ol\"></a>2.拳皇98终极之战ol</h1><p><img src=\"/images/resextract/ko98.jpg\" alt=\"拳皇98\"></p>\n<p>由于PNG图片的开头都是一样的。将拳皇的图片资源与普通图片对比，可以发现，除了开头二进制部分有一些不一样，替换成正常头部，就可以读取了。</p>\n<p><img src=\"/images/resextract/ko98_2.jpg\" alt=\"拳皇98\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>这篇文章主要介绍一些我提取过的美术资源的方法</p>\n<h1 id=\"1-饥荒\"><a href=\"#1-饥荒\" class=\"headerlink\" title=\"1.饥荒\"></a>1.饥荒</h1><p><img src=\"/images/resextract/dontstarve_2.jpg\" alt=\"dontsarve\"></p>\n<p>饥荒的美术资源是没有加密过，但是是<code>tex</code>后缀，网上没找到这种格式的相关信息。我找到一个工具，可以<br>将这种格式的资源转化为png，工具名称<code>ktool</code>.<a href=\"http://pan.baidu.com/s/1dEEN7dn\" target=\"_blank\" rel=\"noopener\">百度网盘ktool下载地址</a><br>解压后可以在目录下看到<code>ktech.exe</code>文件，通过下面的方法进行转换</p>\n<pre><code>ktech.exe srcFileName targetFileName\n</code></pre><p>为了遍历所有的图片，我又写了一个批处理</p>\n<pre><code>cd C:\\Users\\isghost\\Desktop\\ktools-4.0-win32\\ktools\\image\nfor /r   %%i in (*.tex)  do (\n   ..\\ktech.exe %%i %%~ni.png\n)\n</code></pre><p>这个批处理会遍历所有的tex结尾的文件，将其转化为png。<br><img src=\"/images/resextract/dontstarve.jpg\" alt=\"dontsarve\"></p>\n<p><a href=\"http://pan.baidu.com/s/1dEEN7dn\" target=\"_blank\" rel=\"noopener\">百度网盘下载地址</a>，包含饥荒和饥荒dlc的资源</p>\n<hr>\n<h1 id=\"2-拳皇98终极之战ol\"><a href=\"#2-拳皇98终极之战ol\" class=\"headerlink\" title=\"2.拳皇98终极之战ol\"></a>2.拳皇98终极之战ol</h1><p><img src=\"/images/resextract/ko98.jpg\" alt=\"拳皇98\"></p>\n<p>由于PNG图片的开头都是一样的。将拳皇的图片资源与普通图片对比，可以发现，除了开头二进制部分有一些不一样，替换成正常头部，就可以读取了。</p>\n<p><img src=\"/images/resextract/ko98_2.jpg\" alt=\"拳皇98\"></p>\n"},{"layout":"post","title":"xxtea解密文件代码","published":1,"_content":"\n### xxtea加解密小工具\n\n## 目的\n\n破解安装包，得到key,sign后，每次都要打开vs调整参数，有些麻烦，写了一个运行时带参数的版本，使用起来方\n便多了\n\n## 参数说明\n\t\n\t默认一个参数是输入文件\n\t-key -k 加密的Key\n\t-sign -s 加密的sign\n\t-out -o 输出的文件名称\n\n## 使用例子\n\n\tD:\\web\\CTest\\Release>CTest.exe launcher.zip -key sgsdfesdgr -sign edfrgdfrgh -out fuck.zip\n\n## 代码\n\n{% codeblock C++ %}\n#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include\"xxtea.h\"\n/*\n\t-key -k\n\t-sign -s\n\t-out -o\n*/\nmap<string, string> parseParams(int argc, char **argv){\n\tmap<string, string> result;\n\tfor (int i = 0; i < argc; i++){\n\t\tif (strcmp(argv[i], \"-key\") == 0 || strcmp(argv[i], \"-k\") == 0){\n\t\t\tresult[\"key\"] = argv[i + 1];\n\t\t\ti++;\n\t\t}\n\t\telse if (strcmp(argv[i], \"-sign\") == 0 || strcmp(argv[i], \"-s\") == 0){\n\t\t\tresult[\"sign\"] = argv[i + 1];\n\t\t\ti++;\n\t\t}\n\t\telse if (strcmp(argv[i], \"-out\") == 0 || strcmp(argv[i], \"-o\") == 0){\n\t\t\tresult[\"out\"] = argv[i + 1];\n\t\t\ti++;\n\t\t}\n\t\telse{\n\t\t\tresult[\"in\"] = argv[i];\n\t\t}\n\t}\n\tif (result[\"out\"] == \"\"){\n\t\tresult[\"out\"] = \"D\" + result[\"in\"];\n\t}\n\treturn result;\n}\nint main(int argc, char **argv){\n\tauto params = parseParams(argc, argv);\n\tauto * fp = fopen(params[\"in\"].c_str(), \"rb\");\n\tif (fp == NULL){\n\t\tprintf(\"can't found  file\");\n\t\treturn 0;\n\t}\n\tfseek(fp, 0L, SEEK_END); /* 定位到文件末尾 */\n\tint flen = ftell(fp); /* 得到文件大小 */\n\tunsigned char * p = (unsigned char *)malloc(flen + 1); /* 根据文件大小动态分配内存空间 */\n\tif (p == NULL)\n\t{\n\t\tfclose(fp);\n\t\treturn 0;\n\t}\n\tfseek(fp, 0L, SEEK_SET); /* 定位到文件开头 */\n\tfread(p, flen, 1, fp); /* 一次性读取全部文件内容 */\n\tp[flen] = 0; /* 字符串结束标志 */\n\tfclose(fp);\n\tchar key[256];// \"sgsYpad7Lo0khJf\";\n\tstrcpy(key, params[\"key\"].c_str());\n\t// char sign[] = \"sgsEpadGsign28k\";\n\t char sign[256];\n\t strcpy(sign, params[\"sign\"].c_str());\n\t xxtea_long retLen = 0;\n\t p = xxtea_decrypt(p + strlen(sign), flen - strlen(sign), (unsigned char *)key, strlen(key), &retLen);\n\t fp = fopen(params[\"out\"].c_str(), \"wb\");\n\t fwrite(p, retLen, 1, fp);\n\t fclose(fp);\n}\n{% endcodeblock %}\n\n## 二进制文件\n[下载xxtea.exe](http://pan.baidu.com/s/1qY2AmLm)\n\n","source":"_posts/2016-07-10-xxtea.markdown","raw":"---\nlayout: post\ntitle: xxtea解密文件代码\npublished: true\ncategories:\ntags:\n---\n\n### xxtea加解密小工具\n\n## 目的\n\n破解安装包，得到key,sign后，每次都要打开vs调整参数，有些麻烦，写了一个运行时带参数的版本，使用起来方\n便多了\n\n## 参数说明\n\t\n\t默认一个参数是输入文件\n\t-key -k 加密的Key\n\t-sign -s 加密的sign\n\t-out -o 输出的文件名称\n\n## 使用例子\n\n\tD:\\web\\CTest\\Release>CTest.exe launcher.zip -key sgsdfesdgr -sign edfrgdfrgh -out fuck.zip\n\n## 代码\n\n{% codeblock C++ %}\n#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include\"xxtea.h\"\n/*\n\t-key -k\n\t-sign -s\n\t-out -o\n*/\nmap<string, string> parseParams(int argc, char **argv){\n\tmap<string, string> result;\n\tfor (int i = 0; i < argc; i++){\n\t\tif (strcmp(argv[i], \"-key\") == 0 || strcmp(argv[i], \"-k\") == 0){\n\t\t\tresult[\"key\"] = argv[i + 1];\n\t\t\ti++;\n\t\t}\n\t\telse if (strcmp(argv[i], \"-sign\") == 0 || strcmp(argv[i], \"-s\") == 0){\n\t\t\tresult[\"sign\"] = argv[i + 1];\n\t\t\ti++;\n\t\t}\n\t\telse if (strcmp(argv[i], \"-out\") == 0 || strcmp(argv[i], \"-o\") == 0){\n\t\t\tresult[\"out\"] = argv[i + 1];\n\t\t\ti++;\n\t\t}\n\t\telse{\n\t\t\tresult[\"in\"] = argv[i];\n\t\t}\n\t}\n\tif (result[\"out\"] == \"\"){\n\t\tresult[\"out\"] = \"D\" + result[\"in\"];\n\t}\n\treturn result;\n}\nint main(int argc, char **argv){\n\tauto params = parseParams(argc, argv);\n\tauto * fp = fopen(params[\"in\"].c_str(), \"rb\");\n\tif (fp == NULL){\n\t\tprintf(\"can't found  file\");\n\t\treturn 0;\n\t}\n\tfseek(fp, 0L, SEEK_END); /* 定位到文件末尾 */\n\tint flen = ftell(fp); /* 得到文件大小 */\n\tunsigned char * p = (unsigned char *)malloc(flen + 1); /* 根据文件大小动态分配内存空间 */\n\tif (p == NULL)\n\t{\n\t\tfclose(fp);\n\t\treturn 0;\n\t}\n\tfseek(fp, 0L, SEEK_SET); /* 定位到文件开头 */\n\tfread(p, flen, 1, fp); /* 一次性读取全部文件内容 */\n\tp[flen] = 0; /* 字符串结束标志 */\n\tfclose(fp);\n\tchar key[256];// \"sgsYpad7Lo0khJf\";\n\tstrcpy(key, params[\"key\"].c_str());\n\t// char sign[] = \"sgsEpadGsign28k\";\n\t char sign[256];\n\t strcpy(sign, params[\"sign\"].c_str());\n\t xxtea_long retLen = 0;\n\t p = xxtea_decrypt(p + strlen(sign), flen - strlen(sign), (unsigned char *)key, strlen(key), &retLen);\n\t fp = fopen(params[\"out\"].c_str(), \"wb\");\n\t fwrite(p, retLen, 1, fp);\n\t fclose(fp);\n}\n{% endcodeblock %}\n\n## 二进制文件\n[下载xxtea.exe](http://pan.baidu.com/s/1qY2AmLm)\n\n","slug":"2016-07-10-xxtea","date":"2018-11-05T06:35:56.147Z","updated":"2018-12-24T12:02:34.717Z","_id":"cjq0w6f0600023292k2z6urb2","comments":1,"photos":[],"link":"","content":"<h3 id=\"xxtea加解密小工具\"><a href=\"#xxtea加解密小工具\" class=\"headerlink\" title=\"xxtea加解密小工具\"></a>xxtea加解密小工具</h3><h2 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h2><p>破解安装包，得到key,sign后，每次都要打开vs调整参数，有些麻烦，写了一个运行时带参数的版本，使用起来方<br>便多了</p>\n<h2 id=\"参数说明\"><a href=\"#参数说明\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h2><pre><code>默认一个参数是输入文件\n-key -k 加密的Key\n-sign -s 加密的sign\n-out -o 输出的文件名称\n</code></pre><h2 id=\"使用例子\"><a href=\"#使用例子\" class=\"headerlink\" title=\"使用例子\"></a>使用例子</h2><pre><code>D:\\web\\CTest\\Release&gt;CTest.exe launcher.zip -key sgsdfesdgr -sign edfrgdfrgh -out fuck.zip\n</code></pre><h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight cpp\"><figcaption><span>C++</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">\"xxtea.h\"</span></span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t-key -k</span></span><br><span class=\"line\"><span class=\"comment\">\t-sign -s</span></span><br><span class=\"line\"><span class=\"comment\">\t-out -o</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"built_in\">map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">string</span>&gt; parseParams(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">string</span>&gt; result;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; argc; i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(argv[i], <span class=\"string\">\"-key\"</span>) == <span class=\"number\">0</span> || <span class=\"built_in\">strcmp</span>(argv[i], <span class=\"string\">\"-k\"</span>) == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\tresult[<span class=\"string\">\"key\"</span>] = argv[i + <span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\ti++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(argv[i], <span class=\"string\">\"-sign\"</span>) == <span class=\"number\">0</span> || <span class=\"built_in\">strcmp</span>(argv[i], <span class=\"string\">\"-s\"</span>) == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\tresult[<span class=\"string\">\"sign\"</span>] = argv[i + <span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\ti++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(argv[i], <span class=\"string\">\"-out\"</span>) == <span class=\"number\">0</span> || <span class=\"built_in\">strcmp</span>(argv[i], <span class=\"string\">\"-o\"</span>) == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\tresult[<span class=\"string\">\"out\"</span>] = argv[i + <span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\ti++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\tresult[<span class=\"string\">\"in\"</span>] = argv[i];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (result[<span class=\"string\">\"out\"</span>] == <span class=\"string\">\"\"</span>)&#123;</span><br><span class=\"line\">\t\tresult[<span class=\"string\">\"out\"</span>] = <span class=\"string\">\"D\"</span> + result[<span class=\"string\">\"in\"</span>];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> params = parseParams(argc, argv);</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> * fp = fopen(params[<span class=\"string\">\"in\"</span>].c_str(), <span class=\"string\">\"rb\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (fp == <span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"can't found  file\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfseek(fp, <span class=\"number\">0L</span>, SEEK_END); <span class=\"comment\">/* 定位到文件末尾 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> flen = ftell(fp); <span class=\"comment\">/* 得到文件大小 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> * p = (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *)<span class=\"built_in\">malloc</span>(flen + <span class=\"number\">1</span>); <span class=\"comment\">/* 根据文件大小动态分配内存空间 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (p == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tfclose(fp);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfseek(fp, <span class=\"number\">0L</span>, SEEK_SET); <span class=\"comment\">/* 定位到文件开头 */</span></span><br><span class=\"line\">\tfread(p, flen, <span class=\"number\">1</span>, fp); <span class=\"comment\">/* 一次性读取全部文件内容 */</span></span><br><span class=\"line\">\tp[flen] = <span class=\"number\">0</span>; <span class=\"comment\">/* 字符串结束标志 */</span></span><br><span class=\"line\">\tfclose(fp);</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> key[<span class=\"number\">256</span>];<span class=\"comment\">// \"sgsYpad7Lo0khJf\";</span></span><br><span class=\"line\">\t<span class=\"built_in\">strcpy</span>(key, params[<span class=\"string\">\"key\"</span>].c_str());</span><br><span class=\"line\">\t<span class=\"comment\">// char sign[] = \"sgsEpadGsign28k\";</span></span><br><span class=\"line\">\t <span class=\"keyword\">char</span> sign[<span class=\"number\">256</span>];</span><br><span class=\"line\">\t <span class=\"built_in\">strcpy</span>(sign, params[<span class=\"string\">\"sign\"</span>].c_str());</span><br><span class=\"line\">\t xxtea_long retLen = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t p = xxtea_decrypt(p + <span class=\"built_in\">strlen</span>(sign), flen - <span class=\"built_in\">strlen</span>(sign), (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *)key, <span class=\"built_in\">strlen</span>(key), &amp;retLen);</span><br><span class=\"line\">\t fp = fopen(params[<span class=\"string\">\"out\"</span>].c_str(), <span class=\"string\">\"wb\"</span>);</span><br><span class=\"line\">\t fwrite(p, retLen, <span class=\"number\">1</span>, fp);</span><br><span class=\"line\">\t fclose(fp);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"二进制文件\"><a href=\"#二进制文件\" class=\"headerlink\" title=\"二进制文件\"></a>二进制文件</h2><p><a href=\"http://pan.baidu.com/s/1qY2AmLm\" target=\"_blank\" rel=\"noopener\">下载xxtea.exe</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"xxtea加解密小工具\"><a href=\"#xxtea加解密小工具\" class=\"headerlink\" title=\"xxtea加解密小工具\"></a>xxtea加解密小工具</h3><h2 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h2><p>破解安装包，得到key,sign后，每次都要打开vs调整参数，有些麻烦，写了一个运行时带参数的版本，使用起来方<br>便多了</p>\n<h2 id=\"参数说明\"><a href=\"#参数说明\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h2><pre><code>默认一个参数是输入文件\n-key -k 加密的Key\n-sign -s 加密的sign\n-out -o 输出的文件名称\n</code></pre><h2 id=\"使用例子\"><a href=\"#使用例子\" class=\"headerlink\" title=\"使用例子\"></a>使用例子</h2><pre><code>D:\\web\\CTest\\Release&gt;CTest.exe launcher.zip -key sgsdfesdgr -sign edfrgdfrgh -out fuck.zip\n</code></pre><h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight cpp\"><figcaption><span>C++</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">\"xxtea.h\"</span></span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t-key -k</span></span><br><span class=\"line\"><span class=\"comment\">\t-sign -s</span></span><br><span class=\"line\"><span class=\"comment\">\t-out -o</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"built_in\">map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">string</span>&gt; parseParams(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">string</span>&gt; result;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; argc; i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(argv[i], <span class=\"string\">\"-key\"</span>) == <span class=\"number\">0</span> || <span class=\"built_in\">strcmp</span>(argv[i], <span class=\"string\">\"-k\"</span>) == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\tresult[<span class=\"string\">\"key\"</span>] = argv[i + <span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\ti++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(argv[i], <span class=\"string\">\"-sign\"</span>) == <span class=\"number\">0</span> || <span class=\"built_in\">strcmp</span>(argv[i], <span class=\"string\">\"-s\"</span>) == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\tresult[<span class=\"string\">\"sign\"</span>] = argv[i + <span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\ti++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(argv[i], <span class=\"string\">\"-out\"</span>) == <span class=\"number\">0</span> || <span class=\"built_in\">strcmp</span>(argv[i], <span class=\"string\">\"-o\"</span>) == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\tresult[<span class=\"string\">\"out\"</span>] = argv[i + <span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\ti++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\tresult[<span class=\"string\">\"in\"</span>] = argv[i];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (result[<span class=\"string\">\"out\"</span>] == <span class=\"string\">\"\"</span>)&#123;</span><br><span class=\"line\">\t\tresult[<span class=\"string\">\"out\"</span>] = <span class=\"string\">\"D\"</span> + result[<span class=\"string\">\"in\"</span>];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> params = parseParams(argc, argv);</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> * fp = fopen(params[<span class=\"string\">\"in\"</span>].c_str(), <span class=\"string\">\"rb\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (fp == <span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"can't found  file\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfseek(fp, <span class=\"number\">0L</span>, SEEK_END); <span class=\"comment\">/* 定位到文件末尾 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> flen = ftell(fp); <span class=\"comment\">/* 得到文件大小 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> * p = (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *)<span class=\"built_in\">malloc</span>(flen + <span class=\"number\">1</span>); <span class=\"comment\">/* 根据文件大小动态分配内存空间 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (p == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tfclose(fp);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfseek(fp, <span class=\"number\">0L</span>, SEEK_SET); <span class=\"comment\">/* 定位到文件开头 */</span></span><br><span class=\"line\">\tfread(p, flen, <span class=\"number\">1</span>, fp); <span class=\"comment\">/* 一次性读取全部文件内容 */</span></span><br><span class=\"line\">\tp[flen] = <span class=\"number\">0</span>; <span class=\"comment\">/* 字符串结束标志 */</span></span><br><span class=\"line\">\tfclose(fp);</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> key[<span class=\"number\">256</span>];<span class=\"comment\">// \"sgsYpad7Lo0khJf\";</span></span><br><span class=\"line\">\t<span class=\"built_in\">strcpy</span>(key, params[<span class=\"string\">\"key\"</span>].c_str());</span><br><span class=\"line\">\t<span class=\"comment\">// char sign[] = \"sgsEpadGsign28k\";</span></span><br><span class=\"line\">\t <span class=\"keyword\">char</span> sign[<span class=\"number\">256</span>];</span><br><span class=\"line\">\t <span class=\"built_in\">strcpy</span>(sign, params[<span class=\"string\">\"sign\"</span>].c_str());</span><br><span class=\"line\">\t xxtea_long retLen = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t p = xxtea_decrypt(p + <span class=\"built_in\">strlen</span>(sign), flen - <span class=\"built_in\">strlen</span>(sign), (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *)key, <span class=\"built_in\">strlen</span>(key), &amp;retLen);</span><br><span class=\"line\">\t fp = fopen(params[<span class=\"string\">\"out\"</span>].c_str(), <span class=\"string\">\"wb\"</span>);</span><br><span class=\"line\">\t fwrite(p, retLen, <span class=\"number\">1</span>, fp);</span><br><span class=\"line\">\t fclose(fp);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"二进制文件\"><a href=\"#二进制文件\" class=\"headerlink\" title=\"二进制文件\"></a>二进制文件</h2><p><a href=\"http://pan.baidu.com/s/1qY2AmLm\" target=\"_blank\" rel=\"noopener\">下载xxtea.exe</a></p>\n"},{"layout":"post","title":"skynet学习记录","published":0,"_content":"\n安装\n===\nlinux环境配置\n1. 安装应用，需要修改成国内的源，比如阿里云\n2. ```sudo apt-get install git```\n运行例子官方文档缺少内容\n1. ```sudo apt-get install autoconf```\n2. ```apt-get install libreadline-dev```\n3. 进入```./3rd/lua/lua```目录，```make linux```\n","source":"_posts/2016-04-09-skynetstudy.markdown","raw":"---\nlayout: post\ntitle: skynet学习记录\npublished: false\ncategories: server\ntags: skynet server\n---\n\n安装\n===\nlinux环境配置\n1. 安装应用，需要修改成国内的源，比如阿里云\n2. ```sudo apt-get install git```\n运行例子官方文档缺少内容\n1. ```sudo apt-get install autoconf```\n2. ```apt-get install libreadline-dev```\n3. 进入```./3rd/lua/lua```目录，```make linux```\n","slug":"2016-04-09-skynetstudy","date":"2018-11-05T06:35:56.146Z","updated":"2018-12-24T11:55:42.425Z","_id":"cjq0w6f0700033292npwu97k3","comments":1,"photos":[],"link":"","content":"<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p>linux环境配置</p>\n<ol>\n<li>安装应用，需要修改成国内的源，比如阿里云</li>\n<li><figure class=\"highlight plain\"><figcaption><span>apt-get install git```</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">运行例子官方文档缺少内容</span><br><span class=\"line\">1. ```sudo apt-get install autoconf</span><br></pre></td></tr></table></figure>\n</li>\n<li><figure class=\"highlight plain\"><figcaption><span>install libreadline-dev```</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3. 进入```./3rd/lua/lua```目录，```make linux</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p>linux环境配置</p>\n<ol>\n<li>安装应用，需要修改成国内的源，比如阿里云</li>\n<li><figure class=\"highlight plain\"><figcaption><span>apt-get install git```</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">运行例子官方文档缺少内容</span><br><span class=\"line\">1. ```sudo apt-get install autoconf</span><br></pre></td></tr></table></figure>\n</li>\n<li><figure class=\"highlight plain\"><figcaption><span>install libreadline-dev```</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3. 进入```./3rd/lua/lua```目录，```make linux</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"layout":"post","title":"抽奖的常见情况以及解决方案","published":0,"_content":"\n# 抽奖的常见情况以及解决方案\n## 情况一\n#### 环境\n* 抽奖规则为：中奖概率不高，概率高的奖品无数量上限\n* 机器环境：不限\n\n\n#### 解决方案\n这是最常见，也是最好解决的一种。    \n**解决办法:**先不管有没有奖品，直接进行抽奖(未加锁)，如果未中数量限制的奖品，直接发奖。如果抽中有数量限制的奖品，对数据源(redis或者内存等)加锁，查询是否存在对应奖品，如果不存在，则将奖品移出奖池，重新抽奖，重复以上操作。\n\n## 情况二\n#### 环境\n* 抽奖规则为：所有奖项存在数量限制，并且概率相差不大\n* 环境：单服务器进程\n\n#### 解决方案\n情况不常见， 但具有通用性。    \n对每一个奖品创建一个`semaphore`，数量即为商口数量。抽中奖品后，对对应的`semaphore` `tryAcquire`。成功，发放奖品，失败，则将奖品移出奖池，重新抽奖，重复以上操作。\n\n## 情况三\n#### 环境\n* 抽奖规则为：所有奖项存在数量限制，并且概率相差不大\n* 环境：分布式服务器，高并发，奖品数量超多。\n\n#### 解决方案\n采用`经销商-零售商`模式(不要问是什么，因为名字是我瞎编的)。把`redis`(或其他数据库)想像成经销商，每个进程是零售商。每个请求就是购买一件商品。实际就是将以上两种方案结合，再加上分块处理。    \n每次有请求过来时，抽奖。先查看是否有对应奖品(`tryAcquire`)，如果有，那就发奖品。如果没有了，对`redis`加锁，申请一堆奖品(比如来1000个一等奖)，初始化`semaphore`，重复以上操作。    \n**注意事项:**会出现一个情况，数据库没有库存，一些服务器没有奖品可发，一些服务器还能发奖品。如果变成售卖商品的话，显示会比较奇怪。在申请奖品时，取剩余奖品的百分比，可以减少这种情况发生","source":"_posts/2017-08-20-draw.md","raw":"---\nlayout: post\ntitle: 抽奖的常见情况以及解决方案\npublished: false\ncategories:\ntags:\n---\n\n# 抽奖的常见情况以及解决方案\n## 情况一\n#### 环境\n* 抽奖规则为：中奖概率不高，概率高的奖品无数量上限\n* 机器环境：不限\n\n\n#### 解决方案\n这是最常见，也是最好解决的一种。    \n**解决办法:**先不管有没有奖品，直接进行抽奖(未加锁)，如果未中数量限制的奖品，直接发奖。如果抽中有数量限制的奖品，对数据源(redis或者内存等)加锁，查询是否存在对应奖品，如果不存在，则将奖品移出奖池，重新抽奖，重复以上操作。\n\n## 情况二\n#### 环境\n* 抽奖规则为：所有奖项存在数量限制，并且概率相差不大\n* 环境：单服务器进程\n\n#### 解决方案\n情况不常见， 但具有通用性。    \n对每一个奖品创建一个`semaphore`，数量即为商口数量。抽中奖品后，对对应的`semaphore` `tryAcquire`。成功，发放奖品，失败，则将奖品移出奖池，重新抽奖，重复以上操作。\n\n## 情况三\n#### 环境\n* 抽奖规则为：所有奖项存在数量限制，并且概率相差不大\n* 环境：分布式服务器，高并发，奖品数量超多。\n\n#### 解决方案\n采用`经销商-零售商`模式(不要问是什么，因为名字是我瞎编的)。把`redis`(或其他数据库)想像成经销商，每个进程是零售商。每个请求就是购买一件商品。实际就是将以上两种方案结合，再加上分块处理。    \n每次有请求过来时，抽奖。先查看是否有对应奖品(`tryAcquire`)，如果有，那就发奖品。如果没有了，对`redis`加锁，申请一堆奖品(比如来1000个一等奖)，初始化`semaphore`，重复以上操作。    \n**注意事项:**会出现一个情况，数据库没有库存，一些服务器没有奖品可发，一些服务器还能发奖品。如果变成售卖商品的话，显示会比较奇怪。在申请奖品时，取剩余奖品的百分比，可以减少这种情况发生","slug":"2017-08-20-draw","date":"2018-11-05T06:35:56.153Z","updated":"2018-12-24T12:02:34.716Z","_id":"cjq0w6f0a00043292liizvel6","comments":1,"photos":[],"link":"","content":"<h1 id=\"抽奖的常见情况以及解决方案\"><a href=\"#抽奖的常见情况以及解决方案\" class=\"headerlink\" title=\"抽奖的常见情况以及解决方案\"></a>抽奖的常见情况以及解决方案</h1><h2 id=\"情况一\"><a href=\"#情况一\" class=\"headerlink\" title=\"情况一\"></a>情况一</h2><h4 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h4><ul>\n<li>抽奖规则为：中奖概率不高，概率高的奖品无数量上限</li>\n<li>机器环境：不限</li>\n</ul>\n<h4 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><p>这是最常见，也是最好解决的一种。<br><strong>解决办法:</strong>先不管有没有奖品，直接进行抽奖(未加锁)，如果未中数量限制的奖品，直接发奖。如果抽中有数量限制的奖品，对数据源(redis或者内存等)加锁，查询是否存在对应奖品，如果不存在，则将奖品移出奖池，重新抽奖，重复以上操作。</p>\n<h2 id=\"情况二\"><a href=\"#情况二\" class=\"headerlink\" title=\"情况二\"></a>情况二</h2><h4 id=\"环境-1\"><a href=\"#环境-1\" class=\"headerlink\" title=\"环境\"></a>环境</h4><ul>\n<li>抽奖规则为：所有奖项存在数量限制，并且概率相差不大</li>\n<li>环境：单服务器进程</li>\n</ul>\n<h4 id=\"解决方案-1\"><a href=\"#解决方案-1\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><p>情况不常见， 但具有通用性。<br>对每一个奖品创建一个<code>semaphore</code>，数量即为商口数量。抽中奖品后，对对应的<code>semaphore</code> <code>tryAcquire</code>。成功，发放奖品，失败，则将奖品移出奖池，重新抽奖，重复以上操作。</p>\n<h2 id=\"情况三\"><a href=\"#情况三\" class=\"headerlink\" title=\"情况三\"></a>情况三</h2><h4 id=\"环境-2\"><a href=\"#环境-2\" class=\"headerlink\" title=\"环境\"></a>环境</h4><ul>\n<li>抽奖规则为：所有奖项存在数量限制，并且概率相差不大</li>\n<li>环境：分布式服务器，高并发，奖品数量超多。</li>\n</ul>\n<h4 id=\"解决方案-2\"><a href=\"#解决方案-2\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><p>采用<code>经销商-零售商</code>模式(不要问是什么，因为名字是我瞎编的)。把<code>redis</code>(或其他数据库)想像成经销商，每个进程是零售商。每个请求就是购买一件商品。实际就是将以上两种方案结合，再加上分块处理。<br>每次有请求过来时，抽奖。先查看是否有对应奖品(<code>tryAcquire</code>)，如果有，那就发奖品。如果没有了，对<code>redis</code>加锁，申请一堆奖品(比如来1000个一等奖)，初始化<code>semaphore</code>，重复以上操作。<br><strong>注意事项:</strong>会出现一个情况，数据库没有库存，一些服务器没有奖品可发，一些服务器还能发奖品。如果变成售卖商品的话，显示会比较奇怪。在申请奖品时，取剩余奖品的百分比，可以减少这种情况发生</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"抽奖的常见情况以及解决方案\"><a href=\"#抽奖的常见情况以及解决方案\" class=\"headerlink\" title=\"抽奖的常见情况以及解决方案\"></a>抽奖的常见情况以及解决方案</h1><h2 id=\"情况一\"><a href=\"#情况一\" class=\"headerlink\" title=\"情况一\"></a>情况一</h2><h4 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h4><ul>\n<li>抽奖规则为：中奖概率不高，概率高的奖品无数量上限</li>\n<li>机器环境：不限</li>\n</ul>\n<h4 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><p>这是最常见，也是最好解决的一种。<br><strong>解决办法:</strong>先不管有没有奖品，直接进行抽奖(未加锁)，如果未中数量限制的奖品，直接发奖。如果抽中有数量限制的奖品，对数据源(redis或者内存等)加锁，查询是否存在对应奖品，如果不存在，则将奖品移出奖池，重新抽奖，重复以上操作。</p>\n<h2 id=\"情况二\"><a href=\"#情况二\" class=\"headerlink\" title=\"情况二\"></a>情况二</h2><h4 id=\"环境-1\"><a href=\"#环境-1\" class=\"headerlink\" title=\"环境\"></a>环境</h4><ul>\n<li>抽奖规则为：所有奖项存在数量限制，并且概率相差不大</li>\n<li>环境：单服务器进程</li>\n</ul>\n<h4 id=\"解决方案-1\"><a href=\"#解决方案-1\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><p>情况不常见， 但具有通用性。<br>对每一个奖品创建一个<code>semaphore</code>，数量即为商口数量。抽中奖品后，对对应的<code>semaphore</code> <code>tryAcquire</code>。成功，发放奖品，失败，则将奖品移出奖池，重新抽奖，重复以上操作。</p>\n<h2 id=\"情况三\"><a href=\"#情况三\" class=\"headerlink\" title=\"情况三\"></a>情况三</h2><h4 id=\"环境-2\"><a href=\"#环境-2\" class=\"headerlink\" title=\"环境\"></a>环境</h4><ul>\n<li>抽奖规则为：所有奖项存在数量限制，并且概率相差不大</li>\n<li>环境：分布式服务器，高并发，奖品数量超多。</li>\n</ul>\n<h4 id=\"解决方案-2\"><a href=\"#解决方案-2\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><p>采用<code>经销商-零售商</code>模式(不要问是什么，因为名字是我瞎编的)。把<code>redis</code>(或其他数据库)想像成经销商，每个进程是零售商。每个请求就是购买一件商品。实际就是将以上两种方案结合，再加上分块处理。<br>每次有请求过来时，抽奖。先查看是否有对应奖品(<code>tryAcquire</code>)，如果有，那就发奖品。如果没有了，对<code>redis</code>加锁，申请一堆奖品(比如来1000个一等奖)，初始化<code>semaphore</code>，重复以上操作。<br><strong>注意事项:</strong>会出现一个情况，数据库没有库存，一些服务器没有奖品可发，一些服务器还能发奖品。如果变成售卖商品的话，显示会比较奇怪。在申请奖品时，取剩余奖品的百分比，可以减少这种情况发生</p>\n"},{"layout":"post","title":"JAVA知识点-思维导图","published":1,"_content":"# 垃圾收集器\n\n![垃圾收集器](/images/mindMap/garbage_collector.png)\n\n# HashMap\n\n![HashMap](/images/mindMap/hashmap.png)\n\n# JVM内存\n\n![JVM内存](/images/mindMap/jvm_memory.png)\n\n# mysql优化（待完善）\n\n![mysql优化](/images/mindMap/mysql_optimal.png)\n","source":"_posts/2018-04-01-mind_map.md","raw":"---\nlayout: post\ntitle: JAVA知识点-思维导图\npublished: true\ncategories:\ntags:\n---\n# 垃圾收集器\n\n![垃圾收集器](/images/mindMap/garbage_collector.png)\n\n# HashMap\n\n![HashMap](/images/mindMap/hashmap.png)\n\n# JVM内存\n\n![JVM内存](/images/mindMap/jvm_memory.png)\n\n# mysql优化（待完善）\n\n![mysql优化](/images/mindMap/mysql_optimal.png)\n","slug":"2018-04-01-mind_map","date":"2018-12-24T11:17:03.387Z","updated":"2018-12-24T12:02:34.714Z","_id":"cjq0w6f0g00073292vlr1qbub","comments":1,"photos":[],"link":"","content":"<h1 id=\"垃圾收集器\"><a href=\"#垃圾收集器\" class=\"headerlink\" title=\"垃圾收集器\"></a>垃圾收集器</h1><p><img src=\"/images/mindMap/garbage_collector.png\" alt=\"垃圾收集器\"></p>\n<h1 id=\"HashMap\"><a href=\"#HashMap\" class=\"headerlink\" title=\"HashMap\"></a>HashMap</h1><p><img src=\"/images/mindMap/hashmap.png\" alt=\"HashMap\"></p>\n<h1 id=\"JVM内存\"><a href=\"#JVM内存\" class=\"headerlink\" title=\"JVM内存\"></a>JVM内存</h1><p><img src=\"/images/mindMap/jvm_memory.png\" alt=\"JVM内存\"></p>\n<h1 id=\"mysql优化（待完善）\"><a href=\"#mysql优化（待完善）\" class=\"headerlink\" title=\"mysql优化（待完善）\"></a>mysql优化（待完善）</h1><p><img src=\"/images/mindMap/mysql_optimal.png\" alt=\"mysql优化\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"垃圾收集器\"><a href=\"#垃圾收集器\" class=\"headerlink\" title=\"垃圾收集器\"></a>垃圾收集器</h1><p><img src=\"/images/mindMap/garbage_collector.png\" alt=\"垃圾收集器\"></p>\n<h1 id=\"HashMap\"><a href=\"#HashMap\" class=\"headerlink\" title=\"HashMap\"></a>HashMap</h1><p><img src=\"/images/mindMap/hashmap.png\" alt=\"HashMap\"></p>\n<h1 id=\"JVM内存\"><a href=\"#JVM内存\" class=\"headerlink\" title=\"JVM内存\"></a>JVM内存</h1><p><img src=\"/images/mindMap/jvm_memory.png\" alt=\"JVM内存\"></p>\n<h1 id=\"mysql优化（待完善）\"><a href=\"#mysql优化（待完善）\" class=\"headerlink\" title=\"mysql优化（待完善）\"></a>mysql优化（待完善）</h1><p><img src=\"/images/mindMap/mysql_optimal.png\" alt=\"mysql优化\"></p>\n"},{"layout":"post","title":"游戏限时抽奖策略","published":1,"_content":"\n前言\n====\n> 游戏抽奖几乎成了现在卡牌类游戏的标准配置，单抽，十连抽，限时抽...。合理的游戏抽奖算法，将会提高玩家的游戏体\n验，影响游戏的主要收入。单抽和十连抽大部分游戏都差不多，这篇文章主要讲一下限时抽奖，因为单抽和十连抽主要集中在\n开服前期，给点保底奖励就行了，一般也不会在这个上搞活动。限时抽则是游戏运营一段时间后出现，长期的收入要靠他。活\n动花样多。\n\n---\n\n实现目标\n====\n游戏出新英雄了，做一个限时卡活动，希望玩家平均20次能抽到一张整卡。    \n**需求**    \n1. 平均二十次抽到一张整卡\n\n---\n\n平均方法\n====\n一次抽中的概率为0.04，每次都进行随机。我们来画一下玩家第一次抽到整卡时抽奖次数的分布    \n公式：```P(k)=0.96^(k-1)*0.04```，其中k为第一次抽到整卡的抽奖次数\n![平均随机抽奖](/images/math/avg.png)    \n从图表上可以看出来，大部分玩家第一次抽中整卡是在第一次的时候，而小部分玩家抽了50次还没中(抽50次基本都是大R，这\n时有很大概率反馈说遇到BUG。这显然不是我们想要的结果\n\n---\n\n正态分布随机数\n====\n虽然需求是平均20次抽到一个整卡， 上面的方法满足了需求，但暴露出来两个问题。    \n\n1. 第一次就抽中整卡的玩家最多(就靠这个赚钱了，怎么可以那么轻松拿到)\n2. 50次抽中以后的玩家还有很多(这是一个BUG)\n\n所以更改需求为：\n  \n1. 平均二十次抽到一张整卡。\n2. 大部分玩家是在抽二十次左右第一次抽到整卡。\n3. 抽到整卡时，避免抽卡次数过多或者过少。\n\n**如果玩家每次抽奖都独立，那么就无法避免抽很多次也抽不到整卡的情况**。所以，在玩家开始抽奖前，先随机一个整数\nn，玩家会在第n次抽奖时抽到整卡。这个n符合上面的需求。```没想出来怎么过度到正态分布，反正用正态分布就可以```。\n现在只要保证大量生成的随机数n符合正态分布，那么基本满足需求。\n\n> 生成符合正态分布随机数，这里是传送门:[知乎](http://www.zhihu.com/question/29971598),\n[Wiki](https://en.wikipedia.org/wiki/Box%E2%80%93Muller_transform)\n\nLua实现的代码\n\n{% codeblock lua %}\n-- @author isghost\n-- @date 2016/3/25\n-- @param mu 期望值\n-- @param sigma 标准差\n-- @description 通过Box–Muller方法生成符合正态分布的随机数\nfunction generateGaussianNoise(mu,sigma)\n    -- u1,u2 > (0,1]\n    local u1,u2\n    repeat\n        u1 = math.random()\n        u2 = math.random()\n    until(u1 > 1e-200)\n    local z0 = math.sqrt(-2.0 * math.log(u1)) * math.cos(2 * math.pi * u2)\n    return z0 * sigma + mu\nend\n{% endcodeblock %}\n\n测试用例\n\n{% codeblock lua %}\n-- 期望值 20，标准差 5\nfor i=1,10000 do\n    local tmp = generateGaussianNoise(20,5)\n    print(tmp - tmp%1)\nend\n{% endcodeblock %}\n\n将这些数绘制成图表\n\n![平均随机抽奖](/images/math/normaldis.png)    \n\n生成的随机数符合正态分布后，对两个极端进行删除(比如小于1和大于50的数)\n\n就是这样。","source":"_posts/2016-03-23-luckydraw.markdown","raw":"---\nlayout: post\ntitle: 游戏限时抽奖策略\npublished: true\ncategories: math\ntags: normal distribution\n---\n\n前言\n====\n> 游戏抽奖几乎成了现在卡牌类游戏的标准配置，单抽，十连抽，限时抽...。合理的游戏抽奖算法，将会提高玩家的游戏体\n验，影响游戏的主要收入。单抽和十连抽大部分游戏都差不多，这篇文章主要讲一下限时抽奖，因为单抽和十连抽主要集中在\n开服前期，给点保底奖励就行了，一般也不会在这个上搞活动。限时抽则是游戏运营一段时间后出现，长期的收入要靠他。活\n动花样多。\n\n---\n\n实现目标\n====\n游戏出新英雄了，做一个限时卡活动，希望玩家平均20次能抽到一张整卡。    \n**需求**    \n1. 平均二十次抽到一张整卡\n\n---\n\n平均方法\n====\n一次抽中的概率为0.04，每次都进行随机。我们来画一下玩家第一次抽到整卡时抽奖次数的分布    \n公式：```P(k)=0.96^(k-1)*0.04```，其中k为第一次抽到整卡的抽奖次数\n![平均随机抽奖](/images/math/avg.png)    \n从图表上可以看出来，大部分玩家第一次抽中整卡是在第一次的时候，而小部分玩家抽了50次还没中(抽50次基本都是大R，这\n时有很大概率反馈说遇到BUG。这显然不是我们想要的结果\n\n---\n\n正态分布随机数\n====\n虽然需求是平均20次抽到一个整卡， 上面的方法满足了需求，但暴露出来两个问题。    \n\n1. 第一次就抽中整卡的玩家最多(就靠这个赚钱了，怎么可以那么轻松拿到)\n2. 50次抽中以后的玩家还有很多(这是一个BUG)\n\n所以更改需求为：\n  \n1. 平均二十次抽到一张整卡。\n2. 大部分玩家是在抽二十次左右第一次抽到整卡。\n3. 抽到整卡时，避免抽卡次数过多或者过少。\n\n**如果玩家每次抽奖都独立，那么就无法避免抽很多次也抽不到整卡的情况**。所以，在玩家开始抽奖前，先随机一个整数\nn，玩家会在第n次抽奖时抽到整卡。这个n符合上面的需求。```没想出来怎么过度到正态分布，反正用正态分布就可以```。\n现在只要保证大量生成的随机数n符合正态分布，那么基本满足需求。\n\n> 生成符合正态分布随机数，这里是传送门:[知乎](http://www.zhihu.com/question/29971598),\n[Wiki](https://en.wikipedia.org/wiki/Box%E2%80%93Muller_transform)\n\nLua实现的代码\n\n{% codeblock lua %}\n-- @author isghost\n-- @date 2016/3/25\n-- @param mu 期望值\n-- @param sigma 标准差\n-- @description 通过Box–Muller方法生成符合正态分布的随机数\nfunction generateGaussianNoise(mu,sigma)\n    -- u1,u2 > (0,1]\n    local u1,u2\n    repeat\n        u1 = math.random()\n        u2 = math.random()\n    until(u1 > 1e-200)\n    local z0 = math.sqrt(-2.0 * math.log(u1)) * math.cos(2 * math.pi * u2)\n    return z0 * sigma + mu\nend\n{% endcodeblock %}\n\n测试用例\n\n{% codeblock lua %}\n-- 期望值 20，标准差 5\nfor i=1,10000 do\n    local tmp = generateGaussianNoise(20,5)\n    print(tmp - tmp%1)\nend\n{% endcodeblock %}\n\n将这些数绘制成图表\n\n![平均随机抽奖](/images/math/normaldis.png)    \n\n生成的随机数符合正态分布后，对两个极端进行删除(比如小于1和大于50的数)\n\n就是这样。","slug":"2016-03-23-luckydraw","date":"2018-12-24T11:17:03.373Z","updated":"2018-12-24T11:56:32.698Z","_id":"cjq0w6f0j000832920rbn31z6","comments":1,"photos":[],"link":"","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote>\n<p>游戏抽奖几乎成了现在卡牌类游戏的标准配置，单抽，十连抽，限时抽…。合理的游戏抽奖算法，将会提高玩家的游戏体<br>验，影响游戏的主要收入。单抽和十连抽大部分游戏都差不多，这篇文章主要讲一下限时抽奖，因为单抽和十连抽主要集中在<br>开服前期，给点保底奖励就行了，一般也不会在这个上搞活动。限时抽则是游戏运营一段时间后出现，长期的收入要靠他。活<br>动花样多。</p>\n</blockquote>\n<hr>\n<h1 id=\"实现目标\"><a href=\"#实现目标\" class=\"headerlink\" title=\"实现目标\"></a>实现目标</h1><p>游戏出新英雄了，做一个限时卡活动，希望玩家平均20次能抽到一张整卡。<br><strong>需求</strong>    </p>\n<ol>\n<li>平均二十次抽到一张整卡</li>\n</ol>\n<hr>\n<h1 id=\"平均方法\"><a href=\"#平均方法\" class=\"headerlink\" title=\"平均方法\"></a>平均方法</h1><p>一次抽中的概率为0.04，每次都进行随机。我们来画一下玩家第一次抽到整卡时抽奖次数的分布<br>公式：<code>P(k)=0.96^(k-1)*0.04</code>，其中k为第一次抽到整卡的抽奖次数<br><img src=\"/images/math/avg.png\" alt=\"平均随机抽奖\"><br>从图表上可以看出来，大部分玩家第一次抽中整卡是在第一次的时候，而小部分玩家抽了50次还没中(抽50次基本都是大R，这<br>时有很大概率反馈说遇到BUG。这显然不是我们想要的结果</p>\n<hr>\n<h1 id=\"正态分布随机数\"><a href=\"#正态分布随机数\" class=\"headerlink\" title=\"正态分布随机数\"></a>正态分布随机数</h1><p>虽然需求是平均20次抽到一个整卡， 上面的方法满足了需求，但暴露出来两个问题。    </p>\n<ol>\n<li>第一次就抽中整卡的玩家最多(就靠这个赚钱了，怎么可以那么轻松拿到)</li>\n<li>50次抽中以后的玩家还有很多(这是一个BUG)</li>\n</ol>\n<p>所以更改需求为：</p>\n<ol>\n<li>平均二十次抽到一张整卡。</li>\n<li>大部分玩家是在抽二十次左右第一次抽到整卡。</li>\n<li>抽到整卡时，避免抽卡次数过多或者过少。</li>\n</ol>\n<p><strong>如果玩家每次抽奖都独立，那么就无法避免抽很多次也抽不到整卡的情况</strong>。所以，在玩家开始抽奖前，先随机一个整数<br>n，玩家会在第n次抽奖时抽到整卡。这个n符合上面的需求。<code>没想出来怎么过度到正态分布，反正用正态分布就可以</code>。<br>现在只要保证大量生成的随机数n符合正态分布，那么基本满足需求。</p>\n<blockquote>\n<p>生成符合正态分布随机数，这里是传送门:<a href=\"http://www.zhihu.com/question/29971598\" target=\"_blank\" rel=\"noopener\">知乎</a>,<br><a href=\"https://en.wikipedia.org/wiki/Box%E2%80%93Muller_transform\" target=\"_blank\" rel=\"noopener\">Wiki</a></p>\n</blockquote>\n<p>Lua实现的代码</p>\n<figure class=\"highlight lua\"><figcaption><span>lua</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- @author isghost</span></span><br><span class=\"line\"><span class=\"comment\">-- @date 2016/3/25</span></span><br><span class=\"line\"><span class=\"comment\">-- @param mu 期望值</span></span><br><span class=\"line\"><span class=\"comment\">-- @param sigma 标准差</span></span><br><span class=\"line\"><span class=\"comment\">-- @description 通过Box–Muller方法生成符合正态分布的随机数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">generateGaussianNoise</span><span class=\"params\">(mu,sigma)</span></span></span><br><span class=\"line\">    <span class=\"comment\">-- u1,u2 &gt; (0,1]</span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> u1,u2</span><br><span class=\"line\">    <span class=\"keyword\">repeat</span></span><br><span class=\"line\">        u1 = <span class=\"built_in\">math</span>.<span class=\"built_in\">random</span>()</span><br><span class=\"line\">        u2 = <span class=\"built_in\">math</span>.<span class=\"built_in\">random</span>()</span><br><span class=\"line\">    <span class=\"keyword\">until</span>(u1 &gt; <span class=\"number\">1e-200</span>)</span><br><span class=\"line\">    <span class=\"keyword\">local</span> z0 = <span class=\"built_in\">math</span>.<span class=\"built_in\">sqrt</span>(<span class=\"number\">-2.0</span> * <span class=\"built_in\">math</span>.<span class=\"built_in\">log</span>(u1)) * <span class=\"built_in\">math</span>.<span class=\"built_in\">cos</span>(<span class=\"number\">2</span> * <span class=\"built_in\">math</span>.<span class=\"built_in\">pi</span> * u2)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> z0 * sigma + mu</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>测试用例</p>\n<figure class=\"highlight lsl\"><figcaption><span>lua</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 期望值 <span class=\"number\">20</span>，标准差 <span class=\"number\">5</span></span><br><span class=\"line\">for i=<span class=\"number\">1</span>,<span class=\"number\">10000</span> do</span><br><span class=\"line\">    local tmp = generateGaussianNoise(<span class=\"number\">20</span>,<span class=\"number\">5</span>)</span><br><span class=\"line\">    print(tmp - tmp%<span class=\"number\">1</span>)</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<p>将这些数绘制成图表</p>\n<p><img src=\"/images/math/normaldis.png\" alt=\"平均随机抽奖\">    </p>\n<p>生成的随机数符合正态分布后，对两个极端进行删除(比如小于1和大于50的数)</p>\n<p>就是这样。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote>\n<p>游戏抽奖几乎成了现在卡牌类游戏的标准配置，单抽，十连抽，限时抽…。合理的游戏抽奖算法，将会提高玩家的游戏体<br>验，影响游戏的主要收入。单抽和十连抽大部分游戏都差不多，这篇文章主要讲一下限时抽奖，因为单抽和十连抽主要集中在<br>开服前期，给点保底奖励就行了，一般也不会在这个上搞活动。限时抽则是游戏运营一段时间后出现，长期的收入要靠他。活<br>动花样多。</p>\n</blockquote>\n<hr>\n<h1 id=\"实现目标\"><a href=\"#实现目标\" class=\"headerlink\" title=\"实现目标\"></a>实现目标</h1><p>游戏出新英雄了，做一个限时卡活动，希望玩家平均20次能抽到一张整卡。<br><strong>需求</strong>    </p>\n<ol>\n<li>平均二十次抽到一张整卡</li>\n</ol>\n<hr>\n<h1 id=\"平均方法\"><a href=\"#平均方法\" class=\"headerlink\" title=\"平均方法\"></a>平均方法</h1><p>一次抽中的概率为0.04，每次都进行随机。我们来画一下玩家第一次抽到整卡时抽奖次数的分布<br>公式：<code>P(k)=0.96^(k-1)*0.04</code>，其中k为第一次抽到整卡的抽奖次数<br><img src=\"/images/math/avg.png\" alt=\"平均随机抽奖\"><br>从图表上可以看出来，大部分玩家第一次抽中整卡是在第一次的时候，而小部分玩家抽了50次还没中(抽50次基本都是大R，这<br>时有很大概率反馈说遇到BUG。这显然不是我们想要的结果</p>\n<hr>\n<h1 id=\"正态分布随机数\"><a href=\"#正态分布随机数\" class=\"headerlink\" title=\"正态分布随机数\"></a>正态分布随机数</h1><p>虽然需求是平均20次抽到一个整卡， 上面的方法满足了需求，但暴露出来两个问题。    </p>\n<ol>\n<li>第一次就抽中整卡的玩家最多(就靠这个赚钱了，怎么可以那么轻松拿到)</li>\n<li>50次抽中以后的玩家还有很多(这是一个BUG)</li>\n</ol>\n<p>所以更改需求为：</p>\n<ol>\n<li>平均二十次抽到一张整卡。</li>\n<li>大部分玩家是在抽二十次左右第一次抽到整卡。</li>\n<li>抽到整卡时，避免抽卡次数过多或者过少。</li>\n</ol>\n<p><strong>如果玩家每次抽奖都独立，那么就无法避免抽很多次也抽不到整卡的情况</strong>。所以，在玩家开始抽奖前，先随机一个整数<br>n，玩家会在第n次抽奖时抽到整卡。这个n符合上面的需求。<code>没想出来怎么过度到正态分布，反正用正态分布就可以</code>。<br>现在只要保证大量生成的随机数n符合正态分布，那么基本满足需求。</p>\n<blockquote>\n<p>生成符合正态分布随机数，这里是传送门:<a href=\"http://www.zhihu.com/question/29971598\" target=\"_blank\" rel=\"noopener\">知乎</a>,<br><a href=\"https://en.wikipedia.org/wiki/Box%E2%80%93Muller_transform\" target=\"_blank\" rel=\"noopener\">Wiki</a></p>\n</blockquote>\n<p>Lua实现的代码</p>\n<figure class=\"highlight lua\"><figcaption><span>lua</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- @author isghost</span></span><br><span class=\"line\"><span class=\"comment\">-- @date 2016/3/25</span></span><br><span class=\"line\"><span class=\"comment\">-- @param mu 期望值</span></span><br><span class=\"line\"><span class=\"comment\">-- @param sigma 标准差</span></span><br><span class=\"line\"><span class=\"comment\">-- @description 通过Box–Muller方法生成符合正态分布的随机数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">generateGaussianNoise</span><span class=\"params\">(mu,sigma)</span></span></span><br><span class=\"line\">    <span class=\"comment\">-- u1,u2 &gt; (0,1]</span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> u1,u2</span><br><span class=\"line\">    <span class=\"keyword\">repeat</span></span><br><span class=\"line\">        u1 = <span class=\"built_in\">math</span>.<span class=\"built_in\">random</span>()</span><br><span class=\"line\">        u2 = <span class=\"built_in\">math</span>.<span class=\"built_in\">random</span>()</span><br><span class=\"line\">    <span class=\"keyword\">until</span>(u1 &gt; <span class=\"number\">1e-200</span>)</span><br><span class=\"line\">    <span class=\"keyword\">local</span> z0 = <span class=\"built_in\">math</span>.<span class=\"built_in\">sqrt</span>(<span class=\"number\">-2.0</span> * <span class=\"built_in\">math</span>.<span class=\"built_in\">log</span>(u1)) * <span class=\"built_in\">math</span>.<span class=\"built_in\">cos</span>(<span class=\"number\">2</span> * <span class=\"built_in\">math</span>.<span class=\"built_in\">pi</span> * u2)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> z0 * sigma + mu</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>测试用例</p>\n<figure class=\"highlight lsl\"><figcaption><span>lua</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 期望值 <span class=\"number\">20</span>，标准差 <span class=\"number\">5</span></span><br><span class=\"line\">for i=<span class=\"number\">1</span>,<span class=\"number\">10000</span> do</span><br><span class=\"line\">    local tmp = generateGaussianNoise(<span class=\"number\">20</span>,<span class=\"number\">5</span>)</span><br><span class=\"line\">    print(tmp - tmp%<span class=\"number\">1</span>)</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<p>将这些数绘制成图表</p>\n<p><img src=\"/images/math/normaldis.png\" alt=\"平均随机抽奖\">    </p>\n<p>生成的随机数符合正态分布后，对两个极端进行删除(比如小于1和大于50的数)</p>\n<p>就是这样。</p>\n"},{"layout":"post","title":"游戏音效获取方法","published":1,"_content":"\n前言\n===\n简单的说，讲述拿别人音效的方法\n\nFSB格式\n===\n需要工具：FsbExtractor，[百度网盘下载地址](http://pan.baidu.com/s/1kVcslW7)\n使用方法\n\n![gif教程](/images/musicextract/fsbextract.gif)\n\n例子：[天天爱消除音效下载](http://pan.baidu.com/s/1kVcslW7)","source":"_posts/2016-04-25-getgamemusic.markdown","raw":"---\nlayout: post\ntitle: 游戏音效获取方法\npublished: true\ncategories: game music\ntags: music\n---\n\n前言\n===\n简单的说，讲述拿别人音效的方法\n\nFSB格式\n===\n需要工具：FsbExtractor，[百度网盘下载地址](http://pan.baidu.com/s/1kVcslW7)\n使用方法\n\n![gif教程](/images/musicextract/fsbextract.gif)\n\n例子：[天天爱消除音效下载](http://pan.baidu.com/s/1kVcslW7)","slug":"2016-04-25-getgamemusic","date":"2018-12-24T11:17:03.385Z","updated":"2018-12-24T12:02:34.715Z","_id":"cjq0w6f0m00093292wl4yfl3q","comments":1,"photos":[],"link":"","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>简单的说，讲述拿别人音效的方法</p>\n<h1 id=\"FSB格式\"><a href=\"#FSB格式\" class=\"headerlink\" title=\"FSB格式\"></a>FSB格式</h1><p>需要工具：FsbExtractor，<a href=\"http://pan.baidu.com/s/1kVcslW7\" target=\"_blank\" rel=\"noopener\">百度网盘下载地址</a><br>使用方法</p>\n<p><img src=\"/images/musicextract/fsbextract.gif\" alt=\"gif教程\"></p>\n<p>例子：<a href=\"http://pan.baidu.com/s/1kVcslW7\" target=\"_blank\" rel=\"noopener\">天天爱消除音效下载</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>简单的说，讲述拿别人音效的方法</p>\n<h1 id=\"FSB格式\"><a href=\"#FSB格式\" class=\"headerlink\" title=\"FSB格式\"></a>FSB格式</h1><p>需要工具：FsbExtractor，<a href=\"http://pan.baidu.com/s/1kVcslW7\" target=\"_blank\" rel=\"noopener\">百度网盘下载地址</a><br>使用方法</p>\n<p><img src=\"/images/musicextract/fsbextract.gif\" alt=\"gif教程\"></p>\n<p>例子：<a href=\"http://pan.baidu.com/s/1kVcslW7\" target=\"_blank\" rel=\"noopener\">天天爱消除音效下载</a></p>\n"},{"layout":"post","title":"python编码解析","published":1,"_content":"\n基本概念\n===========\n文件常用编码`utf-8`,`gbk`。\n\npython里的编码\n===========\npython存在三种编码`utf-8`,`gbk`,`unicode`\npython读取文件，文件是什么编码，得到的就是什么编码\n\n编码转换\n========\n`str.decode(coding=\"utf8\")`函数，decode之后得到的是unicode编码。`utf8`或`gbk` ==> `unicode`\n\n`str.encode(coding=\"utf8\")`函数，encode之后得到的是参数类型的编码。 `unicode` ==> `utf8`或`gbk`\n\n无法直接`utf8 <==> gbk`\n\n文件读取\n=========\n\n\n{% codeblock python %}\n# 读取GBK编码的文件，文件内容为 你好\nf = open(\"hello.txt\",\"rb\")\ngbkHello = f.readline()# gbk\nunicodeHello = gbkHello.decode(\"gbk\")# unicode\nutf8Hello = gbkHello.decode(\"gbk\").encode(\"utf-8\") # utf8\nf1 = open(\"world1.txt\",\"wb\")\nf2 = open(\"world2.txt\",\"wb\")\nf3 = open(\"world3.txt\",\"wb\")\nf1.write(gbkHello)\nf1.close()\nf3.write(utf8Hello)\nf3.close()\n# 会报错,unicode算是python内置编码，文件是没有unicode编码，所以报错\n# UnicodeEncodeError: 'ascii' codec can't encode characters in position 7-8: ordinal not in range(128)\n# f2.write(unicodeHello)\n# f2.close()\n{% endcodeblock %}\n\n`str函数`\n===============\n这个函数是个巨坑。python的编码应该是比较简单，即使什么都不懂，瞎转一般也能转出个结果。但是，如果将一\n个对象用str函数进行，这时你会发现，不管用什么编码转，都得不到正确结果，只能看到\\u123或者\\x123之类的。\n\n问题原因\n------------\n\n{% codeblock python %}\nd = {\"hello\":\"你好\"}\nprint(str(d))\n{% endcodeblock %}\n\n上面代码显示的结果是 `\"{'hello': '\\\\xc4\\\\xe3\\\\xba\\\\xc3'}\"`，第一反应，*中文显示不出来*。陷阱就是在这\n里，这个时候已经*不存在中文*，*不存在除ascii以外的字符*。str会将非ascii字符转化为它的书写形式(表示不\n太准确)。\n\n解决\n----------\npython提供了`str.decode(\"unicode_escape\")`这个解码方式。如果原来对象中存在gbk编码的字符串，先将其转换\n为unicode编码，再`str(d).decode(\"unicode_escape\")`就能得到正常的字符串。\n\n还有一个小问题，字符串的前面会有一个u字符，不利于数据的保存。str函数可以修改为json.dumps(d)。这个函数\n会去掉字符u，其它一样。\n\n{% codeblock python %}\nd = {\"hello\":u\"你好\"}\n#d = {\"hello\":\"你好\".decode(\"gbk\")}\nprint(json.dumps(d).decode(\"unicode_escape\"))\n{% endcodeblock %}\n\n总结 \n===============\n先将对象的字符串全部修改为unicode==>再json.dumps(obj)==>str.decode(\"unicode_escape\") ==> str.encode(\"utf8\")\n保存\n","source":"_posts/2016-10-16-pythoncoding.markdown","raw":"---\nlayout: post\ntitle: python编码解析\npublished: true\ncategories:\ntags:\n---\n\n基本概念\n===========\n文件常用编码`utf-8`,`gbk`。\n\npython里的编码\n===========\npython存在三种编码`utf-8`,`gbk`,`unicode`\npython读取文件，文件是什么编码，得到的就是什么编码\n\n编码转换\n========\n`str.decode(coding=\"utf8\")`函数，decode之后得到的是unicode编码。`utf8`或`gbk` ==> `unicode`\n\n`str.encode(coding=\"utf8\")`函数，encode之后得到的是参数类型的编码。 `unicode` ==> `utf8`或`gbk`\n\n无法直接`utf8 <==> gbk`\n\n文件读取\n=========\n\n\n{% codeblock python %}\n# 读取GBK编码的文件，文件内容为 你好\nf = open(\"hello.txt\",\"rb\")\ngbkHello = f.readline()# gbk\nunicodeHello = gbkHello.decode(\"gbk\")# unicode\nutf8Hello = gbkHello.decode(\"gbk\").encode(\"utf-8\") # utf8\nf1 = open(\"world1.txt\",\"wb\")\nf2 = open(\"world2.txt\",\"wb\")\nf3 = open(\"world3.txt\",\"wb\")\nf1.write(gbkHello)\nf1.close()\nf3.write(utf8Hello)\nf3.close()\n# 会报错,unicode算是python内置编码，文件是没有unicode编码，所以报错\n# UnicodeEncodeError: 'ascii' codec can't encode characters in position 7-8: ordinal not in range(128)\n# f2.write(unicodeHello)\n# f2.close()\n{% endcodeblock %}\n\n`str函数`\n===============\n这个函数是个巨坑。python的编码应该是比较简单，即使什么都不懂，瞎转一般也能转出个结果。但是，如果将一\n个对象用str函数进行，这时你会发现，不管用什么编码转，都得不到正确结果，只能看到\\u123或者\\x123之类的。\n\n问题原因\n------------\n\n{% codeblock python %}\nd = {\"hello\":\"你好\"}\nprint(str(d))\n{% endcodeblock %}\n\n上面代码显示的结果是 `\"{'hello': '\\\\xc4\\\\xe3\\\\xba\\\\xc3'}\"`，第一反应，*中文显示不出来*。陷阱就是在这\n里，这个时候已经*不存在中文*，*不存在除ascii以外的字符*。str会将非ascii字符转化为它的书写形式(表示不\n太准确)。\n\n解决\n----------\npython提供了`str.decode(\"unicode_escape\")`这个解码方式。如果原来对象中存在gbk编码的字符串，先将其转换\n为unicode编码，再`str(d).decode(\"unicode_escape\")`就能得到正常的字符串。\n\n还有一个小问题，字符串的前面会有一个u字符，不利于数据的保存。str函数可以修改为json.dumps(d)。这个函数\n会去掉字符u，其它一样。\n\n{% codeblock python %}\nd = {\"hello\":u\"你好\"}\n#d = {\"hello\":\"你好\".decode(\"gbk\")}\nprint(json.dumps(d).decode(\"unicode_escape\"))\n{% endcodeblock %}\n\n总结 \n===============\n先将对象的字符串全部修改为unicode==>再json.dumps(obj)==>str.decode(\"unicode_escape\") ==> str.encode(\"utf8\")\n保存\n","slug":"2016-10-16-pythoncoding","date":"2018-11-05T06:35:56.148Z","updated":"2018-12-24T12:02:34.717Z","_id":"cjq0w6f0p000d3292k6m9vulh","comments":1,"photos":[],"link":"","content":"<h1 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h1><p>文件常用编码<code>utf-8</code>,<code>gbk</code>。</p>\n<h1 id=\"python里的编码\"><a href=\"#python里的编码\" class=\"headerlink\" title=\"python里的编码\"></a>python里的编码</h1><p>python存在三种编码<code>utf-8</code>,<code>gbk</code>,<code>unicode</code><br>python读取文件，文件是什么编码，得到的就是什么编码</p>\n<h1 id=\"编码转换\"><a href=\"#编码转换\" class=\"headerlink\" title=\"编码转换\"></a>编码转换</h1><p><code>str.decode(coding=&quot;utf8&quot;)</code>函数，decode之后得到的是unicode编码。<code>utf8</code>或<code>gbk</code> ==&gt; <code>unicode</code></p>\n<p><code>str.encode(coding=&quot;utf8&quot;)</code>函数，encode之后得到的是参数类型的编码。 <code>unicode</code> ==&gt; <code>utf8</code>或<code>gbk</code></p>\n<p>无法直接<code>utf8 &lt;==&gt; gbk</code></p>\n<h1 id=\"文件读取\"><a href=\"#文件读取\" class=\"headerlink\" title=\"文件读取\"></a>文件读取</h1><figure class=\"highlight plain\"><figcaption><span>python</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 读取GBK编码的文件，文件内容为 你好</span><br><span class=\"line\">f = open(&quot;hello.txt&quot;,&quot;rb&quot;)</span><br><span class=\"line\">gbkHello = f.readline()# gbk</span><br><span class=\"line\">unicodeHello = gbkHello.decode(&quot;gbk&quot;)# unicode</span><br><span class=\"line\">utf8Hello = gbkHello.decode(&quot;gbk&quot;).encode(&quot;utf-8&quot;) # utf8</span><br><span class=\"line\">f1 = open(&quot;world1.txt&quot;,&quot;wb&quot;)</span><br><span class=\"line\">f2 = open(&quot;world2.txt&quot;,&quot;wb&quot;)</span><br><span class=\"line\">f3 = open(&quot;world3.txt&quot;,&quot;wb&quot;)</span><br><span class=\"line\">f1.write(gbkHello)</span><br><span class=\"line\">f1.close()</span><br><span class=\"line\">f3.write(utf8Hello)</span><br><span class=\"line\">f3.close()</span><br><span class=\"line\"># 会报错,unicode算是python内置编码，文件是没有unicode编码，所以报错</span><br><span class=\"line\"># UnicodeEncodeError: &apos;ascii&apos; codec can&apos;t encode characters in position 7-8: ordinal not in range(128)</span><br><span class=\"line\"># f2.write(unicodeHello)</span><br><span class=\"line\"># f2.close()</span><br></pre></td></tr></table></figure>\n<h1 id=\"str函数\"><a href=\"#str函数\" class=\"headerlink\" title=\"str函数\"></a><code>str函数</code></h1><p>这个函数是个巨坑。python的编码应该是比较简单，即使什么都不懂，瞎转一般也能转出个结果。但是，如果将一<br>个对象用str函数进行，这时你会发现，不管用什么编码转，都得不到正确结果，只能看到\\u123或者\\x123之类的。</p>\n<h2 id=\"问题原因\"><a href=\"#问题原因\" class=\"headerlink\" title=\"问题原因\"></a>问题原因</h2><figure class=\"highlight plain\"><figcaption><span>python</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d = &#123;&quot;hello&quot;:&quot;你好&quot;&#125;</span><br><span class=\"line\">print(str(d))</span><br></pre></td></tr></table></figure>\n<p>上面代码显示的结果是 <code>&quot;{&#39;hello&#39;: &#39;\\\\xc4\\\\xe3\\\\xba\\\\xc3&#39;}&quot;</code>，第一反应，<em>中文显示不出来</em>。陷阱就是在这<br>里，这个时候已经<em>不存在中文</em>，<em>不存在除ascii以外的字符</em>。str会将非ascii字符转化为它的书写形式(表示不<br>太准确)。</p>\n<h2 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h2><p>python提供了<code>str.decode(&quot;unicode_escape&quot;)</code>这个解码方式。如果原来对象中存在gbk编码的字符串，先将其转换<br>为unicode编码，再<code>str(d).decode(&quot;unicode_escape&quot;)</code>就能得到正常的字符串。</p>\n<p>还有一个小问题，字符串的前面会有一个u字符，不利于数据的保存。str函数可以修改为json.dumps(d)。这个函数<br>会去掉字符u，其它一样。</p>\n<figure class=\"highlight plain\"><figcaption><span>python</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d = &#123;&quot;hello&quot;:u&quot;你好&quot;&#125;</span><br><span class=\"line\">#d = &#123;&quot;hello&quot;:&quot;你好&quot;.decode(&quot;gbk&quot;)&#125;</span><br><span class=\"line\">print(json.dumps(d).decode(&quot;unicode_escape&quot;))</span><br></pre></td></tr></table></figure>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结 \"></a>总结 </h1><p>先将对象的字符串全部修改为unicode==&gt;再json.dumps(obj)==&gt;str.decode(“unicode_escape”) ==&gt; str.encode(“utf8”)<br>保存</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h1><p>文件常用编码<code>utf-8</code>,<code>gbk</code>。</p>\n<h1 id=\"python里的编码\"><a href=\"#python里的编码\" class=\"headerlink\" title=\"python里的编码\"></a>python里的编码</h1><p>python存在三种编码<code>utf-8</code>,<code>gbk</code>,<code>unicode</code><br>python读取文件，文件是什么编码，得到的就是什么编码</p>\n<h1 id=\"编码转换\"><a href=\"#编码转换\" class=\"headerlink\" title=\"编码转换\"></a>编码转换</h1><p><code>str.decode(coding=&quot;utf8&quot;)</code>函数，decode之后得到的是unicode编码。<code>utf8</code>或<code>gbk</code> ==&gt; <code>unicode</code></p>\n<p><code>str.encode(coding=&quot;utf8&quot;)</code>函数，encode之后得到的是参数类型的编码。 <code>unicode</code> ==&gt; <code>utf8</code>或<code>gbk</code></p>\n<p>无法直接<code>utf8 &lt;==&gt; gbk</code></p>\n<h1 id=\"文件读取\"><a href=\"#文件读取\" class=\"headerlink\" title=\"文件读取\"></a>文件读取</h1><figure class=\"highlight plain\"><figcaption><span>python</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 读取GBK编码的文件，文件内容为 你好</span><br><span class=\"line\">f = open(&quot;hello.txt&quot;,&quot;rb&quot;)</span><br><span class=\"line\">gbkHello = f.readline()# gbk</span><br><span class=\"line\">unicodeHello = gbkHello.decode(&quot;gbk&quot;)# unicode</span><br><span class=\"line\">utf8Hello = gbkHello.decode(&quot;gbk&quot;).encode(&quot;utf-8&quot;) # utf8</span><br><span class=\"line\">f1 = open(&quot;world1.txt&quot;,&quot;wb&quot;)</span><br><span class=\"line\">f2 = open(&quot;world2.txt&quot;,&quot;wb&quot;)</span><br><span class=\"line\">f3 = open(&quot;world3.txt&quot;,&quot;wb&quot;)</span><br><span class=\"line\">f1.write(gbkHello)</span><br><span class=\"line\">f1.close()</span><br><span class=\"line\">f3.write(utf8Hello)</span><br><span class=\"line\">f3.close()</span><br><span class=\"line\"># 会报错,unicode算是python内置编码，文件是没有unicode编码，所以报错</span><br><span class=\"line\"># UnicodeEncodeError: &apos;ascii&apos; codec can&apos;t encode characters in position 7-8: ordinal not in range(128)</span><br><span class=\"line\"># f2.write(unicodeHello)</span><br><span class=\"line\"># f2.close()</span><br></pre></td></tr></table></figure>\n<h1 id=\"str函数\"><a href=\"#str函数\" class=\"headerlink\" title=\"str函数\"></a><code>str函数</code></h1><p>这个函数是个巨坑。python的编码应该是比较简单，即使什么都不懂，瞎转一般也能转出个结果。但是，如果将一<br>个对象用str函数进行，这时你会发现，不管用什么编码转，都得不到正确结果，只能看到\\u123或者\\x123之类的。</p>\n<h2 id=\"问题原因\"><a href=\"#问题原因\" class=\"headerlink\" title=\"问题原因\"></a>问题原因</h2><figure class=\"highlight plain\"><figcaption><span>python</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d = &#123;&quot;hello&quot;:&quot;你好&quot;&#125;</span><br><span class=\"line\">print(str(d))</span><br></pre></td></tr></table></figure>\n<p>上面代码显示的结果是 <code>&quot;{&#39;hello&#39;: &#39;\\\\xc4\\\\xe3\\\\xba\\\\xc3&#39;}&quot;</code>，第一反应，<em>中文显示不出来</em>。陷阱就是在这<br>里，这个时候已经<em>不存在中文</em>，<em>不存在除ascii以外的字符</em>。str会将非ascii字符转化为它的书写形式(表示不<br>太准确)。</p>\n<h2 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h2><p>python提供了<code>str.decode(&quot;unicode_escape&quot;)</code>这个解码方式。如果原来对象中存在gbk编码的字符串，先将其转换<br>为unicode编码，再<code>str(d).decode(&quot;unicode_escape&quot;)</code>就能得到正常的字符串。</p>\n<p>还有一个小问题，字符串的前面会有一个u字符，不利于数据的保存。str函数可以修改为json.dumps(d)。这个函数<br>会去掉字符u，其它一样。</p>\n<figure class=\"highlight plain\"><figcaption><span>python</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d = &#123;&quot;hello&quot;:u&quot;你好&quot;&#125;</span><br><span class=\"line\">#d = &#123;&quot;hello&quot;:&quot;你好&quot;.decode(&quot;gbk&quot;)&#125;</span><br><span class=\"line\">print(json.dumps(d).decode(&quot;unicode_escape&quot;))</span><br></pre></td></tr></table></figure>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结 \"></a>总结 </h1><p>先将对象的字符串全部修改为unicode==&gt;再json.dumps(obj)==&gt;str.decode(“unicode_escape”) ==&gt; str.encode(“utf8”)<br>保存</p>\n"},{"layout":"post","title":"VS2015无法Attach To Unity解决方案","published":1,"_content":"\n## 问题描述\n\nUnity版本```5.2.2f1```  \nVisual Studio 2015 Tools for Unity \t版本```2.1.0.0```  \n点击Attach To Unity后，VS会弹出一个框让你选择一个Unity的Instance,结果列表为空。在VS官网，几天前也有人提到了这个问题，官方人员回复如下  \n\n\tWe'll continue offline, and will provide you a debug version to see what is the possible issue.\n\n等更新估计要一段时间。\n\n## 解决方法\n经过长时间努力和尝试，找到一个方法。如下  \n\n1. 查看Unity.exe的PID\n2. 通过PID和netstat得到Unity的调试端口号\n3. 在VS中手动输入端口进行连接\n\n每次查找端口号也是麻烦，写了一个小程序读取Unity.exe的端口，具体连接流程也写在代码里面了。\n\n获取端口的程序[点击下载](images/otherRes/GetPort.exe)\n\n## C#代码\n{% codeblock C# %}\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Diagnostics;\n\nnamespace Cdemo\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            string name=\"UNITY\";//name¾ÍÊÇ½ø³ÌµÄÃû³Æ\n            int pid=-1;\n            Process[] pp = System.Diagnostics.Process.GetProcessesByName(name); \n            for (int i = 0; i < pp.Length; i++)\n            {\n                if (pp[i].ProcessName == name)\n                {\n                    pid = pp[i].Id;//Õâ¸ö¾ÍÊÇ½ø³ÌµÄID \n                }\n            }\n            if (pid == -1)\n            {\n                Console.WriteLine(\"Î´ÕÒµ½unity.exe½ø³Ì£¬ÇëÈ·±£UnityÒÑ¾­´ò¿ª\");\n                Console.ReadLine();\n                return;\n            }\n            Console.WriteLine(\"UNITY.exe pid = \"+pid);\n\n            Process p = new Process();\n            p.StartInfo.FileName = \"cmd.exe \";\n            p.StartInfo.UseShellExecute = false;\n            p.StartInfo.RedirectStandardInput = true;\n            p.StartInfo.RedirectStandardOutput = true;\n            p.StartInfo.CreateNoWindow = true;\n            p.Start();\n            p.StandardInput.WriteLine(\"netstat -ano|findstr \" + pid);\n            p.StandardInput.WriteLine(\"exit\");\n            System.Threading.Thread.Sleep(1000);\n            string Re = p.StandardOutput.ReadToEnd();\n            p.StandardOutput.Close();\n            p.WaitForExit();\n            p.Close();\n            string targetStr = \"TCP    0.0.0.0:56\";\n            int strBegin = Re.IndexOf(targetStr);\n            string portStr = Re.Substring(strBegin + targetStr.Length-2,5);\n            Console.WriteLine(\"Unity debug port = \"+portStr);\n            Console.WriteLine(\"1. open vs 2015\");\n            Console.WriteLine(\"2. Debug -->  Attach Unity Debugger\");\n            Console.WriteLine(\"3. Input IP and Run\");\n            Console.ReadLine();\n        }\n    }\n}\n{% endcodeblock %}","source":"_posts/2016-05-21-getdebugport.markdown","raw":"---\nlayout: post\ntitle: VS2015无法Attach To Unity解决方案\npublished: true\ncategories:\ntags:\n---\n\n## 问题描述\n\nUnity版本```5.2.2f1```  \nVisual Studio 2015 Tools for Unity \t版本```2.1.0.0```  \n点击Attach To Unity后，VS会弹出一个框让你选择一个Unity的Instance,结果列表为空。在VS官网，几天前也有人提到了这个问题，官方人员回复如下  \n\n\tWe'll continue offline, and will provide you a debug version to see what is the possible issue.\n\n等更新估计要一段时间。\n\n## 解决方法\n经过长时间努力和尝试，找到一个方法。如下  \n\n1. 查看Unity.exe的PID\n2. 通过PID和netstat得到Unity的调试端口号\n3. 在VS中手动输入端口进行连接\n\n每次查找端口号也是麻烦，写了一个小程序读取Unity.exe的端口，具体连接流程也写在代码里面了。\n\n获取端口的程序[点击下载](images/otherRes/GetPort.exe)\n\n## C#代码\n{% codeblock C# %}\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Diagnostics;\n\nnamespace Cdemo\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            string name=\"UNITY\";//name¾ÍÊÇ½ø³ÌµÄÃû³Æ\n            int pid=-1;\n            Process[] pp = System.Diagnostics.Process.GetProcessesByName(name); \n            for (int i = 0; i < pp.Length; i++)\n            {\n                if (pp[i].ProcessName == name)\n                {\n                    pid = pp[i].Id;//Õâ¸ö¾ÍÊÇ½ø³ÌµÄID \n                }\n            }\n            if (pid == -1)\n            {\n                Console.WriteLine(\"Î´ÕÒµ½unity.exe½ø³Ì£¬ÇëÈ·±£UnityÒÑ¾­´ò¿ª\");\n                Console.ReadLine();\n                return;\n            }\n            Console.WriteLine(\"UNITY.exe pid = \"+pid);\n\n            Process p = new Process();\n            p.StartInfo.FileName = \"cmd.exe \";\n            p.StartInfo.UseShellExecute = false;\n            p.StartInfo.RedirectStandardInput = true;\n            p.StartInfo.RedirectStandardOutput = true;\n            p.StartInfo.CreateNoWindow = true;\n            p.Start();\n            p.StandardInput.WriteLine(\"netstat -ano|findstr \" + pid);\n            p.StandardInput.WriteLine(\"exit\");\n            System.Threading.Thread.Sleep(1000);\n            string Re = p.StandardOutput.ReadToEnd();\n            p.StandardOutput.Close();\n            p.WaitForExit();\n            p.Close();\n            string targetStr = \"TCP    0.0.0.0:56\";\n            int strBegin = Re.IndexOf(targetStr);\n            string portStr = Re.Substring(strBegin + targetStr.Length-2,5);\n            Console.WriteLine(\"Unity debug port = \"+portStr);\n            Console.WriteLine(\"1. open vs 2015\");\n            Console.WriteLine(\"2. Debug -->  Attach Unity Debugger\");\n            Console.WriteLine(\"3. Input IP and Run\");\n            Console.ReadLine();\n        }\n    }\n}\n{% endcodeblock %}","slug":"2016-05-21-getdebugport","date":"2018-11-05T06:35:56.147Z","updated":"2018-12-24T12:02:34.716Z","_id":"cjq0w6f0v000e3292okbe39r1","comments":1,"photos":[],"link":"","content":"<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>Unity版本<code>5.2.2f1</code><br>Visual Studio 2015 Tools for Unity     版本<code>2.1.0.0</code><br>点击Attach To Unity后，VS会弹出一个框让你选择一个Unity的Instance,结果列表为空。在VS官网，几天前也有人提到了这个问题，官方人员回复如下  </p>\n<pre><code>We&apos;ll continue offline, and will provide you a debug version to see what is the possible issue.\n</code></pre><p>等更新估计要一段时间。</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>经过长时间努力和尝试，找到一个方法。如下  </p>\n<ol>\n<li>查看Unity.exe的PID</li>\n<li>通过PID和netstat得到Unity的调试端口号</li>\n<li>在VS中手动输入端口进行连接</li>\n</ol>\n<p>每次查找端口号也是麻烦，写了一个小程序读取Unity.exe的端口，具体连接流程也写在代码里面了。</p>\n<p>获取端口的程序<a href=\"images/otherRes/GetPort.exe\">点击下载</a></p>\n<h2 id=\"C-代码\"><a href=\"#C-代码\" class=\"headerlink\" title=\"C#代码\"></a>C#代码</h2><figure class=\"highlight plain\"><figcaption><span>C#</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">using System;</span><br><span class=\"line\">using System.Collections.Generic;</span><br><span class=\"line\">using System.Linq;</span><br><span class=\"line\">using System.Text;</span><br><span class=\"line\">using System.Threading.Tasks;</span><br><span class=\"line\">using System.Diagnostics;</span><br><span class=\"line\"></span><br><span class=\"line\">namespace Cdemo</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    class Program</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        static void Main(string[] args)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            string name=&quot;UNITY&quot;;//name¾ÍÊÇ½ø³ÌµÄÃû³Æ</span><br><span class=\"line\">            int pid=-1;</span><br><span class=\"line\">            Process[] pp = System.Diagnostics.Process.GetProcessesByName(name); </span><br><span class=\"line\">            for (int i = 0; i &lt; pp.Length; i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                if (pp[i].ProcessName == name)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    pid = pp[i].Id;//Õâ¸ö¾ÍÊÇ½ø³ÌµÄID </span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if (pid == -1)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Console.WriteLine(&quot;Î´ÕÒµ½unity.exe½ø³Ì£¬ÇëÈ·±£UnityÒÑ¾­´ò¿ª&quot;);</span><br><span class=\"line\">                Console.ReadLine();</span><br><span class=\"line\">                return;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            Console.WriteLine(&quot;UNITY.exe pid = &quot;+pid);</span><br><span class=\"line\"></span><br><span class=\"line\">            Process p = new Process();</span><br><span class=\"line\">            p.StartInfo.FileName = &quot;cmd.exe &quot;;</span><br><span class=\"line\">            p.StartInfo.UseShellExecute = false;</span><br><span class=\"line\">            p.StartInfo.RedirectStandardInput = true;</span><br><span class=\"line\">            p.StartInfo.RedirectStandardOutput = true;</span><br><span class=\"line\">            p.StartInfo.CreateNoWindow = true;</span><br><span class=\"line\">            p.Start();</span><br><span class=\"line\">            p.StandardInput.WriteLine(&quot;netstat -ano|findstr &quot; + pid);</span><br><span class=\"line\">            p.StandardInput.WriteLine(&quot;exit&quot;);</span><br><span class=\"line\">            System.Threading.Thread.Sleep(1000);</span><br><span class=\"line\">            string Re = p.StandardOutput.ReadToEnd();</span><br><span class=\"line\">            p.StandardOutput.Close();</span><br><span class=\"line\">            p.WaitForExit();</span><br><span class=\"line\">            p.Close();</span><br><span class=\"line\">            string targetStr = &quot;TCP    0.0.0.0:56&quot;;</span><br><span class=\"line\">            int strBegin = Re.IndexOf(targetStr);</span><br><span class=\"line\">            string portStr = Re.Substring(strBegin + targetStr.Length-2,5);</span><br><span class=\"line\">            Console.WriteLine(&quot;Unity debug port = &quot;+portStr);</span><br><span class=\"line\">            Console.WriteLine(&quot;1. open vs 2015&quot;);</span><br><span class=\"line\">            Console.WriteLine(&quot;2. Debug --&gt;  Attach Unity Debugger&quot;);</span><br><span class=\"line\">            Console.WriteLine(&quot;3. Input IP and Run&quot;);</span><br><span class=\"line\">            Console.ReadLine();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>Unity版本<code>5.2.2f1</code><br>Visual Studio 2015 Tools for Unity     版本<code>2.1.0.0</code><br>点击Attach To Unity后，VS会弹出一个框让你选择一个Unity的Instance,结果列表为空。在VS官网，几天前也有人提到了这个问题，官方人员回复如下  </p>\n<pre><code>We&apos;ll continue offline, and will provide you a debug version to see what is the possible issue.\n</code></pre><p>等更新估计要一段时间。</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>经过长时间努力和尝试，找到一个方法。如下  </p>\n<ol>\n<li>查看Unity.exe的PID</li>\n<li>通过PID和netstat得到Unity的调试端口号</li>\n<li>在VS中手动输入端口进行连接</li>\n</ol>\n<p>每次查找端口号也是麻烦，写了一个小程序读取Unity.exe的端口，具体连接流程也写在代码里面了。</p>\n<p>获取端口的程序<a href=\"images/otherRes/GetPort.exe\">点击下载</a></p>\n<h2 id=\"C-代码\"><a href=\"#C-代码\" class=\"headerlink\" title=\"C#代码\"></a>C#代码</h2><figure class=\"highlight plain\"><figcaption><span>C#</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">using System;</span><br><span class=\"line\">using System.Collections.Generic;</span><br><span class=\"line\">using System.Linq;</span><br><span class=\"line\">using System.Text;</span><br><span class=\"line\">using System.Threading.Tasks;</span><br><span class=\"line\">using System.Diagnostics;</span><br><span class=\"line\"></span><br><span class=\"line\">namespace Cdemo</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    class Program</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        static void Main(string[] args)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            string name=&quot;UNITY&quot;;//name¾ÍÊÇ½ø³ÌµÄÃû³Æ</span><br><span class=\"line\">            int pid=-1;</span><br><span class=\"line\">            Process[] pp = System.Diagnostics.Process.GetProcessesByName(name); </span><br><span class=\"line\">            for (int i = 0; i &lt; pp.Length; i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                if (pp[i].ProcessName == name)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    pid = pp[i].Id;//Õâ¸ö¾ÍÊÇ½ø³ÌµÄID </span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if (pid == -1)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Console.WriteLine(&quot;Î´ÕÒµ½unity.exe½ø³Ì£¬ÇëÈ·±£UnityÒÑ¾­´ò¿ª&quot;);</span><br><span class=\"line\">                Console.ReadLine();</span><br><span class=\"line\">                return;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            Console.WriteLine(&quot;UNITY.exe pid = &quot;+pid);</span><br><span class=\"line\"></span><br><span class=\"line\">            Process p = new Process();</span><br><span class=\"line\">            p.StartInfo.FileName = &quot;cmd.exe &quot;;</span><br><span class=\"line\">            p.StartInfo.UseShellExecute = false;</span><br><span class=\"line\">            p.StartInfo.RedirectStandardInput = true;</span><br><span class=\"line\">            p.StartInfo.RedirectStandardOutput = true;</span><br><span class=\"line\">            p.StartInfo.CreateNoWindow = true;</span><br><span class=\"line\">            p.Start();</span><br><span class=\"line\">            p.StandardInput.WriteLine(&quot;netstat -ano|findstr &quot; + pid);</span><br><span class=\"line\">            p.StandardInput.WriteLine(&quot;exit&quot;);</span><br><span class=\"line\">            System.Threading.Thread.Sleep(1000);</span><br><span class=\"line\">            string Re = p.StandardOutput.ReadToEnd();</span><br><span class=\"line\">            p.StandardOutput.Close();</span><br><span class=\"line\">            p.WaitForExit();</span><br><span class=\"line\">            p.Close();</span><br><span class=\"line\">            string targetStr = &quot;TCP    0.0.0.0:56&quot;;</span><br><span class=\"line\">            int strBegin = Re.IndexOf(targetStr);</span><br><span class=\"line\">            string portStr = Re.Substring(strBegin + targetStr.Length-2,5);</span><br><span class=\"line\">            Console.WriteLine(&quot;Unity debug port = &quot;+portStr);</span><br><span class=\"line\">            Console.WriteLine(&quot;1. open vs 2015&quot;);</span><br><span class=\"line\">            Console.WriteLine(&quot;2. Debug --&gt;  Attach Unity Debugger&quot;);</span><br><span class=\"line\">            Console.WriteLine(&quot;3. Input IP and Run&quot;);</span><br><span class=\"line\">            Console.ReadLine();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"简单几何图形的碰撞检测","published":1,"_content":"\n前言\n====\n\n> 目前主流的游戏引擎cocos2dx,u3d,ue4都提供了强大的物理引擎，但功能的丰富意味着性能消耗。在实际应用中，并不需要\n那么多的功能，比如跑酷类游戏，为了用户体验，可能还需要做出一些不符合物理的情况。这篇文章记录我在游戏开发中所用\n到的碰撞方法。    \n\n准备条件\n====\n\n**实现代码**： ``Lua``      \n**坐标系**：``笛卡尔坐标系``    \n**几何数据结构：**        \n*圆形:*\n{% codeblock lua %}\n-- x,y为圆心\n-- r为半径\n{x = 1.0,y = 1.0,r = 1.0}\n{% endcodeblock %}\n*矩形：*\n{% codeblock lua %}\n-- x,y为左下角坐标\n-- width,height为宽度和长度\n{x = 1.0,y = 1.0,width = 1.0, height = 1.0}\n{% endcodeblock %}\n*旋转矩形：*\n{% codeblock lua %}\n-- x,y为左下角坐标\n-- width,height为宽度和长度\n-- angle矩形逆时针的旋转角度\n{x = 1.0,y = 1.0,width = 1.0, height = 1.0, angle = 90}\n{% endcodeblock %}\n圆与圆的碰撞\n====\n> 两圆心的距离大于半径和不相交，否则相交    \n{% codeblock lua %}\nlocal function circleIntersectsCircle(circle1,circle2)\n    return  (circle1.x - circle2.x)^2 + (circle1.y - circle2.y)^2 < (circle1.r + circle2.r)^2\nend\n{% endcodeblock %}\n![圆形X圆形](/images/math/circleXcircle.gif)    \n\n矩形与矩形\n====\n> 意会一下    \n{% codeblock lua %}\nlocal function rectIntersectsRect( rect1, rect2 )\n    local intersect = not ( rect1.x > rect2.x + rect2.width or\n        rect1.x + rect1.width < rect2.x or\n        rect1.y > rect2.y + rect2.height or\n        rect1.y + rect1.height < rect2.y)\n    return intersect\nend\n{% endcodeblock %}\n![矩形X矩形](/images/math/rectXrect.gif)    \n\n矩形与圆\n====\n> [理论基础](https://www.zhihu.com/question/24251545/answer/27184960){:target=\"_blank\"}    \n\n{% codeblock lua %}\nlocal function rectIntersectsCircle(rect,circle)\n    local v = {math.abs(circle.x - (rect.x + rect.width/2)),\n        math.abs(circle.y - (rect.y + rect.height/2)) }\n    local h = {rect.width/2,rect.height/2}\n    local u = {math.max(v[1]-h[1],0),math.max(v[2]-h[2],0)}\n    return u[1]*u[1] + u[2]*u[2] < circle.r*circle.r\nend\n{% endcodeblock %}\n![矩形X圆形](/images/math/rectXcircle.gif)    \n\n旋转矩形与圆\n====\n> 与前面相同，将圆形变化到矩形的坐标系，这里增加圆形的角度变化计算\n{% codeblock lua %}\nlocal function rectIntersectsCircle(rect,circle)\n    local srcAngle = math.rad(rect.angle)\n    local rectCenterX = rect.x + rect.width / 2 * math.cos(srcAngle) + \n                        rect.height / 2 * math.cos(srcAngle + math.pi / 2)\n    local rectCenterY = rect.y + rect.width / 2 * math.sin(srcAngle) + \n                        rect.height / 2* math.sin(srcAngle + math.pi / 2)\n    local vectorX = circle.x - rectCenterX\n    local vectorY = circle.y - rectCenterY\n    local angle = math.atan2(rectCenterY - circle.y,rectCenterX - circle.x)\n    local angle = angle - math.rad(rect.angle)\n    local len = math.sqrt(vectorX^2 + vectorY^2)\n    local v = {math.abs(len * math.cos(angle)),math.abs(len * math.sin(angle))}\n    local h = {rect.width/2,rect.height/2}\n    local u = {math.max(v[1]-h[1],0),math.max(v[2]-h[2],0)}\n    return u[1]*u[1] + u[2]*u[2] < circle.r*circle.r\nend\n{% endcodeblock %}\n![旋转矩形X圆形](/images/math/rectAngleXcircle.gif)    \n\n额外内容\n====\n\n测试代码\n----\n{% codeblock lua %}\nfunction MainScene:onCreate()\n    display.newSprite(\"MainSceneBg.jpg\")\n        :move(display.center)\n        :addTo(self)\n    self.circle1 = cc.Sprite:create(\"circle.png\")\n        :addTo(self)\n        :setPosition(cc.p(500,300))\n    self.rect2 = cc.Sprite:create(\"rect.png\")\n        :addTo(self)\n        :setPosition(cc.p(620,300))\n        :setAnchorPoint(cc.p(0,0))\n        :setRotation(-45)\n    local label = cc.Label:createWithSystemFont(\"是否碰撞: true\", \"Arial\", 48)\n        :align(display.CENTER, display.center)\n        :addTo(self)\n    local moveCallback = function(touch,event)\n        local target = event:getCurrentTarget()\n        local x,y   = target:getPosition()\n        local delta = touch:getDelta()\n        target:setPosition(x+delta.x,y+delta.y)\n        -- 旋转矩形与圆的碰撞测试\n        local x1,y1 = self.circle1:getPosition()\n        local x2,y2 = self.rect2:getPosition()\n        local circle1 = {x=x1,y=y1,r=50}\n        local rect2 = {x=x2,y=y2,width = 180, height = 72,angle = 45}\n        if rectRotateIntersectsCircle(rect2,circle1) then\n            label:setString(\"是否碰撞: true\")\n        else\n            label:setString(\"是否碰撞: false\")\n        end\n    end\n    addTouchListener(self.circle1,nil,moveCallback)\n    addTouchListener(self.rect2,nil,moveCallback)\nend\n{% endcodeblock %}\n\n就是这样。","source":"_posts/2016-03-19-collide.markdown","raw":"---\nlayout: post\ntitle: 简单几何图形的碰撞检测\npublished: true\ncategories: math\ntags: collide math\n---\n\n前言\n====\n\n> 目前主流的游戏引擎cocos2dx,u3d,ue4都提供了强大的物理引擎，但功能的丰富意味着性能消耗。在实际应用中，并不需要\n那么多的功能，比如跑酷类游戏，为了用户体验，可能还需要做出一些不符合物理的情况。这篇文章记录我在游戏开发中所用\n到的碰撞方法。    \n\n准备条件\n====\n\n**实现代码**： ``Lua``      \n**坐标系**：``笛卡尔坐标系``    \n**几何数据结构：**        \n*圆形:*\n{% codeblock lua %}\n-- x,y为圆心\n-- r为半径\n{x = 1.0,y = 1.0,r = 1.0}\n{% endcodeblock %}\n*矩形：*\n{% codeblock lua %}\n-- x,y为左下角坐标\n-- width,height为宽度和长度\n{x = 1.0,y = 1.0,width = 1.0, height = 1.0}\n{% endcodeblock %}\n*旋转矩形：*\n{% codeblock lua %}\n-- x,y为左下角坐标\n-- width,height为宽度和长度\n-- angle矩形逆时针的旋转角度\n{x = 1.0,y = 1.0,width = 1.0, height = 1.0, angle = 90}\n{% endcodeblock %}\n圆与圆的碰撞\n====\n> 两圆心的距离大于半径和不相交，否则相交    \n{% codeblock lua %}\nlocal function circleIntersectsCircle(circle1,circle2)\n    return  (circle1.x - circle2.x)^2 + (circle1.y - circle2.y)^2 < (circle1.r + circle2.r)^2\nend\n{% endcodeblock %}\n![圆形X圆形](/images/math/circleXcircle.gif)    \n\n矩形与矩形\n====\n> 意会一下    \n{% codeblock lua %}\nlocal function rectIntersectsRect( rect1, rect2 )\n    local intersect = not ( rect1.x > rect2.x + rect2.width or\n        rect1.x + rect1.width < rect2.x or\n        rect1.y > rect2.y + rect2.height or\n        rect1.y + rect1.height < rect2.y)\n    return intersect\nend\n{% endcodeblock %}\n![矩形X矩形](/images/math/rectXrect.gif)    \n\n矩形与圆\n====\n> [理论基础](https://www.zhihu.com/question/24251545/answer/27184960){:target=\"_blank\"}    \n\n{% codeblock lua %}\nlocal function rectIntersectsCircle(rect,circle)\n    local v = {math.abs(circle.x - (rect.x + rect.width/2)),\n        math.abs(circle.y - (rect.y + rect.height/2)) }\n    local h = {rect.width/2,rect.height/2}\n    local u = {math.max(v[1]-h[1],0),math.max(v[2]-h[2],0)}\n    return u[1]*u[1] + u[2]*u[2] < circle.r*circle.r\nend\n{% endcodeblock %}\n![矩形X圆形](/images/math/rectXcircle.gif)    \n\n旋转矩形与圆\n====\n> 与前面相同，将圆形变化到矩形的坐标系，这里增加圆形的角度变化计算\n{% codeblock lua %}\nlocal function rectIntersectsCircle(rect,circle)\n    local srcAngle = math.rad(rect.angle)\n    local rectCenterX = rect.x + rect.width / 2 * math.cos(srcAngle) + \n                        rect.height / 2 * math.cos(srcAngle + math.pi / 2)\n    local rectCenterY = rect.y + rect.width / 2 * math.sin(srcAngle) + \n                        rect.height / 2* math.sin(srcAngle + math.pi / 2)\n    local vectorX = circle.x - rectCenterX\n    local vectorY = circle.y - rectCenterY\n    local angle = math.atan2(rectCenterY - circle.y,rectCenterX - circle.x)\n    local angle = angle - math.rad(rect.angle)\n    local len = math.sqrt(vectorX^2 + vectorY^2)\n    local v = {math.abs(len * math.cos(angle)),math.abs(len * math.sin(angle))}\n    local h = {rect.width/2,rect.height/2}\n    local u = {math.max(v[1]-h[1],0),math.max(v[2]-h[2],0)}\n    return u[1]*u[1] + u[2]*u[2] < circle.r*circle.r\nend\n{% endcodeblock %}\n![旋转矩形X圆形](/images/math/rectAngleXcircle.gif)    \n\n额外内容\n====\n\n测试代码\n----\n{% codeblock lua %}\nfunction MainScene:onCreate()\n    display.newSprite(\"MainSceneBg.jpg\")\n        :move(display.center)\n        :addTo(self)\n    self.circle1 = cc.Sprite:create(\"circle.png\")\n        :addTo(self)\n        :setPosition(cc.p(500,300))\n    self.rect2 = cc.Sprite:create(\"rect.png\")\n        :addTo(self)\n        :setPosition(cc.p(620,300))\n        :setAnchorPoint(cc.p(0,0))\n        :setRotation(-45)\n    local label = cc.Label:createWithSystemFont(\"是否碰撞: true\", \"Arial\", 48)\n        :align(display.CENTER, display.center)\n        :addTo(self)\n    local moveCallback = function(touch,event)\n        local target = event:getCurrentTarget()\n        local x,y   = target:getPosition()\n        local delta = touch:getDelta()\n        target:setPosition(x+delta.x,y+delta.y)\n        -- 旋转矩形与圆的碰撞测试\n        local x1,y1 = self.circle1:getPosition()\n        local x2,y2 = self.rect2:getPosition()\n        local circle1 = {x=x1,y=y1,r=50}\n        local rect2 = {x=x2,y=y2,width = 180, height = 72,angle = 45}\n        if rectRotateIntersectsCircle(rect2,circle1) then\n            label:setString(\"是否碰撞: true\")\n        else\n            label:setString(\"是否碰撞: false\")\n        end\n    end\n    addTouchListener(self.circle1,nil,moveCallback)\n    addTouchListener(self.rect2,nil,moveCallback)\nend\n{% endcodeblock %}\n\n就是这样。","slug":"2016-03-19-collide","date":"2018-12-24T11:17:03.370Z","updated":"2018-12-24T11:54:13.182Z","_id":"cjq0w6f0x000g32923g3q4720","comments":1,"photos":[],"link":"","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote>\n<p>目前主流的游戏引擎cocos2dx,u3d,ue4都提供了强大的物理引擎，但功能的丰富意味着性能消耗。在实际应用中，并不需要<br>那么多的功能，比如跑酷类游戏，为了用户体验，可能还需要做出一些不符合物理的情况。这篇文章记录我在游戏开发中所用<br>到的碰撞方法。    </p>\n</blockquote>\n<h1 id=\"准备条件\"><a href=\"#准备条件\" class=\"headerlink\" title=\"准备条件\"></a>准备条件</h1><p><strong>实现代码</strong>： <code>Lua</code><br><strong>坐标系</strong>：<code>笛卡尔坐标系</code><br><strong>几何数据结构：</strong><br><em>圆形:</em><br><figure class=\"highlight lsl\"><figcaption><span>lua</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- x,y为圆心</span><br><span class=\"line\">-- r为半径</span><br><span class=\"line\">&#123;x = <span class=\"number\">1.0</span>,y = <span class=\"number\">1.0</span>,r = <span class=\"number\">1.0</span>&#125;</span><br></pre></td></tr></table></figure><br><em>矩形：</em><br><figure class=\"highlight arduino\"><figcaption><span>lua</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- x,y为左下角坐标</span><br><span class=\"line\">-- <span class=\"built_in\">width</span>,<span class=\"built_in\">height</span>为宽度和长度</span><br><span class=\"line\">&#123;x = <span class=\"number\">1.0</span>,y = <span class=\"number\">1.0</span>,<span class=\"built_in\">width</span> = <span class=\"number\">1.0</span>, <span class=\"built_in\">height</span> = <span class=\"number\">1.0</span>&#125;</span><br></pre></td></tr></table></figure><br><em>旋转矩形：</em><br><figure class=\"highlight lsl\"><figcaption><span>lua</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- x,y为左下角坐标</span><br><span class=\"line\">-- width,height为宽度和长度</span><br><span class=\"line\">-- angle矩形逆时针的旋转角度</span><br><span class=\"line\">&#123;x = <span class=\"number\">1.0</span>,y = <span class=\"number\">1.0</span>,width = <span class=\"number\">1.0</span>, height = <span class=\"number\">1.0</span>, angle = <span class=\"number\">90</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"圆与圆的碰撞\"><a href=\"#圆与圆的碰撞\" class=\"headerlink\" title=\"圆与圆的碰撞\"></a>圆与圆的碰撞</h1><blockquote>\n<p>两圆心的距离大于半径和不相交，否则相交<br><figure class=\"highlight ada\"><figcaption><span>lua</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local <span class=\"keyword\">function</span> <span class=\"title\">circleIntersectsCircle</span>(circle1,circle2)</span><br><span class=\"line\">    <span class=\"keyword\">return</span>  <span class=\"type\">(circle1.x</span> - circle2.x)^<span class=\"number\">2</span> + (circle1.y - circle2.y)^<span class=\"number\">2</span> &lt; (circle1.r + circle2.r)^<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure><br><img src=\"/images/math/circleXcircle.gif\" alt=\"圆形X圆形\">    </p>\n</blockquote>\n<h1 id=\"矩形与矩形\"><a href=\"#矩形与矩形\" class=\"headerlink\" title=\"矩形与矩形\"></a>矩形与矩形</h1><blockquote>\n<p>意会一下<br><figure class=\"highlight maxima\"><figcaption><span>lua</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">local</span> function rectIntersectsRect( rect1, rect2 )</span><br><span class=\"line\">    <span class=\"built_in\">local</span> <span class=\"built_in\">intersect</span> = <span class=\"keyword\">not</span> ( rect1.x &gt; rect2.x + rect2.<span class=\"built_in\">width</span> <span class=\"keyword\">or</span></span><br><span class=\"line\">        rect1.x + rect1.<span class=\"built_in\">width</span> &lt; rect2.x <span class=\"keyword\">or</span></span><br><span class=\"line\">        rect1.y &gt; rect2.y + rect2.<span class=\"built_in\">height</span> <span class=\"keyword\">or</span></span><br><span class=\"line\">        rect1.y + rect1.<span class=\"built_in\">height</span> &lt; rect2.y)</span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"built_in\">intersect</span></span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure><br><img src=\"/images/math/rectXrect.gif\" alt=\"矩形X矩形\">    </p>\n</blockquote>\n<h1 id=\"矩形与圆\"><a href=\"#矩形与圆\" class=\"headerlink\" title=\"矩形与圆\"></a>矩形与圆</h1><blockquote>\n<p><a href=\"https://www.zhihu.com/question/24251545/answer/27184960\" target=\"_blank\" rel=\"noopener\">理论基础</a>{:target=”_blank”}    </p>\n</blockquote>\n<figure class=\"highlight arduino\"><figcaption><span>lua</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local function rectIntersectsCircle(<span class=\"built_in\">rect</span>,<span class=\"built_in\">circle</span>)</span><br><span class=\"line\">    local v = &#123;math.<span class=\"built_in\">abs</span>(<span class=\"built_in\">circle</span>.x - (<span class=\"built_in\">rect</span>.x + <span class=\"built_in\">rect</span>.<span class=\"built_in\">width</span>/<span class=\"number\">2</span>)),</span><br><span class=\"line\">        math.<span class=\"built_in\">abs</span>(<span class=\"built_in\">circle</span>.y - (<span class=\"built_in\">rect</span>.y + <span class=\"built_in\">rect</span>.<span class=\"built_in\">height</span>/<span class=\"number\">2</span>)) &#125;</span><br><span class=\"line\">    local h = &#123;<span class=\"built_in\">rect</span>.<span class=\"built_in\">width</span>/<span class=\"number\">2</span>,<span class=\"built_in\">rect</span>.<span class=\"built_in\">height</span>/<span class=\"number\">2</span>&#125;</span><br><span class=\"line\">    local u = &#123;math.<span class=\"built_in\">max</span>(v[<span class=\"number\">1</span>]-h[<span class=\"number\">1</span>],<span class=\"number\">0</span>),math.<span class=\"built_in\">max</span>(v[<span class=\"number\">2</span>]-h[<span class=\"number\">2</span>],<span class=\"number\">0</span>)&#125;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> u[<span class=\"number\">1</span>]*u[<span class=\"number\">1</span>] + u[<span class=\"number\">2</span>]*u[<span class=\"number\">2</span>] &lt; <span class=\"built_in\">circle</span>.r*<span class=\"built_in\">circle</span>.r</span><br><span class=\"line\"><span class=\"built_in\">end</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/math/rectXcircle.gif\" alt=\"矩形X圆形\">    </p>\n<h1 id=\"旋转矩形与圆\"><a href=\"#旋转矩形与圆\" class=\"headerlink\" title=\"旋转矩形与圆\"></a>旋转矩形与圆</h1><blockquote>\n<p>与前面相同，将圆形变化到矩形的坐标系，这里增加圆形的角度变化计算<br><figure class=\"highlight lua\"><figcaption><span>lua</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">rectIntersectsCircle</span><span class=\"params\">(rect,circle)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> srcAngle = <span class=\"built_in\">math</span>.<span class=\"built_in\">rad</span>(rect.angle)</span><br><span class=\"line\">    <span class=\"keyword\">local</span> rectCenterX = rect.x + rect.width / <span class=\"number\">2</span> * <span class=\"built_in\">math</span>.<span class=\"built_in\">cos</span>(srcAngle) + </span><br><span class=\"line\">                        rect.height / <span class=\"number\">2</span> * <span class=\"built_in\">math</span>.<span class=\"built_in\">cos</span>(srcAngle + <span class=\"built_in\">math</span>.<span class=\"built_in\">pi</span> / <span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">local</span> rectCenterY = rect.y + rect.width / <span class=\"number\">2</span> * <span class=\"built_in\">math</span>.<span class=\"built_in\">sin</span>(srcAngle) + </span><br><span class=\"line\">                        rect.height / <span class=\"number\">2</span>* <span class=\"built_in\">math</span>.<span class=\"built_in\">sin</span>(srcAngle + <span class=\"built_in\">math</span>.<span class=\"built_in\">pi</span> / <span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">local</span> vectorX = circle.x - rectCenterX</span><br><span class=\"line\">    <span class=\"keyword\">local</span> vectorY = circle.y - rectCenterY</span><br><span class=\"line\">    <span class=\"keyword\">local</span> angle = <span class=\"built_in\">math</span>.<span class=\"built_in\">atan2</span>(rectCenterY - circle.y,rectCenterX - circle.x)</span><br><span class=\"line\">    <span class=\"keyword\">local</span> angle = angle - <span class=\"built_in\">math</span>.<span class=\"built_in\">rad</span>(rect.angle)</span><br><span class=\"line\">    <span class=\"keyword\">local</span> <span class=\"built_in\">len</span> = <span class=\"built_in\">math</span>.<span class=\"built_in\">sqrt</span>(vectorX^<span class=\"number\">2</span> + vectorY^<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">local</span> v = &#123;<span class=\"built_in\">math</span>.<span class=\"built_in\">abs</span>(<span class=\"built_in\">len</span> * <span class=\"built_in\">math</span>.<span class=\"built_in\">cos</span>(angle)),<span class=\"built_in\">math</span>.<span class=\"built_in\">abs</span>(<span class=\"built_in\">len</span> * <span class=\"built_in\">math</span>.<span class=\"built_in\">sin</span>(angle))&#125;</span><br><span class=\"line\">    <span class=\"keyword\">local</span> h = &#123;rect.width/<span class=\"number\">2</span>,rect.height/<span class=\"number\">2</span>&#125;</span><br><span class=\"line\">    <span class=\"keyword\">local</span> u = &#123;<span class=\"built_in\">math</span>.<span class=\"built_in\">max</span>(v[<span class=\"number\">1</span>]-h[<span class=\"number\">1</span>],<span class=\"number\">0</span>),<span class=\"built_in\">math</span>.<span class=\"built_in\">max</span>(v[<span class=\"number\">2</span>]-h[<span class=\"number\">2</span>],<span class=\"number\">0</span>)&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> u[<span class=\"number\">1</span>]*u[<span class=\"number\">1</span>] + u[<span class=\"number\">2</span>]*u[<span class=\"number\">2</span>] &lt; circle.r*circle.r</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure><br><img src=\"/images/math/rectAngleXcircle.gif\" alt=\"旋转矩形X圆形\">    </p>\n</blockquote>\n<h1 id=\"额外内容\"><a href=\"#额外内容\" class=\"headerlink\" title=\"额外内容\"></a>额外内容</h1><h2 id=\"测试代码\"><a href=\"#测试代码\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h2><figure class=\"highlight php\"><figcaption><span>lua</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MainScene</span>:<span class=\"title\">onCreate</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">display</span>.<span class=\"title\">newSprite</span><span class=\"params\">(<span class=\"string\">\"MainSceneBg.jpg\"</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">        :<span class=\"title\">move</span><span class=\"params\">(display.center)</span></span></span><br><span class=\"line\"><span class=\"function\">        :<span class=\"title\">addTo</span><span class=\"params\">(self)</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">self</span>.<span class=\"title\">circle1</span> = <span class=\"title\">cc</span>.<span class=\"title\">Sprite</span>:<span class=\"title\">create</span><span class=\"params\">(<span class=\"string\">\"circle.png\"</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">        :<span class=\"title\">addTo</span><span class=\"params\">(self)</span></span></span><br><span class=\"line\"><span class=\"function\">        :<span class=\"title\">setPosition</span><span class=\"params\">(cc.p<span class=\"params\">(<span class=\"number\">500</span>,<span class=\"number\">300</span>)</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">self</span>.<span class=\"title\">rect2</span> = <span class=\"title\">cc</span>.<span class=\"title\">Sprite</span>:<span class=\"title\">create</span><span class=\"params\">(<span class=\"string\">\"rect.png\"</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">        :<span class=\"title\">addTo</span><span class=\"params\">(self)</span></span></span><br><span class=\"line\"><span class=\"function\">        :<span class=\"title\">setPosition</span><span class=\"params\">(cc.p<span class=\"params\">(<span class=\"number\">620</span>,<span class=\"number\">300</span>)</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">        :<span class=\"title\">setAnchorPoint</span><span class=\"params\">(cc.p<span class=\"params\">(<span class=\"number\">0</span>,<span class=\"number\">0</span>)</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">        :<span class=\"title\">setRotation</span><span class=\"params\">(<span class=\"number\">-45</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">local</span> <span class=\"title\">label</span> = <span class=\"title\">cc</span>.<span class=\"title\">Label</span>:<span class=\"title\">createWithSystemFont</span><span class=\"params\">(<span class=\"string\">\"是否碰撞: true\"</span>, <span class=\"string\">\"Arial\"</span>, <span class=\"number\">48</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">        :<span class=\"title\">align</span><span class=\"params\">(display.CENTER, display.center)</span></span></span><br><span class=\"line\"><span class=\"function\">        :<span class=\"title\">addTo</span><span class=\"params\">(self)</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">local</span> <span class=\"title\">moveCallback</span> = <span class=\"title\">function</span><span class=\"params\">(touch,event)</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">local</span> <span class=\"title\">target</span> = <span class=\"title\">event</span>:<span class=\"title\">getCurrentTarget</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">local</span> <span class=\"title\">x</span>,<span class=\"title\">y</span>   = <span class=\"title\">target</span>:<span class=\"title\">getPosition</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">local</span> <span class=\"title\">delta</span> = <span class=\"title\">touch</span>:<span class=\"title\">getDelta</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">target</span>:<span class=\"title\">setPosition</span><span class=\"params\">(x+delta.x,y+delta.y)</span></span></span><br><span class=\"line\"><span class=\"function\">        -- 旋转矩形与圆的碰撞测试</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">local</span> <span class=\"title\">x1</span>,<span class=\"title\">y1</span> = <span class=\"title\">self</span>.<span class=\"title\">circle1</span>:<span class=\"title\">getPosition</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">local</span> <span class=\"title\">x2</span>,<span class=\"title\">y2</span> = <span class=\"title\">self</span>.<span class=\"title\">rect2</span>:<span class=\"title\">getPosition</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">local</span> <span class=\"title\">circle1</span> = </span>&#123;x=x1,y=y1,r=<span class=\"number\">50</span>&#125;</span><br><span class=\"line\">        local rect2 = &#123;x=x2,y=y2,width = <span class=\"number\">180</span>, height = <span class=\"number\">72</span>,angle = <span class=\"number\">45</span>&#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> rectRotateIntersectsCircle(rect2,circle1) then</span><br><span class=\"line\">            label:setString(<span class=\"string\">\"是否碰撞: true\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            label:setString(<span class=\"string\">\"是否碰撞: false\"</span>)</span><br><span class=\"line\">        end</span><br><span class=\"line\">    end</span><br><span class=\"line\">    addTouchListener(<span class=\"keyword\">self</span>.circle1,nil,moveCallback)</span><br><span class=\"line\">    addTouchListener(<span class=\"keyword\">self</span>.rect2,nil,moveCallback)</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<p>就是这样。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote>\n<p>目前主流的游戏引擎cocos2dx,u3d,ue4都提供了强大的物理引擎，但功能的丰富意味着性能消耗。在实际应用中，并不需要<br>那么多的功能，比如跑酷类游戏，为了用户体验，可能还需要做出一些不符合物理的情况。这篇文章记录我在游戏开发中所用<br>到的碰撞方法。    </p>\n</blockquote>\n<h1 id=\"准备条件\"><a href=\"#准备条件\" class=\"headerlink\" title=\"准备条件\"></a>准备条件</h1><p><strong>实现代码</strong>： <code>Lua</code><br><strong>坐标系</strong>：<code>笛卡尔坐标系</code><br><strong>几何数据结构：</strong><br><em>圆形:</em><br><figure class=\"highlight lsl\"><figcaption><span>lua</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- x,y为圆心</span><br><span class=\"line\">-- r为半径</span><br><span class=\"line\">&#123;x = <span class=\"number\">1.0</span>,y = <span class=\"number\">1.0</span>,r = <span class=\"number\">1.0</span>&#125;</span><br></pre></td></tr></table></figure><br><em>矩形：</em><br><figure class=\"highlight arduino\"><figcaption><span>lua</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- x,y为左下角坐标</span><br><span class=\"line\">-- <span class=\"built_in\">width</span>,<span class=\"built_in\">height</span>为宽度和长度</span><br><span class=\"line\">&#123;x = <span class=\"number\">1.0</span>,y = <span class=\"number\">1.0</span>,<span class=\"built_in\">width</span> = <span class=\"number\">1.0</span>, <span class=\"built_in\">height</span> = <span class=\"number\">1.0</span>&#125;</span><br></pre></td></tr></table></figure><br><em>旋转矩形：</em><br><figure class=\"highlight lsl\"><figcaption><span>lua</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- x,y为左下角坐标</span><br><span class=\"line\">-- width,height为宽度和长度</span><br><span class=\"line\">-- angle矩形逆时针的旋转角度</span><br><span class=\"line\">&#123;x = <span class=\"number\">1.0</span>,y = <span class=\"number\">1.0</span>,width = <span class=\"number\">1.0</span>, height = <span class=\"number\">1.0</span>, angle = <span class=\"number\">90</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"圆与圆的碰撞\"><a href=\"#圆与圆的碰撞\" class=\"headerlink\" title=\"圆与圆的碰撞\"></a>圆与圆的碰撞</h1><blockquote>\n<p>两圆心的距离大于半径和不相交，否则相交<br><figure class=\"highlight ada\"><figcaption><span>lua</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local <span class=\"keyword\">function</span> <span class=\"title\">circleIntersectsCircle</span>(circle1,circle2)</span><br><span class=\"line\">    <span class=\"keyword\">return</span>  <span class=\"type\">(circle1.x</span> - circle2.x)^<span class=\"number\">2</span> + (circle1.y - circle2.y)^<span class=\"number\">2</span> &lt; (circle1.r + circle2.r)^<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure><br><img src=\"/images/math/circleXcircle.gif\" alt=\"圆形X圆形\">    </p>\n</blockquote>\n<h1 id=\"矩形与矩形\"><a href=\"#矩形与矩形\" class=\"headerlink\" title=\"矩形与矩形\"></a>矩形与矩形</h1><blockquote>\n<p>意会一下<br><figure class=\"highlight maxima\"><figcaption><span>lua</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">local</span> function rectIntersectsRect( rect1, rect2 )</span><br><span class=\"line\">    <span class=\"built_in\">local</span> <span class=\"built_in\">intersect</span> = <span class=\"keyword\">not</span> ( rect1.x &gt; rect2.x + rect2.<span class=\"built_in\">width</span> <span class=\"keyword\">or</span></span><br><span class=\"line\">        rect1.x + rect1.<span class=\"built_in\">width</span> &lt; rect2.x <span class=\"keyword\">or</span></span><br><span class=\"line\">        rect1.y &gt; rect2.y + rect2.<span class=\"built_in\">height</span> <span class=\"keyword\">or</span></span><br><span class=\"line\">        rect1.y + rect1.<span class=\"built_in\">height</span> &lt; rect2.y)</span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"built_in\">intersect</span></span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure><br><img src=\"/images/math/rectXrect.gif\" alt=\"矩形X矩形\">    </p>\n</blockquote>\n<h1 id=\"矩形与圆\"><a href=\"#矩形与圆\" class=\"headerlink\" title=\"矩形与圆\"></a>矩形与圆</h1><blockquote>\n<p><a href=\"https://www.zhihu.com/question/24251545/answer/27184960\" target=\"_blank\" rel=\"noopener\">理论基础</a>{:target=”_blank”}    </p>\n</blockquote>\n<figure class=\"highlight arduino\"><figcaption><span>lua</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local function rectIntersectsCircle(<span class=\"built_in\">rect</span>,<span class=\"built_in\">circle</span>)</span><br><span class=\"line\">    local v = &#123;math.<span class=\"built_in\">abs</span>(<span class=\"built_in\">circle</span>.x - (<span class=\"built_in\">rect</span>.x + <span class=\"built_in\">rect</span>.<span class=\"built_in\">width</span>/<span class=\"number\">2</span>)),</span><br><span class=\"line\">        math.<span class=\"built_in\">abs</span>(<span class=\"built_in\">circle</span>.y - (<span class=\"built_in\">rect</span>.y + <span class=\"built_in\">rect</span>.<span class=\"built_in\">height</span>/<span class=\"number\">2</span>)) &#125;</span><br><span class=\"line\">    local h = &#123;<span class=\"built_in\">rect</span>.<span class=\"built_in\">width</span>/<span class=\"number\">2</span>,<span class=\"built_in\">rect</span>.<span class=\"built_in\">height</span>/<span class=\"number\">2</span>&#125;</span><br><span class=\"line\">    local u = &#123;math.<span class=\"built_in\">max</span>(v[<span class=\"number\">1</span>]-h[<span class=\"number\">1</span>],<span class=\"number\">0</span>),math.<span class=\"built_in\">max</span>(v[<span class=\"number\">2</span>]-h[<span class=\"number\">2</span>],<span class=\"number\">0</span>)&#125;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> u[<span class=\"number\">1</span>]*u[<span class=\"number\">1</span>] + u[<span class=\"number\">2</span>]*u[<span class=\"number\">2</span>] &lt; <span class=\"built_in\">circle</span>.r*<span class=\"built_in\">circle</span>.r</span><br><span class=\"line\"><span class=\"built_in\">end</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/math/rectXcircle.gif\" alt=\"矩形X圆形\">    </p>\n<h1 id=\"旋转矩形与圆\"><a href=\"#旋转矩形与圆\" class=\"headerlink\" title=\"旋转矩形与圆\"></a>旋转矩形与圆</h1><blockquote>\n<p>与前面相同，将圆形变化到矩形的坐标系，这里增加圆形的角度变化计算<br><figure class=\"highlight lua\"><figcaption><span>lua</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">rectIntersectsCircle</span><span class=\"params\">(rect,circle)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> srcAngle = <span class=\"built_in\">math</span>.<span class=\"built_in\">rad</span>(rect.angle)</span><br><span class=\"line\">    <span class=\"keyword\">local</span> rectCenterX = rect.x + rect.width / <span class=\"number\">2</span> * <span class=\"built_in\">math</span>.<span class=\"built_in\">cos</span>(srcAngle) + </span><br><span class=\"line\">                        rect.height / <span class=\"number\">2</span> * <span class=\"built_in\">math</span>.<span class=\"built_in\">cos</span>(srcAngle + <span class=\"built_in\">math</span>.<span class=\"built_in\">pi</span> / <span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">local</span> rectCenterY = rect.y + rect.width / <span class=\"number\">2</span> * <span class=\"built_in\">math</span>.<span class=\"built_in\">sin</span>(srcAngle) + </span><br><span class=\"line\">                        rect.height / <span class=\"number\">2</span>* <span class=\"built_in\">math</span>.<span class=\"built_in\">sin</span>(srcAngle + <span class=\"built_in\">math</span>.<span class=\"built_in\">pi</span> / <span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">local</span> vectorX = circle.x - rectCenterX</span><br><span class=\"line\">    <span class=\"keyword\">local</span> vectorY = circle.y - rectCenterY</span><br><span class=\"line\">    <span class=\"keyword\">local</span> angle = <span class=\"built_in\">math</span>.<span class=\"built_in\">atan2</span>(rectCenterY - circle.y,rectCenterX - circle.x)</span><br><span class=\"line\">    <span class=\"keyword\">local</span> angle = angle - <span class=\"built_in\">math</span>.<span class=\"built_in\">rad</span>(rect.angle)</span><br><span class=\"line\">    <span class=\"keyword\">local</span> <span class=\"built_in\">len</span> = <span class=\"built_in\">math</span>.<span class=\"built_in\">sqrt</span>(vectorX^<span class=\"number\">2</span> + vectorY^<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">local</span> v = &#123;<span class=\"built_in\">math</span>.<span class=\"built_in\">abs</span>(<span class=\"built_in\">len</span> * <span class=\"built_in\">math</span>.<span class=\"built_in\">cos</span>(angle)),<span class=\"built_in\">math</span>.<span class=\"built_in\">abs</span>(<span class=\"built_in\">len</span> * <span class=\"built_in\">math</span>.<span class=\"built_in\">sin</span>(angle))&#125;</span><br><span class=\"line\">    <span class=\"keyword\">local</span> h = &#123;rect.width/<span class=\"number\">2</span>,rect.height/<span class=\"number\">2</span>&#125;</span><br><span class=\"line\">    <span class=\"keyword\">local</span> u = &#123;<span class=\"built_in\">math</span>.<span class=\"built_in\">max</span>(v[<span class=\"number\">1</span>]-h[<span class=\"number\">1</span>],<span class=\"number\">0</span>),<span class=\"built_in\">math</span>.<span class=\"built_in\">max</span>(v[<span class=\"number\">2</span>]-h[<span class=\"number\">2</span>],<span class=\"number\">0</span>)&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> u[<span class=\"number\">1</span>]*u[<span class=\"number\">1</span>] + u[<span class=\"number\">2</span>]*u[<span class=\"number\">2</span>] &lt; circle.r*circle.r</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure><br><img src=\"/images/math/rectAngleXcircle.gif\" alt=\"旋转矩形X圆形\">    </p>\n</blockquote>\n<h1 id=\"额外内容\"><a href=\"#额外内容\" class=\"headerlink\" title=\"额外内容\"></a>额外内容</h1><h2 id=\"测试代码\"><a href=\"#测试代码\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h2><figure class=\"highlight php\"><figcaption><span>lua</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MainScene</span>:<span class=\"title\">onCreate</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">display</span>.<span class=\"title\">newSprite</span><span class=\"params\">(<span class=\"string\">\"MainSceneBg.jpg\"</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">        :<span class=\"title\">move</span><span class=\"params\">(display.center)</span></span></span><br><span class=\"line\"><span class=\"function\">        :<span class=\"title\">addTo</span><span class=\"params\">(self)</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">self</span>.<span class=\"title\">circle1</span> = <span class=\"title\">cc</span>.<span class=\"title\">Sprite</span>:<span class=\"title\">create</span><span class=\"params\">(<span class=\"string\">\"circle.png\"</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">        :<span class=\"title\">addTo</span><span class=\"params\">(self)</span></span></span><br><span class=\"line\"><span class=\"function\">        :<span class=\"title\">setPosition</span><span class=\"params\">(cc.p<span class=\"params\">(<span class=\"number\">500</span>,<span class=\"number\">300</span>)</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">self</span>.<span class=\"title\">rect2</span> = <span class=\"title\">cc</span>.<span class=\"title\">Sprite</span>:<span class=\"title\">create</span><span class=\"params\">(<span class=\"string\">\"rect.png\"</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">        :<span class=\"title\">addTo</span><span class=\"params\">(self)</span></span></span><br><span class=\"line\"><span class=\"function\">        :<span class=\"title\">setPosition</span><span class=\"params\">(cc.p<span class=\"params\">(<span class=\"number\">620</span>,<span class=\"number\">300</span>)</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">        :<span class=\"title\">setAnchorPoint</span><span class=\"params\">(cc.p<span class=\"params\">(<span class=\"number\">0</span>,<span class=\"number\">0</span>)</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">        :<span class=\"title\">setRotation</span><span class=\"params\">(<span class=\"number\">-45</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">local</span> <span class=\"title\">label</span> = <span class=\"title\">cc</span>.<span class=\"title\">Label</span>:<span class=\"title\">createWithSystemFont</span><span class=\"params\">(<span class=\"string\">\"是否碰撞: true\"</span>, <span class=\"string\">\"Arial\"</span>, <span class=\"number\">48</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">        :<span class=\"title\">align</span><span class=\"params\">(display.CENTER, display.center)</span></span></span><br><span class=\"line\"><span class=\"function\">        :<span class=\"title\">addTo</span><span class=\"params\">(self)</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">local</span> <span class=\"title\">moveCallback</span> = <span class=\"title\">function</span><span class=\"params\">(touch,event)</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">local</span> <span class=\"title\">target</span> = <span class=\"title\">event</span>:<span class=\"title\">getCurrentTarget</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">local</span> <span class=\"title\">x</span>,<span class=\"title\">y</span>   = <span class=\"title\">target</span>:<span class=\"title\">getPosition</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">local</span> <span class=\"title\">delta</span> = <span class=\"title\">touch</span>:<span class=\"title\">getDelta</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">target</span>:<span class=\"title\">setPosition</span><span class=\"params\">(x+delta.x,y+delta.y)</span></span></span><br><span class=\"line\"><span class=\"function\">        -- 旋转矩形与圆的碰撞测试</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">local</span> <span class=\"title\">x1</span>,<span class=\"title\">y1</span> = <span class=\"title\">self</span>.<span class=\"title\">circle1</span>:<span class=\"title\">getPosition</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">local</span> <span class=\"title\">x2</span>,<span class=\"title\">y2</span> = <span class=\"title\">self</span>.<span class=\"title\">rect2</span>:<span class=\"title\">getPosition</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">local</span> <span class=\"title\">circle1</span> = </span>&#123;x=x1,y=y1,r=<span class=\"number\">50</span>&#125;</span><br><span class=\"line\">        local rect2 = &#123;x=x2,y=y2,width = <span class=\"number\">180</span>, height = <span class=\"number\">72</span>,angle = <span class=\"number\">45</span>&#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> rectRotateIntersectsCircle(rect2,circle1) then</span><br><span class=\"line\">            label:setString(<span class=\"string\">\"是否碰撞: true\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            label:setString(<span class=\"string\">\"是否碰撞: false\"</span>)</span><br><span class=\"line\">        end</span><br><span class=\"line\">    end</span><br><span class=\"line\">    addTouchListener(<span class=\"keyword\">self</span>.circle1,nil,moveCallback)</span><br><span class=\"line\">    addTouchListener(<span class=\"keyword\">self</span>.rect2,nil,moveCallback)</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<p>就是这样。</p>\n"},{"layout":"post","title":"Java并发控制简介","published":1,"_content":"# Java并发控制简介\n\n## 锁\n\n### 重入锁-ReentrantLock\n\n#### 介绍\n\nReentrantLock与synchronized的性能差不多，主要ReentrantLock处理更加灵活。默认是非公平锁，拥有锁的线程，可以多次lock并且优化lock.\n\n#### 非公平锁\n\n```java\nReentrantLock reentrantLock = new ReentrantLock();\nnew Thread(()->{\n    Try.run(() -> {\n        reentrantLock.lock();\n        System.out.println(\"lock1\");\n        Thread.sleep(200);\n        reentrantLock.lock();\n        System.out.println(\"lock2\");\n        Thread.sleep(200);\n        reentrantLock.unlock();\n        System.out.println(\"unlock1\");\n        Thread.sleep(200);\n        reentrantLock.unlock();\n        System.out.println(\"unlock2\");\n    });\n}, \"线程1\").start();\n\nnew Thread(() -> {\n    Try.run(() -> Thread.sleep(100));\n    reentrantLock.lock();\n    System.out.println(\"lock\");\n    reentrantLock.unlock();\n    System.out.println(\"unlock\");\n},\"线程2\").start();\nTry.run(() -> Thread.sleep(2000));\n```\n\n**输出结果**\n\n```\nlock1\nlock2\nunlock1\nunlock2\nlock\nunlock\n```\n\n#### 公平锁\n\n主要区别在于`lock`时\n\n1. 如果锁已经被其他线程占用，公平锁会将线程放入链表队列。\n\n无线程占用或者已拥有锁时，无区别\n\n#### 常用方法\n\n`tryLock（）`如果锁未被占用，则占用并返回true,否则返回false\n\n`tryLock(long timeout, TimeUnit unit)`同`tryLock()`，额外等待一段时间\n\n`lockInterruptibly（）`如果当前线程被中断，则释放锁\n\n","source":"_posts/2018-11-06-lock.md","raw":"---\nlayout: post\ntitle: Java并发控制简介\npublished: true\ncategories:\ntags:\n---\n# Java并发控制简介\n\n## 锁\n\n### 重入锁-ReentrantLock\n\n#### 介绍\n\nReentrantLock与synchronized的性能差不多，主要ReentrantLock处理更加灵活。默认是非公平锁，拥有锁的线程，可以多次lock并且优化lock.\n\n#### 非公平锁\n\n```java\nReentrantLock reentrantLock = new ReentrantLock();\nnew Thread(()->{\n    Try.run(() -> {\n        reentrantLock.lock();\n        System.out.println(\"lock1\");\n        Thread.sleep(200);\n        reentrantLock.lock();\n        System.out.println(\"lock2\");\n        Thread.sleep(200);\n        reentrantLock.unlock();\n        System.out.println(\"unlock1\");\n        Thread.sleep(200);\n        reentrantLock.unlock();\n        System.out.println(\"unlock2\");\n    });\n}, \"线程1\").start();\n\nnew Thread(() -> {\n    Try.run(() -> Thread.sleep(100));\n    reentrantLock.lock();\n    System.out.println(\"lock\");\n    reentrantLock.unlock();\n    System.out.println(\"unlock\");\n},\"线程2\").start();\nTry.run(() -> Thread.sleep(2000));\n```\n\n**输出结果**\n\n```\nlock1\nlock2\nunlock1\nunlock2\nlock\nunlock\n```\n\n#### 公平锁\n\n主要区别在于`lock`时\n\n1. 如果锁已经被其他线程占用，公平锁会将线程放入链表队列。\n\n无线程占用或者已拥有锁时，无区别\n\n#### 常用方法\n\n`tryLock（）`如果锁未被占用，则占用并返回true,否则返回false\n\n`tryLock(long timeout, TimeUnit unit)`同`tryLock()`，额外等待一段时间\n\n`lockInterruptibly（）`如果当前线程被中断，则释放锁\n\n","slug":"2018-11-06-lock","date":"2018-11-05T06:35:56.153Z","updated":"2018-12-24T12:02:34.717Z","_id":"cjq0w6f12000k3292qexkxh5s","comments":1,"photos":[],"link":"","content":"<h1 id=\"Java并发控制简介\"><a href=\"#Java并发控制简介\" class=\"headerlink\" title=\"Java并发控制简介\"></a>Java并发控制简介</h1><h2 id=\"锁\"><a href=\"#锁\" class=\"headerlink\" title=\"锁\"></a>锁</h2><h3 id=\"重入锁-ReentrantLock\"><a href=\"#重入锁-ReentrantLock\" class=\"headerlink\" title=\"重入锁-ReentrantLock\"></a>重入锁-ReentrantLock</h3><h4 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h4><p>ReentrantLock与synchronized的性能差不多，主要ReentrantLock处理更加灵活。默认是非公平锁，拥有锁的线程，可以多次lock并且优化lock.</p>\n<h4 id=\"非公平锁\"><a href=\"#非公平锁\" class=\"headerlink\" title=\"非公平锁\"></a>非公平锁</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReentrantLock reentrantLock = <span class=\"keyword\">new</span> ReentrantLock();</span><br><span class=\"line\"><span class=\"keyword\">new</span> Thread(()-&gt;&#123;</span><br><span class=\"line\">    Try.run(() -&gt; &#123;</span><br><span class=\"line\">        reentrantLock.lock();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"lock1\"</span>);</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">200</span>);</span><br><span class=\"line\">        reentrantLock.lock();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"lock2\"</span>);</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">200</span>);</span><br><span class=\"line\">        reentrantLock.unlock();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"unlock1\"</span>);</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">200</span>);</span><br><span class=\"line\">        reentrantLock.unlock();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"unlock2\"</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;, <span class=\"string\">\"线程1\"</span>).start();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">    Try.run(() -&gt; Thread.sleep(<span class=\"number\">100</span>));</span><br><span class=\"line\">    reentrantLock.lock();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"lock\"</span>);</span><br><span class=\"line\">    reentrantLock.unlock();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"unlock\"</span>);</span><br><span class=\"line\">&#125;,<span class=\"string\">\"线程2\"</span>).start();</span><br><span class=\"line\">Try.run(() -&gt; Thread.sleep(<span class=\"number\">2000</span>));</span><br></pre></td></tr></table></figure>\n<p><strong>输出结果</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lock1</span><br><span class=\"line\">lock2</span><br><span class=\"line\">unlock1</span><br><span class=\"line\">unlock2</span><br><span class=\"line\">lock</span><br><span class=\"line\">unlock</span><br></pre></td></tr></table></figure>\n<h4 id=\"公平锁\"><a href=\"#公平锁\" class=\"headerlink\" title=\"公平锁\"></a>公平锁</h4><p>主要区别在于<code>lock</code>时</p>\n<ol>\n<li>如果锁已经被其他线程占用，公平锁会将线程放入链表队列。</li>\n</ol>\n<p>无线程占用或者已拥有锁时，无区别</p>\n<h4 id=\"常用方法\"><a href=\"#常用方法\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h4><p><code>tryLock（）</code>如果锁未被占用，则占用并返回true,否则返回false</p>\n<p><code>tryLock(long timeout, TimeUnit unit)</code>同<code>tryLock()</code>，额外等待一段时间</p>\n<p><code>lockInterruptibly（）</code>如果当前线程被中断，则释放锁</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Java并发控制简介\"><a href=\"#Java并发控制简介\" class=\"headerlink\" title=\"Java并发控制简介\"></a>Java并发控制简介</h1><h2 id=\"锁\"><a href=\"#锁\" class=\"headerlink\" title=\"锁\"></a>锁</h2><h3 id=\"重入锁-ReentrantLock\"><a href=\"#重入锁-ReentrantLock\" class=\"headerlink\" title=\"重入锁-ReentrantLock\"></a>重入锁-ReentrantLock</h3><h4 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h4><p>ReentrantLock与synchronized的性能差不多，主要ReentrantLock处理更加灵活。默认是非公平锁，拥有锁的线程，可以多次lock并且优化lock.</p>\n<h4 id=\"非公平锁\"><a href=\"#非公平锁\" class=\"headerlink\" title=\"非公平锁\"></a>非公平锁</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReentrantLock reentrantLock = <span class=\"keyword\">new</span> ReentrantLock();</span><br><span class=\"line\"><span class=\"keyword\">new</span> Thread(()-&gt;&#123;</span><br><span class=\"line\">    Try.run(() -&gt; &#123;</span><br><span class=\"line\">        reentrantLock.lock();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"lock1\"</span>);</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">200</span>);</span><br><span class=\"line\">        reentrantLock.lock();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"lock2\"</span>);</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">200</span>);</span><br><span class=\"line\">        reentrantLock.unlock();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"unlock1\"</span>);</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">200</span>);</span><br><span class=\"line\">        reentrantLock.unlock();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"unlock2\"</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;, <span class=\"string\">\"线程1\"</span>).start();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">    Try.run(() -&gt; Thread.sleep(<span class=\"number\">100</span>));</span><br><span class=\"line\">    reentrantLock.lock();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"lock\"</span>);</span><br><span class=\"line\">    reentrantLock.unlock();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"unlock\"</span>);</span><br><span class=\"line\">&#125;,<span class=\"string\">\"线程2\"</span>).start();</span><br><span class=\"line\">Try.run(() -&gt; Thread.sleep(<span class=\"number\">2000</span>));</span><br></pre></td></tr></table></figure>\n<p><strong>输出结果</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lock1</span><br><span class=\"line\">lock2</span><br><span class=\"line\">unlock1</span><br><span class=\"line\">unlock2</span><br><span class=\"line\">lock</span><br><span class=\"line\">unlock</span><br></pre></td></tr></table></figure>\n<h4 id=\"公平锁\"><a href=\"#公平锁\" class=\"headerlink\" title=\"公平锁\"></a>公平锁</h4><p>主要区别在于<code>lock</code>时</p>\n<ol>\n<li>如果锁已经被其他线程占用，公平锁会将线程放入链表队列。</li>\n</ol>\n<p>无线程占用或者已拥有锁时，无区别</p>\n<h4 id=\"常用方法\"><a href=\"#常用方法\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h4><p><code>tryLock（）</code>如果锁未被占用，则占用并返回true,否则返回false</p>\n<p><code>tryLock(long timeout, TimeUnit unit)</code>同<code>tryLock()</code>，额外等待一段时间</p>\n<p><code>lockInterruptibly（）</code>如果当前线程被中断，则释放锁</p>\n"},{"layout":"post","title":"小说开发-第一章-注册登录","published":1,"_content":"\n# 第一章 注册登录\n\n## 环境配置\n**开发环境**: 在正式开发之前，需要配置各种`jar`，具体内容参照[github](https://github.com/isghost/Re-Novel)    \n**布署服务器**：阿里云`1核2G`云主机，rmb`1000`，家里网络延迟超大，网络优化不行    \n\n## 开发中遇到的问题\n#### 1、`Mybatis`的`DAO`不能够`Autowire`\n**问题描述**：使用`@Autowire`注解，IDE没有提示错误，一运行就提示找不到相应的`Bean`。    \n**原因**：在这里[StackOverFlow](https://stackoverflow.com/questions/8999597/mybatis-spring-configuration-cant-autowire-mapper-beans)，大概意思是， `mybatis`自动生成的`Bean`在`BeanDefinitionRegistryPostProcessor`中生成，无法被同个`WebApplicationContext`自动装备。    \n**解决办法**：在这里[StackOverFlow](https://stackoverflow.com/questions/35258758/getservletconfigclasses-vs-getrootconfigclasses-when-extending-abstractannot), 同一个层不能装配，下个层就可以了。把`mybatis`移动`RootConfig`即可\n\n#### 2、 使用JCaptcha默认难度过高\n**问题描述**：使用默认验证码，人都无法识别，而且很难看，特别丑。    \n**原因**：与作者审美不同    \n**解决办法**：重写`DefaultImageCaptchaEngine `。背景色使用渐变过渡，颜色`RGB`范围`[0,127]`。前景色`RGB`范围`[128,255]`。验证码数字范围`[0-9]`，数量固定四个。字体扭曲`TwistedAndSheared`。这样可以提高清晰度。详见[SimpleImageCaptchaEngine](https://github.com/isghost/Re-Novel/blob/master/src/main/java/www/ccyblog/novel/modules/account/service/SimpleImageCaptchaEngine.java)    \n**剩余问题**：过于清晰，容易被机器识别。据我观察，国内验证码，一般在这个基础上，加几条不规则的线，再加点花边,不影响人的识别，提高机器识别难度。    \n\n#### 3、Shiro配置出错\n**问题描述**：按官方教程一路弄下来，到设置注解，突然不能运行。    \n**原因**：要想开启`shiro`的注解，不能使用`shiro.ini`，要停止`shiro.ini`，在`web.xml`中不能用`EnvironmentLoaderListener`    \n**解决办法**：删除即可。    \n> 当仔细检查配置，发现没有遗漏，还不能正常运行时，那多半有东西多出来。\n\n#### 4、无法使用RESTFul（表现层状态转移)\n**问题描述**:虽然书上有提示，需要添加依懒库，但不知道名字。    \n**解决办法**：网上配置方式也是五花八门，尝试多种配置方式，始终不对，原因和上方相同，配置了多余的东西。实际只需要在`pom.xml`添加`jackson-core`和`jackson-databind`即可，无需其他操作。    \n\n#### 5、注册时，向服务端查询用户名是否可用的频率优化。\n**问题描述**：修改用户名时，需要即时向用户提醒用户是否可用，向服务端的查询频率不能过高。    \n**查询策略**：![流程图](/images/novel/liucheng.png)    \n\nPS: [源码地址](https://github.com/isghost/Re-Novel)\n","source":"_posts/2017-08-11-chapter_1.md","raw":"---\nlayout: post\ntitle: 小说开发-第一章-注册登录\npublished: true\ncategories:\ntags:\n---\n\n# 第一章 注册登录\n\n## 环境配置\n**开发环境**: 在正式开发之前，需要配置各种`jar`，具体内容参照[github](https://github.com/isghost/Re-Novel)    \n**布署服务器**：阿里云`1核2G`云主机，rmb`1000`，家里网络延迟超大，网络优化不行    \n\n## 开发中遇到的问题\n#### 1、`Mybatis`的`DAO`不能够`Autowire`\n**问题描述**：使用`@Autowire`注解，IDE没有提示错误，一运行就提示找不到相应的`Bean`。    \n**原因**：在这里[StackOverFlow](https://stackoverflow.com/questions/8999597/mybatis-spring-configuration-cant-autowire-mapper-beans)，大概意思是， `mybatis`自动生成的`Bean`在`BeanDefinitionRegistryPostProcessor`中生成，无法被同个`WebApplicationContext`自动装备。    \n**解决办法**：在这里[StackOverFlow](https://stackoverflow.com/questions/35258758/getservletconfigclasses-vs-getrootconfigclasses-when-extending-abstractannot), 同一个层不能装配，下个层就可以了。把`mybatis`移动`RootConfig`即可\n\n#### 2、 使用JCaptcha默认难度过高\n**问题描述**：使用默认验证码，人都无法识别，而且很难看，特别丑。    \n**原因**：与作者审美不同    \n**解决办法**：重写`DefaultImageCaptchaEngine `。背景色使用渐变过渡，颜色`RGB`范围`[0,127]`。前景色`RGB`范围`[128,255]`。验证码数字范围`[0-9]`，数量固定四个。字体扭曲`TwistedAndSheared`。这样可以提高清晰度。详见[SimpleImageCaptchaEngine](https://github.com/isghost/Re-Novel/blob/master/src/main/java/www/ccyblog/novel/modules/account/service/SimpleImageCaptchaEngine.java)    \n**剩余问题**：过于清晰，容易被机器识别。据我观察，国内验证码，一般在这个基础上，加几条不规则的线，再加点花边,不影响人的识别，提高机器识别难度。    \n\n#### 3、Shiro配置出错\n**问题描述**：按官方教程一路弄下来，到设置注解，突然不能运行。    \n**原因**：要想开启`shiro`的注解，不能使用`shiro.ini`，要停止`shiro.ini`，在`web.xml`中不能用`EnvironmentLoaderListener`    \n**解决办法**：删除即可。    \n> 当仔细检查配置，发现没有遗漏，还不能正常运行时，那多半有东西多出来。\n\n#### 4、无法使用RESTFul（表现层状态转移)\n**问题描述**:虽然书上有提示，需要添加依懒库，但不知道名字。    \n**解决办法**：网上配置方式也是五花八门，尝试多种配置方式，始终不对，原因和上方相同，配置了多余的东西。实际只需要在`pom.xml`添加`jackson-core`和`jackson-databind`即可，无需其他操作。    \n\n#### 5、注册时，向服务端查询用户名是否可用的频率优化。\n**问题描述**：修改用户名时，需要即时向用户提醒用户是否可用，向服务端的查询频率不能过高。    \n**查询策略**：![流程图](/images/novel/liucheng.png)    \n\nPS: [源码地址](https://github.com/isghost/Re-Novel)\n","slug":"2017-08-11-chapter_1","date":"2018-12-24T11:17:03.386Z","updated":"2018-12-24T12:02:34.717Z","_id":"cjq0w6f15000l3292rztaxxjp","comments":1,"photos":[],"link":"","content":"<h1 id=\"第一章-注册登录\"><a href=\"#第一章-注册登录\" class=\"headerlink\" title=\"第一章 注册登录\"></a>第一章 注册登录</h1><h2 id=\"环境配置\"><a href=\"#环境配置\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h2><p><strong>开发环境</strong>: 在正式开发之前，需要配置各种<code>jar</code>，具体内容参照<a href=\"https://github.com/isghost/Re-Novel\" target=\"_blank\" rel=\"noopener\">github</a><br><strong>布署服务器</strong>：阿里云<code>1核2G</code>云主机，rmb<code>1000</code>，家里网络延迟超大，网络优化不行    </p>\n<h2 id=\"开发中遇到的问题\"><a href=\"#开发中遇到的问题\" class=\"headerlink\" title=\"开发中遇到的问题\"></a>开发中遇到的问题</h2><h4 id=\"1、Mybatis的DAO不能够Autowire\"><a href=\"#1、Mybatis的DAO不能够Autowire\" class=\"headerlink\" title=\"1、Mybatis的DAO不能够Autowire\"></a>1、<code>Mybatis</code>的<code>DAO</code>不能够<code>Autowire</code></h4><p><strong>问题描述</strong>：使用<code>@Autowire</code>注解，IDE没有提示错误，一运行就提示找不到相应的<code>Bean</code>。<br><strong>原因</strong>：在这里<a href=\"https://stackoverflow.com/questions/8999597/mybatis-spring-configuration-cant-autowire-mapper-beans\" target=\"_blank\" rel=\"noopener\">StackOverFlow</a>，大概意思是， <code>mybatis</code>自动生成的<code>Bean</code>在<code>BeanDefinitionRegistryPostProcessor</code>中生成，无法被同个<code>WebApplicationContext</code>自动装备。<br><strong>解决办法</strong>：在这里<a href=\"https://stackoverflow.com/questions/35258758/getservletconfigclasses-vs-getrootconfigclasses-when-extending-abstractannot\" target=\"_blank\" rel=\"noopener\">StackOverFlow</a>, 同一个层不能装配，下个层就可以了。把<code>mybatis</code>移动<code>RootConfig</code>即可</p>\n<h4 id=\"2、-使用JCaptcha默认难度过高\"><a href=\"#2、-使用JCaptcha默认难度过高\" class=\"headerlink\" title=\"2、 使用JCaptcha默认难度过高\"></a>2、 使用JCaptcha默认难度过高</h4><p><strong>问题描述</strong>：使用默认验证码，人都无法识别，而且很难看，特别丑。<br><strong>原因</strong>：与作者审美不同<br><strong>解决办法</strong>：重写<code>DefaultImageCaptchaEngine</code>。背景色使用渐变过渡，颜色<code>RGB</code>范围<code>[0,127]</code>。前景色<code>RGB</code>范围<code>[128,255]</code>。验证码数字范围<code>[0-9]</code>，数量固定四个。字体扭曲<code>TwistedAndSheared</code>。这样可以提高清晰度。详见<a href=\"https://github.com/isghost/Re-Novel/blob/master/src/main/java/www/ccyblog/novel/modules/account/service/SimpleImageCaptchaEngine.java\" target=\"_blank\" rel=\"noopener\">SimpleImageCaptchaEngine</a><br><strong>剩余问题</strong>：过于清晰，容易被机器识别。据我观察，国内验证码，一般在这个基础上，加几条不规则的线，再加点花边,不影响人的识别，提高机器识别难度。    </p>\n<h4 id=\"3、Shiro配置出错\"><a href=\"#3、Shiro配置出错\" class=\"headerlink\" title=\"3、Shiro配置出错\"></a>3、Shiro配置出错</h4><p><strong>问题描述</strong>：按官方教程一路弄下来，到设置注解，突然不能运行。<br><strong>原因</strong>：要想开启<code>shiro</code>的注解，不能使用<code>shiro.ini</code>，要停止<code>shiro.ini</code>，在<code>web.xml</code>中不能用<code>EnvironmentLoaderListener</code><br><strong>解决办法</strong>：删除即可。    </p>\n<blockquote>\n<p>当仔细检查配置，发现没有遗漏，还不能正常运行时，那多半有东西多出来。</p>\n</blockquote>\n<h4 id=\"4、无法使用RESTFul（表现层状态转移\"><a href=\"#4、无法使用RESTFul（表现层状态转移\" class=\"headerlink\" title=\"4、无法使用RESTFul（表现层状态转移)\"></a>4、无法使用RESTFul（表现层状态转移)</h4><p><strong>问题描述</strong>:虽然书上有提示，需要添加依懒库，但不知道名字。<br><strong>解决办法</strong>：网上配置方式也是五花八门，尝试多种配置方式，始终不对，原因和上方相同，配置了多余的东西。实际只需要在<code>pom.xml</code>添加<code>jackson-core</code>和<code>jackson-databind</code>即可，无需其他操作。    </p>\n<h4 id=\"5、注册时，向服务端查询用户名是否可用的频率优化。\"><a href=\"#5、注册时，向服务端查询用户名是否可用的频率优化。\" class=\"headerlink\" title=\"5、注册时，向服务端查询用户名是否可用的频率优化。\"></a>5、注册时，向服务端查询用户名是否可用的频率优化。</h4><p><strong>问题描述</strong>：修改用户名时，需要即时向用户提醒用户是否可用，向服务端的查询频率不能过高。<br><strong>查询策略</strong>：<img src=\"/images/novel/liucheng.png\" alt=\"流程图\">    </p>\n<p>PS: <a href=\"https://github.com/isghost/Re-Novel\" target=\"_blank\" rel=\"noopener\">源码地址</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"第一章-注册登录\"><a href=\"#第一章-注册登录\" class=\"headerlink\" title=\"第一章 注册登录\"></a>第一章 注册登录</h1><h2 id=\"环境配置\"><a href=\"#环境配置\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h2><p><strong>开发环境</strong>: 在正式开发之前，需要配置各种<code>jar</code>，具体内容参照<a href=\"https://github.com/isghost/Re-Novel\" target=\"_blank\" rel=\"noopener\">github</a><br><strong>布署服务器</strong>：阿里云<code>1核2G</code>云主机，rmb<code>1000</code>，家里网络延迟超大，网络优化不行    </p>\n<h2 id=\"开发中遇到的问题\"><a href=\"#开发中遇到的问题\" class=\"headerlink\" title=\"开发中遇到的问题\"></a>开发中遇到的问题</h2><h4 id=\"1、Mybatis的DAO不能够Autowire\"><a href=\"#1、Mybatis的DAO不能够Autowire\" class=\"headerlink\" title=\"1、Mybatis的DAO不能够Autowire\"></a>1、<code>Mybatis</code>的<code>DAO</code>不能够<code>Autowire</code></h4><p><strong>问题描述</strong>：使用<code>@Autowire</code>注解，IDE没有提示错误，一运行就提示找不到相应的<code>Bean</code>。<br><strong>原因</strong>：在这里<a href=\"https://stackoverflow.com/questions/8999597/mybatis-spring-configuration-cant-autowire-mapper-beans\" target=\"_blank\" rel=\"noopener\">StackOverFlow</a>，大概意思是， <code>mybatis</code>自动生成的<code>Bean</code>在<code>BeanDefinitionRegistryPostProcessor</code>中生成，无法被同个<code>WebApplicationContext</code>自动装备。<br><strong>解决办法</strong>：在这里<a href=\"https://stackoverflow.com/questions/35258758/getservletconfigclasses-vs-getrootconfigclasses-when-extending-abstractannot\" target=\"_blank\" rel=\"noopener\">StackOverFlow</a>, 同一个层不能装配，下个层就可以了。把<code>mybatis</code>移动<code>RootConfig</code>即可</p>\n<h4 id=\"2、-使用JCaptcha默认难度过高\"><a href=\"#2、-使用JCaptcha默认难度过高\" class=\"headerlink\" title=\"2、 使用JCaptcha默认难度过高\"></a>2、 使用JCaptcha默认难度过高</h4><p><strong>问题描述</strong>：使用默认验证码，人都无法识别，而且很难看，特别丑。<br><strong>原因</strong>：与作者审美不同<br><strong>解决办法</strong>：重写<code>DefaultImageCaptchaEngine</code>。背景色使用渐变过渡，颜色<code>RGB</code>范围<code>[0,127]</code>。前景色<code>RGB</code>范围<code>[128,255]</code>。验证码数字范围<code>[0-9]</code>，数量固定四个。字体扭曲<code>TwistedAndSheared</code>。这样可以提高清晰度。详见<a href=\"https://github.com/isghost/Re-Novel/blob/master/src/main/java/www/ccyblog/novel/modules/account/service/SimpleImageCaptchaEngine.java\" target=\"_blank\" rel=\"noopener\">SimpleImageCaptchaEngine</a><br><strong>剩余问题</strong>：过于清晰，容易被机器识别。据我观察，国内验证码，一般在这个基础上，加几条不规则的线，再加点花边,不影响人的识别，提高机器识别难度。    </p>\n<h4 id=\"3、Shiro配置出错\"><a href=\"#3、Shiro配置出错\" class=\"headerlink\" title=\"3、Shiro配置出错\"></a>3、Shiro配置出错</h4><p><strong>问题描述</strong>：按官方教程一路弄下来，到设置注解，突然不能运行。<br><strong>原因</strong>：要想开启<code>shiro</code>的注解，不能使用<code>shiro.ini</code>，要停止<code>shiro.ini</code>，在<code>web.xml</code>中不能用<code>EnvironmentLoaderListener</code><br><strong>解决办法</strong>：删除即可。    </p>\n<blockquote>\n<p>当仔细检查配置，发现没有遗漏，还不能正常运行时，那多半有东西多出来。</p>\n</blockquote>\n<h4 id=\"4、无法使用RESTFul（表现层状态转移\"><a href=\"#4、无法使用RESTFul（表现层状态转移\" class=\"headerlink\" title=\"4、无法使用RESTFul（表现层状态转移)\"></a>4、无法使用RESTFul（表现层状态转移)</h4><p><strong>问题描述</strong>:虽然书上有提示，需要添加依懒库，但不知道名字。<br><strong>解决办法</strong>：网上配置方式也是五花八门，尝试多种配置方式，始终不对，原因和上方相同，配置了多余的东西。实际只需要在<code>pom.xml</code>添加<code>jackson-core</code>和<code>jackson-databind</code>即可，无需其他操作。    </p>\n<h4 id=\"5、注册时，向服务端查询用户名是否可用的频率优化。\"><a href=\"#5、注册时，向服务端查询用户名是否可用的频率优化。\" class=\"headerlink\" title=\"5、注册时，向服务端查询用户名是否可用的频率优化。\"></a>5、注册时，向服务端查询用户名是否可用的频率优化。</h4><p><strong>问题描述</strong>：修改用户名时，需要即时向用户提醒用户是否可用，向服务端的查询频率不能过高。<br><strong>查询策略</strong>：<img src=\"/images/novel/liucheng.png\" alt=\"流程图\">    </p>\n<p>PS: <a href=\"https://github.com/isghost/Re-Novel\" target=\"_blank\" rel=\"noopener\">源码地址</a></p>\n"},{"layout":"post","title":"浅谈随机及其在游戏中的应用","published":1,"_content":"\n需求\n========\n一共有N个公会，每个公会有(M1,M2...MN)个人。要进行公会战。\n1. 玩法是一对一随机混战。\n2. 尽量不和自己公会的人对站\n\n解决思路\n=============\n假设参赛人数为K人，比舞台数K/2个(先不考虑临界值问题)。遍历所有公会，从可以上场的舞台(人数少于二人)中，随机获取公会人数数量的舞台，将整个公会的人分配进去。\n0. 舞台是假想，实际就是一场战斗\n1. 优先取空舞台\n2. 舞台数不够时，需要处理公会自己人打自己人的情况\n\n问题转换\n=========\n从空舞台中随机获取M个舞台，这个问题转换为，从一个数组中，随机选取M个数。\n\n数组的乱序\n================\n允许改变数组的最快算法\n{% codeblock C++ %}\nvoid rand_array(int * array, int len) {\n\tfor (int i = len; i > 0; i--) {\n\t\tint k = rand() % i;\n\t\tint tmp = array[i - 1];\n\t\tarray[i - 1] = array[k];\n\t\tarray[k] = tmp;\n\t}\n}\n{% endcodeblock %}\n\n不允许改变数组的最快算法\n{% codeblock C++ %}\nint * rand_array(int * array, int len) {\n\tint * new_array = (int*)malloc(sizeof(int) * len);\n\tfor (int i = 0; i < len; i++) {\n\t\tint k = rand() % (i + 1);\n\t\tnew_array[i] = new_array[k];\n\t\tnew_array[k] = array[i];\n\t}\n\treturn new_array;\n}\n{% endcodeblock %}\n\n从数组中随机获取M个数\n==============\n实际就是乱序算法的阉割。乱序算法，N个数，随机N-1次。取M个数，只需要随机M次。\n","source":"_posts/2016-11-26-random.markdown","raw":"---\nlayout: post\ntitle: 浅谈随机及其在游戏中的应用\npublished: true\ncategories:\ntags:\n---\n\n需求\n========\n一共有N个公会，每个公会有(M1,M2...MN)个人。要进行公会战。\n1. 玩法是一对一随机混战。\n2. 尽量不和自己公会的人对站\n\n解决思路\n=============\n假设参赛人数为K人，比舞台数K/2个(先不考虑临界值问题)。遍历所有公会，从可以上场的舞台(人数少于二人)中，随机获取公会人数数量的舞台，将整个公会的人分配进去。\n0. 舞台是假想，实际就是一场战斗\n1. 优先取空舞台\n2. 舞台数不够时，需要处理公会自己人打自己人的情况\n\n问题转换\n=========\n从空舞台中随机获取M个舞台，这个问题转换为，从一个数组中，随机选取M个数。\n\n数组的乱序\n================\n允许改变数组的最快算法\n{% codeblock C++ %}\nvoid rand_array(int * array, int len) {\n\tfor (int i = len; i > 0; i--) {\n\t\tint k = rand() % i;\n\t\tint tmp = array[i - 1];\n\t\tarray[i - 1] = array[k];\n\t\tarray[k] = tmp;\n\t}\n}\n{% endcodeblock %}\n\n不允许改变数组的最快算法\n{% codeblock C++ %}\nint * rand_array(int * array, int len) {\n\tint * new_array = (int*)malloc(sizeof(int) * len);\n\tfor (int i = 0; i < len; i++) {\n\t\tint k = rand() % (i + 1);\n\t\tnew_array[i] = new_array[k];\n\t\tnew_array[k] = array[i];\n\t}\n\treturn new_array;\n}\n{% endcodeblock %}\n\n从数组中随机获取M个数\n==============\n实际就是乱序算法的阉割。乱序算法，N个数，随机N-1次。取M个数，只需要随机M次。\n","slug":"2016-11-26-random","date":"2018-11-05T06:35:56.149Z","updated":"2018-12-24T12:02:34.716Z","_id":"cjq0w6f17000o3292kmdqxfkz","comments":1,"photos":[],"link":"","content":"<h1 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h1><p>一共有N个公会，每个公会有(M1,M2…MN)个人。要进行公会战。</p>\n<ol>\n<li>玩法是一对一随机混战。</li>\n<li>尽量不和自己公会的人对站</li>\n</ol>\n<h1 id=\"解决思路\"><a href=\"#解决思路\" class=\"headerlink\" title=\"解决思路\"></a>解决思路</h1><p>假设参赛人数为K人，比舞台数K/2个(先不考虑临界值问题)。遍历所有公会，从可以上场的舞台(人数少于二人)中，随机获取公会人数数量的舞台，将整个公会的人分配进去。</p>\n<ol start=\"0\">\n<li>舞台是假想，实际就是一场战斗</li>\n<li>优先取空舞台</li>\n<li>舞台数不够时，需要处理公会自己人打自己人的情况</li>\n</ol>\n<h1 id=\"问题转换\"><a href=\"#问题转换\" class=\"headerlink\" title=\"问题转换\"></a>问题转换</h1><p>从空舞台中随机获取M个舞台，这个问题转换为，从一个数组中，随机选取M个数。</p>\n<h1 id=\"数组的乱序\"><a href=\"#数组的乱序\" class=\"headerlink\" title=\"数组的乱序\"></a>数组的乱序</h1><p>允许改变数组的最快算法<br><figure class=\"highlight plain\"><figcaption><span>C++</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void rand_array(int * array, int len) &#123;</span><br><span class=\"line\">\tfor (int i = len; i &gt; 0; i--) &#123;</span><br><span class=\"line\">\t\tint k = rand() % i;</span><br><span class=\"line\">\t\tint tmp = array[i - 1];</span><br><span class=\"line\">\t\tarray[i - 1] = array[k];</span><br><span class=\"line\">\t\tarray[k] = tmp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>不允许改变数组的最快算法<br><figure class=\"highlight plain\"><figcaption><span>C++</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int * rand_array(int * array, int len) &#123;</span><br><span class=\"line\">\tint * new_array = (int*)malloc(sizeof(int) * len);</span><br><span class=\"line\">\tfor (int i = 0; i &lt; len; i++) &#123;</span><br><span class=\"line\">\t\tint k = rand() % (i + 1);</span><br><span class=\"line\">\t\tnew_array[i] = new_array[k];</span><br><span class=\"line\">\t\tnew_array[k] = array[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn new_array;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"从数组中随机获取M个数\"><a href=\"#从数组中随机获取M个数\" class=\"headerlink\" title=\"从数组中随机获取M个数\"></a>从数组中随机获取M个数</h1><p>实际就是乱序算法的阉割。乱序算法，N个数，随机N-1次。取M个数，只需要随机M次。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h1><p>一共有N个公会，每个公会有(M1,M2…MN)个人。要进行公会战。</p>\n<ol>\n<li>玩法是一对一随机混战。</li>\n<li>尽量不和自己公会的人对站</li>\n</ol>\n<h1 id=\"解决思路\"><a href=\"#解决思路\" class=\"headerlink\" title=\"解决思路\"></a>解决思路</h1><p>假设参赛人数为K人，比舞台数K/2个(先不考虑临界值问题)。遍历所有公会，从可以上场的舞台(人数少于二人)中，随机获取公会人数数量的舞台，将整个公会的人分配进去。</p>\n<ol start=\"0\">\n<li>舞台是假想，实际就是一场战斗</li>\n<li>优先取空舞台</li>\n<li>舞台数不够时，需要处理公会自己人打自己人的情况</li>\n</ol>\n<h1 id=\"问题转换\"><a href=\"#问题转换\" class=\"headerlink\" title=\"问题转换\"></a>问题转换</h1><p>从空舞台中随机获取M个舞台，这个问题转换为，从一个数组中，随机选取M个数。</p>\n<h1 id=\"数组的乱序\"><a href=\"#数组的乱序\" class=\"headerlink\" title=\"数组的乱序\"></a>数组的乱序</h1><p>允许改变数组的最快算法<br><figure class=\"highlight plain\"><figcaption><span>C++</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void rand_array(int * array, int len) &#123;</span><br><span class=\"line\">\tfor (int i = len; i &gt; 0; i--) &#123;</span><br><span class=\"line\">\t\tint k = rand() % i;</span><br><span class=\"line\">\t\tint tmp = array[i - 1];</span><br><span class=\"line\">\t\tarray[i - 1] = array[k];</span><br><span class=\"line\">\t\tarray[k] = tmp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>不允许改变数组的最快算法<br><figure class=\"highlight plain\"><figcaption><span>C++</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int * rand_array(int * array, int len) &#123;</span><br><span class=\"line\">\tint * new_array = (int*)malloc(sizeof(int) * len);</span><br><span class=\"line\">\tfor (int i = 0; i &lt; len; i++) &#123;</span><br><span class=\"line\">\t\tint k = rand() % (i + 1);</span><br><span class=\"line\">\t\tnew_array[i] = new_array[k];</span><br><span class=\"line\">\t\tnew_array[k] = array[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn new_array;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"从数组中随机获取M个数\"><a href=\"#从数组中随机获取M个数\" class=\"headerlink\" title=\"从数组中随机获取M个数\"></a>从数组中随机获取M个数</h1><p>实际就是乱序算法的阉割。乱序算法，N个数，随机N-1次。取M个数，只需要随机M次。</p>\n"},{"layout":"post","title":"Java容器简介","published":1,"_content":"\nJava容器简介\n===\n描述顺序按版本来，如有遗漏，欢迎补充\n\n使用到的数据结构\n---\n1. 数组\n2. 链表\n3. 哈希表\n4. Map\n5. 红黑树\n6. 跳表\n7. 堆\n\n如果对以上数据结构不了解，建议翻看《数据结构》，都是基础知识点，学完之后，再看容器，就会感觉一目了然。\n建议把二叉搜索树的整个系列都学习下，包括`B+, B-,B*, AVL，红黑树`。（虽然我看完忘的干干净净，但我觉得可以影响你的思考方式)\n\n依赖的技术\n---\n1. CAS(Compare and Swap) 如果与预期值相同，那么就交换，否则什么都不干。Java中的主要函数有:\n- `UNSAFE.compareAndSwapObject(this, nextOffset, cmp, val);`\n- `UNSAFE.putObject(this, itemOffset, item);`\n2. volatile 不使用CPU缓存。\n3. AQS(AbstractQueuedSynchronized) 基于前面两种技术，主要用于加锁，例如'ReentrantLock`\n\n这里简单描述，细节自行网上查找，每一个都是一个长篇文章。\n\nJava 1.0\n---\n1. Vector\n2. HashTable\n\n已不推荐使用，记住是线程安全，效率低下即可。\n\nJava 1.2\n---\n由于线程安全容器的效率低下，所以推出线程不安全，但效率高的容器，同步由用户控制。\n\n1. `ArrayList` 使用数据结构`数组`，有自动扩容的功能。\n2. `LinkedList` 使用数据结构`链表`，是一个双向`链表`，所以拥有队列和栈的功能\n3. `HashMap` 使用数据结构`哈希表`，要点是如何取哈希值，哈希冲突如何解决。\n\n\t * This map usually acts as a binned (bucketed) hash table, but\n     * when bins get too large, they are transformed into bins of\n     * TreeNodes, each structured similarly to those in\n     * java.util.TreeMap\n     未细看源码，我的理解是，有哈希冲突时，数据放在一个桶里，当这个桶过大时，将其转化为类似TreeMap的树。\n\n4. `TreeMap` 使用数据结构`红黑树`，由于能根据大小保持顺序，所以key需要继承自`Comparable`或者创建时提供`Comparator`。\n5. `LinkedHashMap` 继承自HashMap，通用实现`LinkedHashIterator`等内部类，拥有了按插入顺序访问和LRU功能。\n6. `HashSet` 使用HashMap实现(组合形式，非继承),所有的`value`为`private static final Object PRESENT = new Object();`\n7. `TreeSet` 默认使用TreeMap实现，创建时，也可以指定实现`NavigableMap`接口的类。同样`value`也为`PRESENT`\n\n\nJava 1.4\n---\n1. `LinkedHashSet` 继承自`HashSet`,好像没有添加什么新功能，源码里基本都是构造函数?_?。\n\nJava 1.5\n---\n在1.5版本里，推出线程安全，阻塞的容器(Blocking系列)，使用1.5中的新锁。还有线程安全，非阻塞容器(Concurrent系列)，使用CAS技术。分别对应于悲观锁和乐观锁思想。\n\n1. `PriorityQueue` 优先队列，使用了数据结构`堆`(非内存中的堆)\n2. `ArrayBlockingQueue` 使用数据结构`数组`，固定大小，线程安全，循环使用，不存在移动元素的情况，修改时，使用`ReentrantLock`进行加锁。\n3. `LinkedBlockingQueue` 使用数据结构`单向链表`，使用`双锁队列`算法，固定大小，线程安全。`offer`和`take`使用不同的锁。使用到`ReetrantLock`和`Condition`。\n4. `LinkedBlockingDeque` 使用数据结构`双向链表`，固定大小，线程安全。单锁，使用`ReentrantLock`加锁。\n5. `PriorityBlockingQueue` 使用数据结构`堆`，固定大小，线程安全。单锁，使用`ReentrantLock`加锁。\n6. `ConcurrentLinkedQueue` 使用数据结构`链表`，应该是基于这篇论文[《Simple, Fast, and Practical Non-Blocking and Blocking Concurrent Queue Algorithms》](https://www.research.ibm.com/people/m/michael/podc-1996.pdf)修改而来。依赖`CAS`，线程安全。\n7. `ConcurrentHashMap` 使用数据结构`哈希表`，依赖`CAS`，线程安全。有点不同的时，发生冲突时，使用`synchronized(f)`同步代码块，估计是树的调整比较麻烦。\n\n\nJava 1.6\n---\n1.5中并没有提供`TreeMap`对应的并发版本，如果像`ConcurrentHashMap`一样，直接同步整个代码块，还不如将这个操作交给用户。\n`红黑树`在并发中，有一个问题，发生变动时，需要修改的值较多，情况也变多。用无锁设计，情况将变的复杂起来。`跳表`功能与`红黑树`相似，修改相对较少，方便实现无锁设计(源码中的不同情况还是有点多...)，跳表存在的问题是，有多级索引，占用空间过多(空间换时间)。\n1. `ConcurrentSkipListMap` 使用数据结构`跳表`,依赖`CAS`，线程安全。\n2. `ConcurrentSkipListSet` 跟之前一样`Set`又使用对应版本的Map。默认使用`ConcurrentSkipListMap`或者指定实现`ConcurrentNavigableMap`接口的类。线程安全。\n\n\nJava 1.7\n---\n1. `ConcurrentLinkedDeque` 使用数据结构`双向链表`，与`ConcurrentLinkedQueue`类似。\n\n","source":"_posts/2017-06-30-javacollection.markdown","raw":"---\nlayout: post\ntitle: Java容器简介\npublished: true\ncategories:\ntags:\n---\n\nJava容器简介\n===\n描述顺序按版本来，如有遗漏，欢迎补充\n\n使用到的数据结构\n---\n1. 数组\n2. 链表\n3. 哈希表\n4. Map\n5. 红黑树\n6. 跳表\n7. 堆\n\n如果对以上数据结构不了解，建议翻看《数据结构》，都是基础知识点，学完之后，再看容器，就会感觉一目了然。\n建议把二叉搜索树的整个系列都学习下，包括`B+, B-,B*, AVL，红黑树`。（虽然我看完忘的干干净净，但我觉得可以影响你的思考方式)\n\n依赖的技术\n---\n1. CAS(Compare and Swap) 如果与预期值相同，那么就交换，否则什么都不干。Java中的主要函数有:\n- `UNSAFE.compareAndSwapObject(this, nextOffset, cmp, val);`\n- `UNSAFE.putObject(this, itemOffset, item);`\n2. volatile 不使用CPU缓存。\n3. AQS(AbstractQueuedSynchronized) 基于前面两种技术，主要用于加锁，例如'ReentrantLock`\n\n这里简单描述，细节自行网上查找，每一个都是一个长篇文章。\n\nJava 1.0\n---\n1. Vector\n2. HashTable\n\n已不推荐使用，记住是线程安全，效率低下即可。\n\nJava 1.2\n---\n由于线程安全容器的效率低下，所以推出线程不安全，但效率高的容器，同步由用户控制。\n\n1. `ArrayList` 使用数据结构`数组`，有自动扩容的功能。\n2. `LinkedList` 使用数据结构`链表`，是一个双向`链表`，所以拥有队列和栈的功能\n3. `HashMap` 使用数据结构`哈希表`，要点是如何取哈希值，哈希冲突如何解决。\n\n\t * This map usually acts as a binned (bucketed) hash table, but\n     * when bins get too large, they are transformed into bins of\n     * TreeNodes, each structured similarly to those in\n     * java.util.TreeMap\n     未细看源码，我的理解是，有哈希冲突时，数据放在一个桶里，当这个桶过大时，将其转化为类似TreeMap的树。\n\n4. `TreeMap` 使用数据结构`红黑树`，由于能根据大小保持顺序，所以key需要继承自`Comparable`或者创建时提供`Comparator`。\n5. `LinkedHashMap` 继承自HashMap，通用实现`LinkedHashIterator`等内部类，拥有了按插入顺序访问和LRU功能。\n6. `HashSet` 使用HashMap实现(组合形式，非继承),所有的`value`为`private static final Object PRESENT = new Object();`\n7. `TreeSet` 默认使用TreeMap实现，创建时，也可以指定实现`NavigableMap`接口的类。同样`value`也为`PRESENT`\n\n\nJava 1.4\n---\n1. `LinkedHashSet` 继承自`HashSet`,好像没有添加什么新功能，源码里基本都是构造函数?_?。\n\nJava 1.5\n---\n在1.5版本里，推出线程安全，阻塞的容器(Blocking系列)，使用1.5中的新锁。还有线程安全，非阻塞容器(Concurrent系列)，使用CAS技术。分别对应于悲观锁和乐观锁思想。\n\n1. `PriorityQueue` 优先队列，使用了数据结构`堆`(非内存中的堆)\n2. `ArrayBlockingQueue` 使用数据结构`数组`，固定大小，线程安全，循环使用，不存在移动元素的情况，修改时，使用`ReentrantLock`进行加锁。\n3. `LinkedBlockingQueue` 使用数据结构`单向链表`，使用`双锁队列`算法，固定大小，线程安全。`offer`和`take`使用不同的锁。使用到`ReetrantLock`和`Condition`。\n4. `LinkedBlockingDeque` 使用数据结构`双向链表`，固定大小，线程安全。单锁，使用`ReentrantLock`加锁。\n5. `PriorityBlockingQueue` 使用数据结构`堆`，固定大小，线程安全。单锁，使用`ReentrantLock`加锁。\n6. `ConcurrentLinkedQueue` 使用数据结构`链表`，应该是基于这篇论文[《Simple, Fast, and Practical Non-Blocking and Blocking Concurrent Queue Algorithms》](https://www.research.ibm.com/people/m/michael/podc-1996.pdf)修改而来。依赖`CAS`，线程安全。\n7. `ConcurrentHashMap` 使用数据结构`哈希表`，依赖`CAS`，线程安全。有点不同的时，发生冲突时，使用`synchronized(f)`同步代码块，估计是树的调整比较麻烦。\n\n\nJava 1.6\n---\n1.5中并没有提供`TreeMap`对应的并发版本，如果像`ConcurrentHashMap`一样，直接同步整个代码块，还不如将这个操作交给用户。\n`红黑树`在并发中，有一个问题，发生变动时，需要修改的值较多，情况也变多。用无锁设计，情况将变的复杂起来。`跳表`功能与`红黑树`相似，修改相对较少，方便实现无锁设计(源码中的不同情况还是有点多...)，跳表存在的问题是，有多级索引，占用空间过多(空间换时间)。\n1. `ConcurrentSkipListMap` 使用数据结构`跳表`,依赖`CAS`，线程安全。\n2. `ConcurrentSkipListSet` 跟之前一样`Set`又使用对应版本的Map。默认使用`ConcurrentSkipListMap`或者指定实现`ConcurrentNavigableMap`接口的类。线程安全。\n\n\nJava 1.7\n---\n1. `ConcurrentLinkedDeque` 使用数据结构`双向链表`，与`ConcurrentLinkedQueue`类似。\n\n","slug":"2017-06-30-javacollection","date":"2018-11-05T06:35:56.151Z","updated":"2018-12-24T12:02:34.732Z","_id":"cjq0w6f19000r3292yif6dsco","comments":1,"photos":[],"link":"","content":"<h1 id=\"Java容器简介\"><a href=\"#Java容器简介\" class=\"headerlink\" title=\"Java容器简介\"></a>Java容器简介</h1><p>描述顺序按版本来，如有遗漏，欢迎补充</p>\n<h2 id=\"使用到的数据结构\"><a href=\"#使用到的数据结构\" class=\"headerlink\" title=\"使用到的数据结构\"></a>使用到的数据结构</h2><ol>\n<li>数组</li>\n<li>链表</li>\n<li>哈希表</li>\n<li>Map</li>\n<li>红黑树</li>\n<li>跳表</li>\n<li>堆</li>\n</ol>\n<p>如果对以上数据结构不了解，建议翻看《数据结构》，都是基础知识点，学完之后，再看容器，就会感觉一目了然。<br>建议把二叉搜索树的整个系列都学习下，包括<code>B+, B-,B*, AVL，红黑树</code>。（虽然我看完忘的干干净净，但我觉得可以影响你的思考方式)</p>\n<h2 id=\"依赖的技术\"><a href=\"#依赖的技术\" class=\"headerlink\" title=\"依赖的技术\"></a>依赖的技术</h2><ol>\n<li>CAS(Compare and Swap) 如果与预期值相同，那么就交换，否则什么都不干。Java中的主要函数有:</li>\n</ol>\n<ul>\n<li><code>UNSAFE.compareAndSwapObject(this, nextOffset, cmp, val);</code></li>\n<li><code>UNSAFE.putObject(this, itemOffset, item);</code></li>\n</ul>\n<ol start=\"2\">\n<li>volatile 不使用CPU缓存。</li>\n<li>AQS(AbstractQueuedSynchronized) 基于前面两种技术，主要用于加锁，例如’ReentrantLock`</li>\n</ol>\n<p>这里简单描述，细节自行网上查找，每一个都是一个长篇文章。</p>\n<h2 id=\"Java-1-0\"><a href=\"#Java-1-0\" class=\"headerlink\" title=\"Java 1.0\"></a>Java 1.0</h2><ol>\n<li>Vector</li>\n<li>HashTable</li>\n</ol>\n<p>已不推荐使用，记住是线程安全，效率低下即可。</p>\n<h2 id=\"Java-1-2\"><a href=\"#Java-1-2\" class=\"headerlink\" title=\"Java 1.2\"></a>Java 1.2</h2><p>由于线程安全容器的效率低下，所以推出线程不安全，但效率高的容器，同步由用户控制。</p>\n<ol>\n<li><code>ArrayList</code> 使用数据结构<code>数组</code>，有自动扩容的功能。</li>\n<li><code>LinkedList</code> 使用数据结构<code>链表</code>，是一个双向<code>链表</code>，所以拥有队列和栈的功能</li>\n<li><p><code>HashMap</code> 使用数据结构<code>哈希表</code>，要点是如何取哈希值，哈希冲突如何解决。</p>\n<ul>\n<li>This map usually acts as a binned (bucketed) hash table, but</li>\n<li>when bins get too large, they are transformed into bins of</li>\n<li>TreeNodes, each structured similarly to those in</li>\n<li>java.util.TreeMap<br>未细看源码，我的理解是，有哈希冲突时，数据放在一个桶里，当这个桶过大时，将其转化为类似TreeMap的树。</li>\n</ul>\n</li>\n<li><p><code>TreeMap</code> 使用数据结构<code>红黑树</code>，由于能根据大小保持顺序，所以key需要继承自<code>Comparable</code>或者创建时提供<code>Comparator</code>。</p>\n</li>\n<li><code>LinkedHashMap</code> 继承自HashMap，通用实现<code>LinkedHashIterator</code>等内部类，拥有了按插入顺序访问和LRU功能。</li>\n<li><code>HashSet</code> 使用HashMap实现(组合形式，非继承),所有的<code>value</code>为<code>private static final Object PRESENT = new Object();</code></li>\n<li><code>TreeSet</code> 默认使用TreeMap实现，创建时，也可以指定实现<code>NavigableMap</code>接口的类。同样<code>value</code>也为<code>PRESENT</code></li>\n</ol>\n<h2 id=\"Java-1-4\"><a href=\"#Java-1-4\" class=\"headerlink\" title=\"Java 1.4\"></a>Java 1.4</h2><ol>\n<li><code>LinkedHashSet</code> 继承自<code>HashSet</code>,好像没有添加什么新功能，源码里基本都是构造函数?_?。</li>\n</ol>\n<h2 id=\"Java-1-5\"><a href=\"#Java-1-5\" class=\"headerlink\" title=\"Java 1.5\"></a>Java 1.5</h2><p>在1.5版本里，推出线程安全，阻塞的容器(Blocking系列)，使用1.5中的新锁。还有线程安全，非阻塞容器(Concurrent系列)，使用CAS技术。分别对应于悲观锁和乐观锁思想。</p>\n<ol>\n<li><code>PriorityQueue</code> 优先队列，使用了数据结构<code>堆</code>(非内存中的堆)</li>\n<li><code>ArrayBlockingQueue</code> 使用数据结构<code>数组</code>，固定大小，线程安全，循环使用，不存在移动元素的情况，修改时，使用<code>ReentrantLock</code>进行加锁。</li>\n<li><code>LinkedBlockingQueue</code> 使用数据结构<code>单向链表</code>，使用<code>双锁队列</code>算法，固定大小，线程安全。<code>offer</code>和<code>take</code>使用不同的锁。使用到<code>ReetrantLock</code>和<code>Condition</code>。</li>\n<li><code>LinkedBlockingDeque</code> 使用数据结构<code>双向链表</code>，固定大小，线程安全。单锁，使用<code>ReentrantLock</code>加锁。</li>\n<li><code>PriorityBlockingQueue</code> 使用数据结构<code>堆</code>，固定大小，线程安全。单锁，使用<code>ReentrantLock</code>加锁。</li>\n<li><code>ConcurrentLinkedQueue</code> 使用数据结构<code>链表</code>，应该是基于这篇论文<a href=\"https://www.research.ibm.com/people/m/michael/podc-1996.pdf\" target=\"_blank\" rel=\"noopener\">《Simple, Fast, and Practical Non-Blocking and Blocking Concurrent Queue Algorithms》</a>修改而来。依赖<code>CAS</code>，线程安全。</li>\n<li><code>ConcurrentHashMap</code> 使用数据结构<code>哈希表</code>，依赖<code>CAS</code>，线程安全。有点不同的时，发生冲突时，使用<code>synchronized(f)</code>同步代码块，估计是树的调整比较麻烦。</li>\n</ol>\n<h2 id=\"Java-1-6\"><a href=\"#Java-1-6\" class=\"headerlink\" title=\"Java 1.6\"></a>Java 1.6</h2><p>1.5中并没有提供<code>TreeMap</code>对应的并发版本，如果像<code>ConcurrentHashMap</code>一样，直接同步整个代码块，还不如将这个操作交给用户。<br><code>红黑树</code>在并发中，有一个问题，发生变动时，需要修改的值较多，情况也变多。用无锁设计，情况将变的复杂起来。<code>跳表</code>功能与<code>红黑树</code>相似，修改相对较少，方便实现无锁设计(源码中的不同情况还是有点多…)，跳表存在的问题是，有多级索引，占用空间过多(空间换时间)。</p>\n<ol>\n<li><code>ConcurrentSkipListMap</code> 使用数据结构<code>跳表</code>,依赖<code>CAS</code>，线程安全。</li>\n<li><code>ConcurrentSkipListSet</code> 跟之前一样<code>Set</code>又使用对应版本的Map。默认使用<code>ConcurrentSkipListMap</code>或者指定实现<code>ConcurrentNavigableMap</code>接口的类。线程安全。</li>\n</ol>\n<h2 id=\"Java-1-7\"><a href=\"#Java-1-7\" class=\"headerlink\" title=\"Java 1.7\"></a>Java 1.7</h2><ol>\n<li><code>ConcurrentLinkedDeque</code> 使用数据结构<code>双向链表</code>，与<code>ConcurrentLinkedQueue</code>类似。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Java容器简介\"><a href=\"#Java容器简介\" class=\"headerlink\" title=\"Java容器简介\"></a>Java容器简介</h1><p>描述顺序按版本来，如有遗漏，欢迎补充</p>\n<h2 id=\"使用到的数据结构\"><a href=\"#使用到的数据结构\" class=\"headerlink\" title=\"使用到的数据结构\"></a>使用到的数据结构</h2><ol>\n<li>数组</li>\n<li>链表</li>\n<li>哈希表</li>\n<li>Map</li>\n<li>红黑树</li>\n<li>跳表</li>\n<li>堆</li>\n</ol>\n<p>如果对以上数据结构不了解，建议翻看《数据结构》，都是基础知识点，学完之后，再看容器，就会感觉一目了然。<br>建议把二叉搜索树的整个系列都学习下，包括<code>B+, B-,B*, AVL，红黑树</code>。（虽然我看完忘的干干净净，但我觉得可以影响你的思考方式)</p>\n<h2 id=\"依赖的技术\"><a href=\"#依赖的技术\" class=\"headerlink\" title=\"依赖的技术\"></a>依赖的技术</h2><ol>\n<li>CAS(Compare and Swap) 如果与预期值相同，那么就交换，否则什么都不干。Java中的主要函数有:</li>\n</ol>\n<ul>\n<li><code>UNSAFE.compareAndSwapObject(this, nextOffset, cmp, val);</code></li>\n<li><code>UNSAFE.putObject(this, itemOffset, item);</code></li>\n</ul>\n<ol start=\"2\">\n<li>volatile 不使用CPU缓存。</li>\n<li>AQS(AbstractQueuedSynchronized) 基于前面两种技术，主要用于加锁，例如’ReentrantLock`</li>\n</ol>\n<p>这里简单描述，细节自行网上查找，每一个都是一个长篇文章。</p>\n<h2 id=\"Java-1-0\"><a href=\"#Java-1-0\" class=\"headerlink\" title=\"Java 1.0\"></a>Java 1.0</h2><ol>\n<li>Vector</li>\n<li>HashTable</li>\n</ol>\n<p>已不推荐使用，记住是线程安全，效率低下即可。</p>\n<h2 id=\"Java-1-2\"><a href=\"#Java-1-2\" class=\"headerlink\" title=\"Java 1.2\"></a>Java 1.2</h2><p>由于线程安全容器的效率低下，所以推出线程不安全，但效率高的容器，同步由用户控制。</p>\n<ol>\n<li><code>ArrayList</code> 使用数据结构<code>数组</code>，有自动扩容的功能。</li>\n<li><code>LinkedList</code> 使用数据结构<code>链表</code>，是一个双向<code>链表</code>，所以拥有队列和栈的功能</li>\n<li><p><code>HashMap</code> 使用数据结构<code>哈希表</code>，要点是如何取哈希值，哈希冲突如何解决。</p>\n<ul>\n<li>This map usually acts as a binned (bucketed) hash table, but</li>\n<li>when bins get too large, they are transformed into bins of</li>\n<li>TreeNodes, each structured similarly to those in</li>\n<li>java.util.TreeMap<br>未细看源码，我的理解是，有哈希冲突时，数据放在一个桶里，当这个桶过大时，将其转化为类似TreeMap的树。</li>\n</ul>\n</li>\n<li><p><code>TreeMap</code> 使用数据结构<code>红黑树</code>，由于能根据大小保持顺序，所以key需要继承自<code>Comparable</code>或者创建时提供<code>Comparator</code>。</p>\n</li>\n<li><code>LinkedHashMap</code> 继承自HashMap，通用实现<code>LinkedHashIterator</code>等内部类，拥有了按插入顺序访问和LRU功能。</li>\n<li><code>HashSet</code> 使用HashMap实现(组合形式，非继承),所有的<code>value</code>为<code>private static final Object PRESENT = new Object();</code></li>\n<li><code>TreeSet</code> 默认使用TreeMap实现，创建时，也可以指定实现<code>NavigableMap</code>接口的类。同样<code>value</code>也为<code>PRESENT</code></li>\n</ol>\n<h2 id=\"Java-1-4\"><a href=\"#Java-1-4\" class=\"headerlink\" title=\"Java 1.4\"></a>Java 1.4</h2><ol>\n<li><code>LinkedHashSet</code> 继承自<code>HashSet</code>,好像没有添加什么新功能，源码里基本都是构造函数?_?。</li>\n</ol>\n<h2 id=\"Java-1-5\"><a href=\"#Java-1-5\" class=\"headerlink\" title=\"Java 1.5\"></a>Java 1.5</h2><p>在1.5版本里，推出线程安全，阻塞的容器(Blocking系列)，使用1.5中的新锁。还有线程安全，非阻塞容器(Concurrent系列)，使用CAS技术。分别对应于悲观锁和乐观锁思想。</p>\n<ol>\n<li><code>PriorityQueue</code> 优先队列，使用了数据结构<code>堆</code>(非内存中的堆)</li>\n<li><code>ArrayBlockingQueue</code> 使用数据结构<code>数组</code>，固定大小，线程安全，循环使用，不存在移动元素的情况，修改时，使用<code>ReentrantLock</code>进行加锁。</li>\n<li><code>LinkedBlockingQueue</code> 使用数据结构<code>单向链表</code>，使用<code>双锁队列</code>算法，固定大小，线程安全。<code>offer</code>和<code>take</code>使用不同的锁。使用到<code>ReetrantLock</code>和<code>Condition</code>。</li>\n<li><code>LinkedBlockingDeque</code> 使用数据结构<code>双向链表</code>，固定大小，线程安全。单锁，使用<code>ReentrantLock</code>加锁。</li>\n<li><code>PriorityBlockingQueue</code> 使用数据结构<code>堆</code>，固定大小，线程安全。单锁，使用<code>ReentrantLock</code>加锁。</li>\n<li><code>ConcurrentLinkedQueue</code> 使用数据结构<code>链表</code>，应该是基于这篇论文<a href=\"https://www.research.ibm.com/people/m/michael/podc-1996.pdf\" target=\"_blank\" rel=\"noopener\">《Simple, Fast, and Practical Non-Blocking and Blocking Concurrent Queue Algorithms》</a>修改而来。依赖<code>CAS</code>，线程安全。</li>\n<li><code>ConcurrentHashMap</code> 使用数据结构<code>哈希表</code>，依赖<code>CAS</code>，线程安全。有点不同的时，发生冲突时，使用<code>synchronized(f)</code>同步代码块，估计是树的调整比较麻烦。</li>\n</ol>\n<h2 id=\"Java-1-6\"><a href=\"#Java-1-6\" class=\"headerlink\" title=\"Java 1.6\"></a>Java 1.6</h2><p>1.5中并没有提供<code>TreeMap</code>对应的并发版本，如果像<code>ConcurrentHashMap</code>一样，直接同步整个代码块，还不如将这个操作交给用户。<br><code>红黑树</code>在并发中，有一个问题，发生变动时，需要修改的值较多，情况也变多。用无锁设计，情况将变的复杂起来。<code>跳表</code>功能与<code>红黑树</code>相似，修改相对较少，方便实现无锁设计(源码中的不同情况还是有点多…)，跳表存在的问题是，有多级索引，占用空间过多(空间换时间)。</p>\n<ol>\n<li><code>ConcurrentSkipListMap</code> 使用数据结构<code>跳表</code>,依赖<code>CAS</code>，线程安全。</li>\n<li><code>ConcurrentSkipListSet</code> 跟之前一样<code>Set</code>又使用对应版本的Map。默认使用<code>ConcurrentSkipListMap</code>或者指定实现<code>ConcurrentNavigableMap</code>接口的类。线程安全。</li>\n</ol>\n<h2 id=\"Java-1-7\"><a href=\"#Java-1-7\" class=\"headerlink\" title=\"Java 1.7\"></a>Java 1.7</h2><ol>\n<li><code>ConcurrentLinkedDeque</code> 使用数据结构<code>双向链表</code>，与<code>ConcurrentLinkedQueue</code>类似。</li>\n</ol>\n"},{"layout":"post","title":"我在cocos官网发布的文章合集","published":1,"_content":"\n前言\n===\n\n这篇文章记录的是早期被cocos发表在官网首页的文章。虽然水分较多，干货还是有点，当作记录学习cocos的历程吧。都是\n先在csdn博客写完，然后被转过去。懒得移过来，就留个地址。(在csdn的水分太多，已不忍直视)\n\n---\n\n伪立体菜单\n===\n第一篇文章已经是一年半以前，感慨万千，新人已成老司机，创业依旧未成    \n[伪立体菜单](http://blog.csdn.net/ccy0815ccy/article/details/41519767)    \n![pic1](/images/cocos/rotateMenu.gif)\n\n---\n\n类似LOL的皮肤选择菜单\n===\n因为弄了几张漂亮的图片，在官网的阅读量居然有几万，很长一段时间作为某个版块的封面 ^^    \n[LOL菜单](http://blog.csdn.net/ccy0815ccy/article/details/43924895)     \n![pic2](/images/cocos/lolMenu.gif)\n\n---\n\n英雄难过棍子关\n===\n因为触控一直在力推js，于是用js写个小游戏感觉一下。写完之后不觉得哪里好...    \n[英雄难过棍子关](http://www.cocos.com/doc/tutorial/show?id=2943)    \n![pic3](/images/cocos/heroLevel.gif)\n\n待补充...\n","source":"_posts/2016-04-03-articleincocos.markdown","raw":"---\nlayout: post\ntitle: 我在cocos官网发布的文章合集\npublished: true\ncategories: cocos\ntags: cocos\n---\n\n前言\n===\n\n这篇文章记录的是早期被cocos发表在官网首页的文章。虽然水分较多，干货还是有点，当作记录学习cocos的历程吧。都是\n先在csdn博客写完，然后被转过去。懒得移过来，就留个地址。(在csdn的水分太多，已不忍直视)\n\n---\n\n伪立体菜单\n===\n第一篇文章已经是一年半以前，感慨万千，新人已成老司机，创业依旧未成    \n[伪立体菜单](http://blog.csdn.net/ccy0815ccy/article/details/41519767)    \n![pic1](/images/cocos/rotateMenu.gif)\n\n---\n\n类似LOL的皮肤选择菜单\n===\n因为弄了几张漂亮的图片，在官网的阅读量居然有几万，很长一段时间作为某个版块的封面 ^^    \n[LOL菜单](http://blog.csdn.net/ccy0815ccy/article/details/43924895)     \n![pic2](/images/cocos/lolMenu.gif)\n\n---\n\n英雄难过棍子关\n===\n因为触控一直在力推js，于是用js写个小游戏感觉一下。写完之后不觉得哪里好...    \n[英雄难过棍子关](http://www.cocos.com/doc/tutorial/show?id=2943)    \n![pic3](/images/cocos/heroLevel.gif)\n\n待补充...\n","slug":"2016-04-03-articleincocos","date":"2018-12-24T11:17:03.380Z","updated":"2018-12-24T11:56:31.790Z","_id":"cjq0w6f1d000t3292az2lhrdl","comments":1,"photos":[],"link":"","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>这篇文章记录的是早期被cocos发表在官网首页的文章。虽然水分较多，干货还是有点，当作记录学习cocos的历程吧。都是<br>先在csdn博客写完，然后被转过去。懒得移过来，就留个地址。(在csdn的水分太多，已不忍直视)</p>\n<hr>\n<h1 id=\"伪立体菜单\"><a href=\"#伪立体菜单\" class=\"headerlink\" title=\"伪立体菜单\"></a>伪立体菜单</h1><p>第一篇文章已经是一年半以前，感慨万千，新人已成老司机，创业依旧未成<br><a href=\"http://blog.csdn.net/ccy0815ccy/article/details/41519767\" target=\"_blank\" rel=\"noopener\">伪立体菜单</a><br><img src=\"/images/cocos/rotateMenu.gif\" alt=\"pic1\"></p>\n<hr>\n<h1 id=\"类似LOL的皮肤选择菜单\"><a href=\"#类似LOL的皮肤选择菜单\" class=\"headerlink\" title=\"类似LOL的皮肤选择菜单\"></a>类似LOL的皮肤选择菜单</h1><p>因为弄了几张漂亮的图片，在官网的阅读量居然有几万，很长一段时间作为某个版块的封面 ^^<br><a href=\"http://blog.csdn.net/ccy0815ccy/article/details/43924895\" target=\"_blank\" rel=\"noopener\">LOL菜单</a><br><img src=\"/images/cocos/lolMenu.gif\" alt=\"pic2\"></p>\n<hr>\n<h1 id=\"英雄难过棍子关\"><a href=\"#英雄难过棍子关\" class=\"headerlink\" title=\"英雄难过棍子关\"></a>英雄难过棍子关</h1><p>因为触控一直在力推js，于是用js写个小游戏感觉一下。写完之后不觉得哪里好…<br><a href=\"http://www.cocos.com/doc/tutorial/show?id=2943\" target=\"_blank\" rel=\"noopener\">英雄难过棍子关</a><br><img src=\"/images/cocos/heroLevel.gif\" alt=\"pic3\"></p>\n<p>待补充…</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>这篇文章记录的是早期被cocos发表在官网首页的文章。虽然水分较多，干货还是有点，当作记录学习cocos的历程吧。都是<br>先在csdn博客写完，然后被转过去。懒得移过来，就留个地址。(在csdn的水分太多，已不忍直视)</p>\n<hr>\n<h1 id=\"伪立体菜单\"><a href=\"#伪立体菜单\" class=\"headerlink\" title=\"伪立体菜单\"></a>伪立体菜单</h1><p>第一篇文章已经是一年半以前，感慨万千，新人已成老司机，创业依旧未成<br><a href=\"http://blog.csdn.net/ccy0815ccy/article/details/41519767\" target=\"_blank\" rel=\"noopener\">伪立体菜单</a><br><img src=\"/images/cocos/rotateMenu.gif\" alt=\"pic1\"></p>\n<hr>\n<h1 id=\"类似LOL的皮肤选择菜单\"><a href=\"#类似LOL的皮肤选择菜单\" class=\"headerlink\" title=\"类似LOL的皮肤选择菜单\"></a>类似LOL的皮肤选择菜单</h1><p>因为弄了几张漂亮的图片，在官网的阅读量居然有几万，很长一段时间作为某个版块的封面 ^^<br><a href=\"http://blog.csdn.net/ccy0815ccy/article/details/43924895\" target=\"_blank\" rel=\"noopener\">LOL菜单</a><br><img src=\"/images/cocos/lolMenu.gif\" alt=\"pic2\"></p>\n<hr>\n<h1 id=\"英雄难过棍子关\"><a href=\"#英雄难过棍子关\" class=\"headerlink\" title=\"英雄难过棍子关\"></a>英雄难过棍子关</h1><p>因为触控一直在力推js，于是用js写个小游戏感觉一下。写完之后不觉得哪里好…<br><a href=\"http://www.cocos.com/doc/tutorial/show?id=2943\" target=\"_blank\" rel=\"noopener\">英雄难过棍子关</a><br><img src=\"/images/cocos/heroLevel.gif\" alt=\"pic3\"></p>\n<p>待补充…</p>\n"},{"layout":"post","title":"小说开发-第二章-图片收藏分享","published":1,"_content":"\n# 第二章 图片分享收藏等功能\n\n## 腾讯云储存图片\n腾讯云有免费的每个月`50G`流量，阿里云没有免费流量，推荐尝试腾讯云。如果图片存自己服务器，硬盘和宽带要爆炸，直接丢在CDN，图片名为MD5值，本地只保存这个MD5。参考[腾讯云文档](https://www.qcloud.com/document/product/436/6273)配置，基本未遇到问题。我的`res.ccyblog.com`域名没有证书，配置图片地址时，不能使用`//`开头，因为部分浏览器可能无法访问图片。\n`待优化：`制作略缩图，加快浏览速度\n\n## 图片信息redis缓存\n上传图片所有人都能看到，访问频率高，图片信息用redis缓存。有新图片上传的时候，`CacheEvict`注解的`allEntries`设置为`true`，清空缓存。如果不清空，也要显示指定`key`，因为默认会将参数序列化作为`key`。可能会比较大，并且增加序列化配置工作。\n\n## 利用AspectJ记录登录日志\n为加强安全方面工作，对于尝试登录，登录成功，登录失败都进行记录，并不修改已有逻辑\n**问题描述：**添加`<aop:aspectj-autoproxy/>`自动代理后，所有有shiro注解的Controller都会访问不到。\n**原因：**没有将`proxy-target-class`设置`true`\n**解决办法：**网上找到一个原因是没有将`proxy-target-class`设置为`true`，我设置成`true`后，没有效果。仔细检查配置核对后，`aspectj`配置没有问题，`shiro`配置出问题。 `shiro`的开启注解配置也有一个自动代理，也需要设置为`true`\n\n## 利用Http Invoker提供第三方登录服务\n分离出登录模块，登录采用http Invoker形式登录，以后所有应用可以使用。\n**问题描述**：无法远程调用，一直提示`404`\n**原因**:不论是`Hessian`和`Burlap`，都有使用到`SimpleUrlHandlerMapping`，这个`url`的优先级比所有的`RequestMapping`都低。之前为`404`配置一个`*`路径。所有永远找不到\n**解决办法**:`404`页面的配置修改成`error-page`\n\n## 利用RabbitMQ发布登录信息\n提供给需要用户相关信息的模块使用。建议开启`RabbitMQ`的后台管理插件，方便查看管理。\n> rabbitmq-plugins enable rabbitmq_management\n\n## 开放测试接口\n#### redis\n**地址:**106.14.172.54\n**端口:**5551\n**密码:**12345678\n**查看工具**:Redis Desktop Manager\n#### rabbit\n**地址**106.14.172.54\n**端口:**5673\n**密码:12345678**\n#### mysql\n暂不提供，会导致服务器挂掉\n\nPS: [源码地址](https://github.com/isghost/Re-Novel)","source":"_posts/2017-08-18-chapter_2.md","raw":"---\nlayout: post\ntitle: 小说开发-第二章-图片收藏分享\npublished: true\ncategories:\ntags:\n---\n\n# 第二章 图片分享收藏等功能\n\n## 腾讯云储存图片\n腾讯云有免费的每个月`50G`流量，阿里云没有免费流量，推荐尝试腾讯云。如果图片存自己服务器，硬盘和宽带要爆炸，直接丢在CDN，图片名为MD5值，本地只保存这个MD5。参考[腾讯云文档](https://www.qcloud.com/document/product/436/6273)配置，基本未遇到问题。我的`res.ccyblog.com`域名没有证书，配置图片地址时，不能使用`//`开头，因为部分浏览器可能无法访问图片。\n`待优化：`制作略缩图，加快浏览速度\n\n## 图片信息redis缓存\n上传图片所有人都能看到，访问频率高，图片信息用redis缓存。有新图片上传的时候，`CacheEvict`注解的`allEntries`设置为`true`，清空缓存。如果不清空，也要显示指定`key`，因为默认会将参数序列化作为`key`。可能会比较大，并且增加序列化配置工作。\n\n## 利用AspectJ记录登录日志\n为加强安全方面工作，对于尝试登录，登录成功，登录失败都进行记录，并不修改已有逻辑\n**问题描述：**添加`<aop:aspectj-autoproxy/>`自动代理后，所有有shiro注解的Controller都会访问不到。\n**原因：**没有将`proxy-target-class`设置`true`\n**解决办法：**网上找到一个原因是没有将`proxy-target-class`设置为`true`，我设置成`true`后，没有效果。仔细检查配置核对后，`aspectj`配置没有问题，`shiro`配置出问题。 `shiro`的开启注解配置也有一个自动代理，也需要设置为`true`\n\n## 利用Http Invoker提供第三方登录服务\n分离出登录模块，登录采用http Invoker形式登录，以后所有应用可以使用。\n**问题描述**：无法远程调用，一直提示`404`\n**原因**:不论是`Hessian`和`Burlap`，都有使用到`SimpleUrlHandlerMapping`，这个`url`的优先级比所有的`RequestMapping`都低。之前为`404`配置一个`*`路径。所有永远找不到\n**解决办法**:`404`页面的配置修改成`error-page`\n\n## 利用RabbitMQ发布登录信息\n提供给需要用户相关信息的模块使用。建议开启`RabbitMQ`的后台管理插件，方便查看管理。\n> rabbitmq-plugins enable rabbitmq_management\n\n## 开放测试接口\n#### redis\n**地址:**106.14.172.54\n**端口:**5551\n**密码:**12345678\n**查看工具**:Redis Desktop Manager\n#### rabbit\n**地址**106.14.172.54\n**端口:**5673\n**密码:12345678**\n#### mysql\n暂不提供，会导致服务器挂掉\n\nPS: [源码地址](https://github.com/isghost/Re-Novel)","slug":"2017-08-18-chapter_2","date":"2018-11-05T06:35:56.152Z","updated":"2018-12-24T12:02:34.732Z","_id":"cjq0w6f1f000v3292le9smkrs","comments":1,"photos":[],"link":"","content":"<h1 id=\"第二章-图片分享收藏等功能\"><a href=\"#第二章-图片分享收藏等功能\" class=\"headerlink\" title=\"第二章 图片分享收藏等功能\"></a>第二章 图片分享收藏等功能</h1><h2 id=\"腾讯云储存图片\"><a href=\"#腾讯云储存图片\" class=\"headerlink\" title=\"腾讯云储存图片\"></a>腾讯云储存图片</h2><p>腾讯云有免费的每个月<code>50G</code>流量，阿里云没有免费流量，推荐尝试腾讯云。如果图片存自己服务器，硬盘和宽带要爆炸，直接丢在CDN，图片名为MD5值，本地只保存这个MD5。参考<a href=\"https://www.qcloud.com/document/product/436/6273\" target=\"_blank\" rel=\"noopener\">腾讯云文档</a>配置，基本未遇到问题。我的<code>res.ccyblog.com</code>域名没有证书，配置图片地址时，不能使用<code>//</code>开头，因为部分浏览器可能无法访问图片。<br><code>待优化：</code>制作略缩图，加快浏览速度</p>\n<h2 id=\"图片信息redis缓存\"><a href=\"#图片信息redis缓存\" class=\"headerlink\" title=\"图片信息redis缓存\"></a>图片信息redis缓存</h2><p>上传图片所有人都能看到，访问频率高，图片信息用redis缓存。有新图片上传的时候，<code>CacheEvict</code>注解的<code>allEntries</code>设置为<code>true</code>，清空缓存。如果不清空，也要显示指定<code>key</code>，因为默认会将参数序列化作为<code>key</code>。可能会比较大，并且增加序列化配置工作。</p>\n<h2 id=\"利用AspectJ记录登录日志\"><a href=\"#利用AspectJ记录登录日志\" class=\"headerlink\" title=\"利用AspectJ记录登录日志\"></a>利用AspectJ记录登录日志</h2><p>为加强安全方面工作，对于尝试登录，登录成功，登录失败都进行记录，并不修改已有逻辑<br><strong>问题描述：</strong>添加<code>&lt;aop:aspectj-autoproxy/&gt;</code>自动代理后，所有有shiro注解的Controller都会访问不到。<br><strong>原因：</strong>没有将<code>proxy-target-class</code>设置<code>true</code><br><strong>解决办法：</strong>网上找到一个原因是没有将<code>proxy-target-class</code>设置为<code>true</code>，我设置成<code>true</code>后，没有效果。仔细检查配置核对后，<code>aspectj</code>配置没有问题，<code>shiro</code>配置出问题。 <code>shiro</code>的开启注解配置也有一个自动代理，也需要设置为<code>true</code></p>\n<h2 id=\"利用Http-Invoker提供第三方登录服务\"><a href=\"#利用Http-Invoker提供第三方登录服务\" class=\"headerlink\" title=\"利用Http Invoker提供第三方登录服务\"></a>利用Http Invoker提供第三方登录服务</h2><p>分离出登录模块，登录采用http Invoker形式登录，以后所有应用可以使用。<br><strong>问题描述</strong>：无法远程调用，一直提示<code>404</code><br><strong>原因</strong>:不论是<code>Hessian</code>和<code>Burlap</code>，都有使用到<code>SimpleUrlHandlerMapping</code>，这个<code>url</code>的优先级比所有的<code>RequestMapping</code>都低。之前为<code>404</code>配置一个<code>*</code>路径。所有永远找不到<br><strong>解决办法</strong>:<code>404</code>页面的配置修改成<code>error-page</code></p>\n<h2 id=\"利用RabbitMQ发布登录信息\"><a href=\"#利用RabbitMQ发布登录信息\" class=\"headerlink\" title=\"利用RabbitMQ发布登录信息\"></a>利用RabbitMQ发布登录信息</h2><p>提供给需要用户相关信息的模块使用。建议开启<code>RabbitMQ</code>的后台管理插件，方便查看管理。</p>\n<blockquote>\n<p>rabbitmq-plugins enable rabbitmq_management</p>\n</blockquote>\n<h2 id=\"开放测试接口\"><a href=\"#开放测试接口\" class=\"headerlink\" title=\"开放测试接口\"></a>开放测试接口</h2><h4 id=\"redis\"><a href=\"#redis\" class=\"headerlink\" title=\"redis\"></a>redis</h4><p><strong>地址:</strong>106.14.172.54<br><strong>端口:</strong>5551<br><strong>密码:</strong>12345678<br><strong>查看工具</strong>:Redis Desktop Manager</p>\n<h4 id=\"rabbit\"><a href=\"#rabbit\" class=\"headerlink\" title=\"rabbit\"></a>rabbit</h4><p><strong>地址</strong>106.14.172.54<br><strong>端口:</strong>5673<br><strong>密码:12345678</strong></p>\n<h4 id=\"mysql\"><a href=\"#mysql\" class=\"headerlink\" title=\"mysql\"></a>mysql</h4><p>暂不提供，会导致服务器挂掉</p>\n<p>PS: <a href=\"https://github.com/isghost/Re-Novel\" target=\"_blank\" rel=\"noopener\">源码地址</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"第二章-图片分享收藏等功能\"><a href=\"#第二章-图片分享收藏等功能\" class=\"headerlink\" title=\"第二章 图片分享收藏等功能\"></a>第二章 图片分享收藏等功能</h1><h2 id=\"腾讯云储存图片\"><a href=\"#腾讯云储存图片\" class=\"headerlink\" title=\"腾讯云储存图片\"></a>腾讯云储存图片</h2><p>腾讯云有免费的每个月<code>50G</code>流量，阿里云没有免费流量，推荐尝试腾讯云。如果图片存自己服务器，硬盘和宽带要爆炸，直接丢在CDN，图片名为MD5值，本地只保存这个MD5。参考<a href=\"https://www.qcloud.com/document/product/436/6273\" target=\"_blank\" rel=\"noopener\">腾讯云文档</a>配置，基本未遇到问题。我的<code>res.ccyblog.com</code>域名没有证书，配置图片地址时，不能使用<code>//</code>开头，因为部分浏览器可能无法访问图片。<br><code>待优化：</code>制作略缩图，加快浏览速度</p>\n<h2 id=\"图片信息redis缓存\"><a href=\"#图片信息redis缓存\" class=\"headerlink\" title=\"图片信息redis缓存\"></a>图片信息redis缓存</h2><p>上传图片所有人都能看到，访问频率高，图片信息用redis缓存。有新图片上传的时候，<code>CacheEvict</code>注解的<code>allEntries</code>设置为<code>true</code>，清空缓存。如果不清空，也要显示指定<code>key</code>，因为默认会将参数序列化作为<code>key</code>。可能会比较大，并且增加序列化配置工作。</p>\n<h2 id=\"利用AspectJ记录登录日志\"><a href=\"#利用AspectJ记录登录日志\" class=\"headerlink\" title=\"利用AspectJ记录登录日志\"></a>利用AspectJ记录登录日志</h2><p>为加强安全方面工作，对于尝试登录，登录成功，登录失败都进行记录，并不修改已有逻辑<br><strong>问题描述：</strong>添加<code>&lt;aop:aspectj-autoproxy/&gt;</code>自动代理后，所有有shiro注解的Controller都会访问不到。<br><strong>原因：</strong>没有将<code>proxy-target-class</code>设置<code>true</code><br><strong>解决办法：</strong>网上找到一个原因是没有将<code>proxy-target-class</code>设置为<code>true</code>，我设置成<code>true</code>后，没有效果。仔细检查配置核对后，<code>aspectj</code>配置没有问题，<code>shiro</code>配置出问题。 <code>shiro</code>的开启注解配置也有一个自动代理，也需要设置为<code>true</code></p>\n<h2 id=\"利用Http-Invoker提供第三方登录服务\"><a href=\"#利用Http-Invoker提供第三方登录服务\" class=\"headerlink\" title=\"利用Http Invoker提供第三方登录服务\"></a>利用Http Invoker提供第三方登录服务</h2><p>分离出登录模块，登录采用http Invoker形式登录，以后所有应用可以使用。<br><strong>问题描述</strong>：无法远程调用，一直提示<code>404</code><br><strong>原因</strong>:不论是<code>Hessian</code>和<code>Burlap</code>，都有使用到<code>SimpleUrlHandlerMapping</code>，这个<code>url</code>的优先级比所有的<code>RequestMapping</code>都低。之前为<code>404</code>配置一个<code>*</code>路径。所有永远找不到<br><strong>解决办法</strong>:<code>404</code>页面的配置修改成<code>error-page</code></p>\n<h2 id=\"利用RabbitMQ发布登录信息\"><a href=\"#利用RabbitMQ发布登录信息\" class=\"headerlink\" title=\"利用RabbitMQ发布登录信息\"></a>利用RabbitMQ发布登录信息</h2><p>提供给需要用户相关信息的模块使用。建议开启<code>RabbitMQ</code>的后台管理插件，方便查看管理。</p>\n<blockquote>\n<p>rabbitmq-plugins enable rabbitmq_management</p>\n</blockquote>\n<h2 id=\"开放测试接口\"><a href=\"#开放测试接口\" class=\"headerlink\" title=\"开放测试接口\"></a>开放测试接口</h2><h4 id=\"redis\"><a href=\"#redis\" class=\"headerlink\" title=\"redis\"></a>redis</h4><p><strong>地址:</strong>106.14.172.54<br><strong>端口:</strong>5551<br><strong>密码:</strong>12345678<br><strong>查看工具</strong>:Redis Desktop Manager</p>\n<h4 id=\"rabbit\"><a href=\"#rabbit\" class=\"headerlink\" title=\"rabbit\"></a>rabbit</h4><p><strong>地址</strong>106.14.172.54<br><strong>端口:</strong>5673<br><strong>密码:12345678</strong></p>\n<h4 id=\"mysql\"><a href=\"#mysql\" class=\"headerlink\" title=\"mysql\"></a>mysql</h4><p>暂不提供，会导致服务器挂掉</p>\n<p>PS: <a href=\"https://github.com/isghost/Re-Novel\" target=\"_blank\" rel=\"noopener\">源码地址</a></p>\n"},{"layout":"post","title":"开心消消乐开发计划","published":0,"_content":"\n功能点划分\n=====\n1. 基础玩法\n2. 爆炸种类添加\n3. 背景格子生成(空白区域)，即不规则的背景\n4. 新动物移动方式(与3相对应)\n5. 背景格子生成(有动物，比如冰块)\n6. 占位格子生成(无动物，比如积雪)\n7. 前景格子生成(挡住动作的草)\n8. 添加关卡地图\n9. 关卡保存格式(添加关卡编辑器)\n10. 添加通关条件--分数\n11. 添加通关条件--动物\n12. 添加通关条件--冰块\n13. 添加通关条件--收集豌豆\n","source":"_posts/2016-10-02-crush.markdown","raw":"---\nlayout: post\ntitle: \"开心消消乐开发计划\"\npublished: false\ncategories:\ntags:\n---\n\n功能点划分\n=====\n1. 基础玩法\n2. 爆炸种类添加\n3. 背景格子生成(空白区域)，即不规则的背景\n4. 新动物移动方式(与3相对应)\n5. 背景格子生成(有动物，比如冰块)\n6. 占位格子生成(无动物，比如积雪)\n7. 前景格子生成(挡住动作的草)\n8. 添加关卡地图\n9. 关卡保存格式(添加关卡编辑器)\n10. 添加通关条件--分数\n11. 添加通关条件--动物\n12. 添加通关条件--冰块\n13. 添加通关条件--收集豌豆\n","slug":"2016-10-02-crush","date":"2018-11-05T06:35:56.148Z","updated":"2018-12-24T12:02:34.732Z","_id":"cjq0w6f1h000y3292kd6cz62r","comments":1,"photos":[],"link":"","content":"<h1 id=\"功能点划分\"><a href=\"#功能点划分\" class=\"headerlink\" title=\"功能点划分\"></a>功能点划分</h1><ol>\n<li>基础玩法</li>\n<li>爆炸种类添加</li>\n<li>背景格子生成(空白区域)，即不规则的背景</li>\n<li>新动物移动方式(与3相对应)</li>\n<li>背景格子生成(有动物，比如冰块)</li>\n<li>占位格子生成(无动物，比如积雪)</li>\n<li>前景格子生成(挡住动作的草)</li>\n<li>添加关卡地图</li>\n<li>关卡保存格式(添加关卡编辑器)</li>\n<li>添加通关条件–分数</li>\n<li>添加通关条件–动物</li>\n<li>添加通关条件–冰块</li>\n<li>添加通关条件–收集豌豆</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"功能点划分\"><a href=\"#功能点划分\" class=\"headerlink\" title=\"功能点划分\"></a>功能点划分</h1><ol>\n<li>基础玩法</li>\n<li>爆炸种类添加</li>\n<li>背景格子生成(空白区域)，即不规则的背景</li>\n<li>新动物移动方式(与3相对应)</li>\n<li>背景格子生成(有动物，比如冰块)</li>\n<li>占位格子生成(无动物，比如积雪)</li>\n<li>前景格子生成(挡住动作的草)</li>\n<li>添加关卡地图</li>\n<li>关卡保存格式(添加关卡编辑器)</li>\n<li>添加通关条件–分数</li>\n<li>添加通关条件–动物</li>\n<li>添加通关条件–冰块</li>\n<li>添加通关条件–收集豌豆</li>\n</ol>\n"},{"layout":"post","title":"在windows环境下安装ursa正确方法","published":1,"_content":"\n## 前言\n* ```crypto```内置加密库居然没有rsa加密(有签名验证)\n* 先找了一个不依赖openssl的加密库```node-ras```，日本人写的，加解密都用私钥.....一定是我没有理解作者的意图。\n* ```ursa```比较热门，但是依赖```openssl```,windows下还依懒```Python```和```vc```，还有依懒nodejs库```node-gyp```，安装openssl还要依懒perl...\n\n## 步骤\n1. 安装node-gyp,```npm install -g node-gyp```\n2. 安装perl，由于有msi,下载安装即可（虽然安装时提示是否添加到Path,选了是还是不会添加，手动添加即可）\n3. 安装python,下载安装即可\n4. 安装VC，windows机子怎么可能会没有VC,略\n5. 安装openssl. \n* [openssl下载地址](http://www.openssl.org/source/)，选最新，包体最大准没错(^ ^)\n* 解压后，将文件夹名字改为```OpenSSL-Win64```，放到C盘根目录(ursa安装限定死路径，当然可以设置VC的全局INCLUDE,你会发现，这样子更累)\n* 配置编译环境，为下面的编译源码做准备，打开```cmd```,运行```C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\bin\\amd64\\vcvars64.bat```(win7_64)，不要半闭cmd\n* 编译源码，生成lib，步骤详情查看```openssl```根目录下的```INSTALL.W64```\n* 编译完成后的文件会输出到```out32dll```，将文件夹名字修改为```lib```\n* 检查```C:\\OpenSSL-Win64\\include\\openssl```里的头文件，是否是正确的C文件，如果不是，删除所有，将```C:\\OpenSSL-Win64\\inc32\\openssl```里的文件复制过来(不明白那个错误的C头文件是怎么回事)\n6. 最后一步，```npm i --save ursa```,have fun ~ _ ~   \n\n## 编译openssl错误\n1. ```目标模块x86与目标计算机x64不匹配```，这个情况可能是不小心运行过vcvars32.bat。这时需要删除根目录下的```tmp32dll```文件夹\n2. ```找不到windows.h```，VC一般情况下都会有，我的一台机子居然不见了。在```C:\\Promgram File(x86)```环境下搜索```windows.h```，将所在的文件夹目录添加到C++的```include```\n3. 添加C++的全局include，~~Tool -> Options -> VC++ Directory，这个方式在新版本vs中已经废弃~~。打开```C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\VCWizards\\default.vcxproj```，这个工程的配置会被转化成全局配置。  \n\n## 附录\n\n* [OpenSSL生成私钥和公钥的方法]http://blog.csdn.net/lvxiangan/article/details/45318443\n","source":"_posts/2016-05-21-nodejsinstallursa.markdown","raw":"---\nlayout: post\ntitle: 在windows环境下安装ursa正确方法\npublished: true\ncategories:\ntags:\n---\n\n## 前言\n* ```crypto```内置加密库居然没有rsa加密(有签名验证)\n* 先找了一个不依赖openssl的加密库```node-ras```，日本人写的，加解密都用私钥.....一定是我没有理解作者的意图。\n* ```ursa```比较热门，但是依赖```openssl```,windows下还依懒```Python```和```vc```，还有依懒nodejs库```node-gyp```，安装openssl还要依懒perl...\n\n## 步骤\n1. 安装node-gyp,```npm install -g node-gyp```\n2. 安装perl，由于有msi,下载安装即可（虽然安装时提示是否添加到Path,选了是还是不会添加，手动添加即可）\n3. 安装python,下载安装即可\n4. 安装VC，windows机子怎么可能会没有VC,略\n5. 安装openssl. \n* [openssl下载地址](http://www.openssl.org/source/)，选最新，包体最大准没错(^ ^)\n* 解压后，将文件夹名字改为```OpenSSL-Win64```，放到C盘根目录(ursa安装限定死路径，当然可以设置VC的全局INCLUDE,你会发现，这样子更累)\n* 配置编译环境，为下面的编译源码做准备，打开```cmd```,运行```C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\bin\\amd64\\vcvars64.bat```(win7_64)，不要半闭cmd\n* 编译源码，生成lib，步骤详情查看```openssl```根目录下的```INSTALL.W64```\n* 编译完成后的文件会输出到```out32dll```，将文件夹名字修改为```lib```\n* 检查```C:\\OpenSSL-Win64\\include\\openssl```里的头文件，是否是正确的C文件，如果不是，删除所有，将```C:\\OpenSSL-Win64\\inc32\\openssl```里的文件复制过来(不明白那个错误的C头文件是怎么回事)\n6. 最后一步，```npm i --save ursa```,have fun ~ _ ~   \n\n## 编译openssl错误\n1. ```目标模块x86与目标计算机x64不匹配```，这个情况可能是不小心运行过vcvars32.bat。这时需要删除根目录下的```tmp32dll```文件夹\n2. ```找不到windows.h```，VC一般情况下都会有，我的一台机子居然不见了。在```C:\\Promgram File(x86)```环境下搜索```windows.h```，将所在的文件夹目录添加到C++的```include```\n3. 添加C++的全局include，~~Tool -> Options -> VC++ Directory，这个方式在新版本vs中已经废弃~~。打开```C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\VCWizards\\default.vcxproj```，这个工程的配置会被转化成全局配置。  \n\n## 附录\n\n* [OpenSSL生成私钥和公钥的方法]http://blog.csdn.net/lvxiangan/article/details/45318443\n","slug":"2016-05-21-nodejsinstallursa","date":"2018-11-05T06:35:56.147Z","updated":"2018-12-24T12:02:34.783Z","_id":"cjq0w6f1i000z3292ia88u678","comments":1,"photos":[],"link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><ul>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 先找了一个不依赖openssl的加密库```node-ras```，日本人写的，加解密都用私钥.....一定是我没有理解作者的意图。</span><br><span class=\"line\">* ```ursa```比较热门，但是依赖```openssl```,windows下还依懒```Python```和```vc```，还有依懒nodejs库```node-gyp```，安装openssl还要依懒perl...</span><br><span class=\"line\"></span><br><span class=\"line\">## 步骤</span><br><span class=\"line\">1. 安装node-gyp,```npm install -g node-gyp</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol start=\"2\">\n<li>安装perl，由于有msi,下载安装即可（虽然安装时提示是否添加到Path,选了是还是不会添加，手动添加即可）</li>\n<li>安装python,下载安装即可</li>\n<li>安装VC，windows机子怎么可能会没有VC,略</li>\n<li>安装openssl. </li>\n</ol>\n<ul>\n<li><a href=\"http://www.openssl.org/source/\" target=\"_blank\" rel=\"noopener\">openssl下载地址</a>，选最新，包体最大准没错(^ ^)</li>\n<li><p>解压后，将文件夹名字改为<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 配置编译环境，为下面的编译源码做准备，打开```cmd```,运行```C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\bin\\amd64\\vcvars64.bat```(win7_64)，不要半闭cmd</span><br><span class=\"line\">* 编译源码，生成lib，步骤详情查看```openssl```根目录下的```INSTALL.W64</span><br></pre></td></tr></table></figure></p>\n</li>\n<li><p>编译完成后的文件会输出到<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 检查```C:\\OpenSSL-Win64\\include\\openssl```里的头文件，是否是正确的C文件，如果不是，删除所有，将```C:\\OpenSSL-Win64\\inc32\\openssl```里的文件复制过来(不明白那个错误的C头文件是怎么回事)</span><br><span class=\"line\">6. 最后一步，```npm i --save ursa```,have fun ~ _ ~   </span><br><span class=\"line\"></span><br><span class=\"line\">## 编译openssl错误</span><br><span class=\"line\">1. ```目标模块x86与目标计算机x64不匹配```，这个情况可能是不小心运行过vcvars32.bat。这时需要删除根目录下的```tmp32dll```文件夹</span><br><span class=\"line\">2. ```找不到windows.h```，VC一般情况下都会有，我的一台机子居然不见了。在```C:\\Promgram File(x86)```环境下搜索```windows.h```，将所在的文件夹目录添加到C++的```include</span><br></pre></td></tr></table></figure></p>\n</li>\n</ul>\n<ol start=\"3\">\n<li>添加C++的全局include，<del>Tool -&gt; Options -&gt; VC++ Directory，这个方式在新版本vs中已经废弃</del>。打开<code>C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\VCWizards\\default.vcxproj</code>，这个工程的配置会被转化成全局配置。  </li>\n</ol>\n<h2 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h2><ul>\n<li>[OpenSSL生成私钥和公钥的方法]<a href=\"http://blog.csdn.net/lvxiangan/article/details/45318443\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/lvxiangan/article/details/45318443</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><ul>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 先找了一个不依赖openssl的加密库```node-ras```，日本人写的，加解密都用私钥.....一定是我没有理解作者的意图。</span><br><span class=\"line\">* ```ursa```比较热门，但是依赖```openssl```,windows下还依懒```Python```和```vc```，还有依懒nodejs库```node-gyp```，安装openssl还要依懒perl...</span><br><span class=\"line\"></span><br><span class=\"line\">## 步骤</span><br><span class=\"line\">1. 安装node-gyp,```npm install -g node-gyp</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol start=\"2\">\n<li>安装perl，由于有msi,下载安装即可（虽然安装时提示是否添加到Path,选了是还是不会添加，手动添加即可）</li>\n<li>安装python,下载安装即可</li>\n<li>安装VC，windows机子怎么可能会没有VC,略</li>\n<li>安装openssl. </li>\n</ol>\n<ul>\n<li><a href=\"http://www.openssl.org/source/\" target=\"_blank\" rel=\"noopener\">openssl下载地址</a>，选最新，包体最大准没错(^ ^)</li>\n<li><p>解压后，将文件夹名字改为<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 配置编译环境，为下面的编译源码做准备，打开```cmd```,运行```C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\bin\\amd64\\vcvars64.bat```(win7_64)，不要半闭cmd</span><br><span class=\"line\">* 编译源码，生成lib，步骤详情查看```openssl```根目录下的```INSTALL.W64</span><br></pre></td></tr></table></figure></p>\n</li>\n<li><p>编译完成后的文件会输出到<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 检查```C:\\OpenSSL-Win64\\include\\openssl```里的头文件，是否是正确的C文件，如果不是，删除所有，将```C:\\OpenSSL-Win64\\inc32\\openssl```里的文件复制过来(不明白那个错误的C头文件是怎么回事)</span><br><span class=\"line\">6. 最后一步，```npm i --save ursa```,have fun ~ _ ~   </span><br><span class=\"line\"></span><br><span class=\"line\">## 编译openssl错误</span><br><span class=\"line\">1. ```目标模块x86与目标计算机x64不匹配```，这个情况可能是不小心运行过vcvars32.bat。这时需要删除根目录下的```tmp32dll```文件夹</span><br><span class=\"line\">2. ```找不到windows.h```，VC一般情况下都会有，我的一台机子居然不见了。在```C:\\Promgram File(x86)```环境下搜索```windows.h```，将所在的文件夹目录添加到C++的```include</span><br></pre></td></tr></table></figure></p>\n</li>\n</ul>\n<ol start=\"3\">\n<li>添加C++的全局include，<del>Tool -&gt; Options -&gt; VC++ Directory，这个方式在新版本vs中已经废弃</del>。打开<code>C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\VCWizards\\default.vcxproj</code>，这个工程的配置会被转化成全局配置。  </li>\n</ol>\n<h2 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h2><ul>\n<li>[OpenSSL生成私钥和公钥的方法]<a href=\"http://blog.csdn.net/lvxiangan/article/details/45318443\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/lvxiangan/article/details/45318443</a></li>\n</ul>\n"},{"layout":"post","title":"碰撞检测之OBB","published":1,"_content":"\n前言\n===\n在[简单几何图形的碰撞检测](/images/math/collide)里提到了几种几何图形的碰撞，但还不够完全，这篇文\n章再补充一个---旋转矩形的碰撞(OBB)。\n\n概念\n===\n---\n> [维基包围盒参考知识](https://zh.wikipedia.org/wiki/%E5%8C%85%E5%9B%B4%E4%BD%93)    \n> AABB盒：各边平行于坐标轴的包围盒    \n> OBB盒: 任意方向的包围盒\n\n---\n> [维基向量参考知识](https://zh.wikipedia.org/wiki/%E5%90%91%E9%87%8F)    \n> 点积：A,B为任意向量,，```公式一：A·B=|A|*|B|cosθ```,A在B上的投影为|A|cosθ，当B为单位向量时，\nA·B=|A|*|B|cosθ = |A|cosθ，A·B等于A在单位向量B上的投影。\n\n---\n\n定理\n===\n\n> SAT(Separating Axis Theorem),If two convex objects are not penetrating, there exists an axis for \nwhich the projection of the objects will not overlap.[证明传送门](http://www.dyn4j.org/2010/01/sat/#sat-intro)\n\n\n> 分离轴定理：如果两个凸多边形不相交，那么一定存在一条轴，使它们在这条轴上的投影不重叠。\n\n如何确定是否存在这条轴?\n===\n\n> 只需要判断凸多边形的每条边的法向量。如果在所有法向量上的投影相交，则不存这条轴，否则凸多边形不相交。\n\n\n如何判断投影是否相交?\n===\n\n![投影图](/images/math/obb.jpg)    \n图片中的红线是矩形在轴上的投影，长度为L1,L2,黑色是两个矩形中心在轴上的投影,L3。黑色线段的两个端点必然在两条红色\n线段的中间。所以，(L1 + L2) < L3 时，投影不重叠，否则重叠。\n\n上面的方法只适用于中心点必然在投影的中间。更通用的方法是:    \n\n> 对多边形所有的顶点进行投影，记录最大值和最小值。\n\n第一种方法dot次数是5，第二种方法dot次数是8。\n\n实现代码\n===\n\n主要分四个步骤    \n\n1\\. 获得四个需要判断的轴\n{% codeblock lua %}\n-- @description 获得四条轴\nlocal function getAxes(rect1,rect2)\n    local axes = {}\n    local width = rect1.width\n    local height = rect1.height\n    local angle = math.rad(rect1.angle)\n    axes[1] = {x = width * math.cos(angle), y = width * math.sin(angle)}\n    axes[2] = {x = height * math.cos(angle + math.pi / 2), \n                y = height * math.sin(angle + math.pi / 2)}\n    width, height, angle = rect2.width, rect2.height, math.rad(rect2.angle)\n    axes[3] = {x = width * math.cos(angle), y = width * math.sin(angle)}\n    axes[4] = {x = height * math.cos(angle + math.pi / 2), \n                y = height * math.sin(angle + math.pi / 2)}\n    return axes\nend\n{% endcodeblock %}\n2\\. 获得矩形的四个顶点\n{% codeblock lua %}\n--@description 获得矩形的四个顶点\nlocal function getVerticals(rect)\n    local verticals = {}\n    local angle = math.rad(rect.angle)\n    verticals[1] = {x = rect.x, y = rect.y}\n    local deltaX1, deltaY1 = rect.width * math.cos(angle) , rect.width * math.sin(angle)\n    local deltaX2, deltaY2 = rect.height * math.cos(angle + math.pi / 2) , \n                                rect.height * math.sin(angle + math.pi /2)\n    verticals[2] = {x = rect.x + deltaX1, y = rect.y + deltaY1}\n    verticals[3] = {x = rect.x + deltaX2, y = rect.y + deltaY2}\n    verticals[4] = {x = rect.x + deltaX1 + deltaX2, y = rect.y + deltaY1 + deltaY2}\n    return verticals \nend\n{% endcodeblock %}\n3\\. 获得矩形在轴上的投影\n{% codeblock lua %}\n-- @description 获得点在轴上的投影，这是一个凸多边形通用求法\n-- @return project project结构为{min = 1, max = 2}\nlocal function getProject(ver,axis)\n    local min, max = 1e99, -1e99\n    for k,v in pairs(ver) do\n        local num = dot(v,axis)\n        min = math.min(num, min)\n        max = math.max(num, max)\n    end\n    return {min = min, max = max}\nend\n{% endcodeblock %}\n4\\. 判断投影是否相交\n{% codeblock lua %}\nfor k,axis in pairs(axes) do\n    local proj1 = getProject(ver1, axis)\n    local proj2 = getProject(ver2, axis)\n    if proj1.min > proj2.max or proj1.max < proj2.min then\n        return false\n    end\nend\n{% endcodeblock %}\n\n测试效果图\n===\n![测试用的gif](/images/math/obb.gif)\n\n测试代码\n===\n\n{% codeblock lua %}\n\nlocal MainScene = class(\"MainScene\", cc.load(\"mvc\").ViewBase)\n\n--\n-- @author ccy\n-- @description OBB碰撞检测\n-- @date 2016/4/3\n--\n\n-- @description 获得四条轴\nlocal function getAxes(rect1,rect2)\n    local axes = {}\n    local width = rect1.width\n    local height = rect1.height\n    local angle = math.rad(rect1.angle)\n    axes[1] = {x = width * math.cos(angle), y = width * math.sin(angle)}\n    axes[2] = {x = height * math.cos(angle + math.pi / 2), \n                y = height * math.sin(angle + math.pi / 2)}\n    width, height, angle = rect2.width, rect2.height, math.rad(rect2.angle)\n    axes[3] = {x = width * math.cos(angle), y = width * math.sin(angle)}\n    axes[4] = {x = height * math.cos(angle + math.pi / 2), \n                y = height * math.sin(angle + math.pi / 2)}\n    return axes\nend\n\n--@description 获得矩形的四个顶点\nlocal function getVerticals(rect)\n    local verticals = {}\n    local angle = math.rad(rect.angle)\n    verticals[1] = {x = rect.x, y = rect.y}\n    local deltaX1, deltaY1 = rect.width * math.cos(angle) , rect.width * math.sin(angle)\n    local deltaX2, deltaY2 = rect.height * math.cos(angle + math.pi / 2) , \n                                rect.height * math.sin(angle + math.pi /2)\n    verticals[2] = {x = rect.x + deltaX1, y = rect.y + deltaY1}\n    verticals[3] = {x = rect.x + deltaX2, y = rect.y + deltaY2}\n    verticals[4] = {x = rect.x + deltaX1 + deltaX2, y = rect.y + deltaY1 + deltaY2}\n    return verticals \nend\n\n-- @description 数量积\nlocal function dot(vector1,vector2)\n    return vector1.x * vector2.x + vector1.y * vector2.y\nend\n\n-- @description 获得点在轴上的投影，这是一个凸多边形通用求法\n-- @return project project结构为{min = 1, max = 2}\nlocal function getProject(ver,axis)\n    local min, max = 1e99, -1e99\n    for k,v in pairs(ver) do\n        local num = dot(v,axis)\n        min = math.min(num, min)\n        max = math.max(num, max)\n    end\n    return {min = min, max = max}\nend\n\n-- @description obb碰撞检测\nlocal function obbIntersectsObb(rect1,rect2)\n    local axes = getAxes(rect1,rect2)\n    local ver1 = getVerticals(rect1)\n    local ver2 = getVerticals(rect2)\n    for k,axis in pairs(axes) do\n        local proj1 = getProject(ver1, axis)\n        local proj2 = getProject(ver2, axis)\n        if proj1.min > proj2.max or proj1.max < proj2.min then\n            return false\n        end\n    end\n    return true\nend\n\nfunction MainScene:onCreate()\n    display.newSprite(\"MainSceneBg.jpg\")\n        :move(display.center)\n        :addTo(self)\n    local foreverRotation1 = cc.RepeatForever:create(cc.RotateBy:create(5,360))\n    local foreverRotation2 = cc.RepeatForever:create(cc.RotateBy:create(3.5,-360))\n    self.rect1 = cc.Sprite:create(\"rect.png\")\n        :addTo(self)\n        :setAnchorPoint(cc.p(0,0))\n        :setPosition(cc.p(500,300))\n        :setRotation(30)\n    self.rect1:runAction(foreverRotation1)\n    self.rect2 = cc.Sprite:create(\"rect2.png\")\n        :addTo(self)\n        :setPosition(cc.p(620,300))\n        :setAnchorPoint(cc.p(0,0))\n        :setRotation(-45)\n        self.rect2:runAction(foreverRotation2)   \n    local label = cc.Label:createWithSystemFont(\"是否碰撞: true\", \"Arial\", 48)\n        :align(display.CENTER, display.center)\n        :addTo(self)\n    local moveCallback = function(touch,event)\n        local target = event:getCurrentTarget()\n        local x,y   = target:getPosition()\n        local delta = touch:getDelta()\n        target:setPosition(x+delta.x,y+delta.y)      \n    end\n    addTouchListener(self.rect1,nil,moveCallback)\n    addTouchListener(self.rect2,nil,moveCallback)\n    self:scheduleUpdate(function()\n        local x1,y1 = self.rect1:getPosition()\n        local angle1 = self.rect1:getRotation()\n        local x2,y2 = self.rect2:getPosition()\n        local angle2 = self.rect2:getRotation()\n        local rect1 = {x=x1,y=y1,width = 180, height = 72,angle = -angle1}\n        local rect2 = {x=x2,y=y2,width = 180, height = 72,angle = -angle2}\n        if obbIntersectsObb(rect2,rect1) then\n            label:setString(\"是否碰撞: true\")\n        else\n            label:setString(\"是否碰撞: false\")\n        end\n    end)\nend\n\nreturn MainScene\n\n{% endcodeblock %}\n\n就是这样。","source":"_posts/2016-03-26-collide2.markdown","raw":"---\nlayout: post\ntitle: 碰撞检测之OBB\npublished: true\ncategories: math\ntags: math collide\n---\n\n前言\n===\n在[简单几何图形的碰撞检测](/images/math/collide)里提到了几种几何图形的碰撞，但还不够完全，这篇文\n章再补充一个---旋转矩形的碰撞(OBB)。\n\n概念\n===\n---\n> [维基包围盒参考知识](https://zh.wikipedia.org/wiki/%E5%8C%85%E5%9B%B4%E4%BD%93)    \n> AABB盒：各边平行于坐标轴的包围盒    \n> OBB盒: 任意方向的包围盒\n\n---\n> [维基向量参考知识](https://zh.wikipedia.org/wiki/%E5%90%91%E9%87%8F)    \n> 点积：A,B为任意向量,，```公式一：A·B=|A|*|B|cosθ```,A在B上的投影为|A|cosθ，当B为单位向量时，\nA·B=|A|*|B|cosθ = |A|cosθ，A·B等于A在单位向量B上的投影。\n\n---\n\n定理\n===\n\n> SAT(Separating Axis Theorem),If two convex objects are not penetrating, there exists an axis for \nwhich the projection of the objects will not overlap.[证明传送门](http://www.dyn4j.org/2010/01/sat/#sat-intro)\n\n\n> 分离轴定理：如果两个凸多边形不相交，那么一定存在一条轴，使它们在这条轴上的投影不重叠。\n\n如何确定是否存在这条轴?\n===\n\n> 只需要判断凸多边形的每条边的法向量。如果在所有法向量上的投影相交，则不存这条轴，否则凸多边形不相交。\n\n\n如何判断投影是否相交?\n===\n\n![投影图](/images/math/obb.jpg)    \n图片中的红线是矩形在轴上的投影，长度为L1,L2,黑色是两个矩形中心在轴上的投影,L3。黑色线段的两个端点必然在两条红色\n线段的中间。所以，(L1 + L2) < L3 时，投影不重叠，否则重叠。\n\n上面的方法只适用于中心点必然在投影的中间。更通用的方法是:    \n\n> 对多边形所有的顶点进行投影，记录最大值和最小值。\n\n第一种方法dot次数是5，第二种方法dot次数是8。\n\n实现代码\n===\n\n主要分四个步骤    \n\n1\\. 获得四个需要判断的轴\n{% codeblock lua %}\n-- @description 获得四条轴\nlocal function getAxes(rect1,rect2)\n    local axes = {}\n    local width = rect1.width\n    local height = rect1.height\n    local angle = math.rad(rect1.angle)\n    axes[1] = {x = width * math.cos(angle), y = width * math.sin(angle)}\n    axes[2] = {x = height * math.cos(angle + math.pi / 2), \n                y = height * math.sin(angle + math.pi / 2)}\n    width, height, angle = rect2.width, rect2.height, math.rad(rect2.angle)\n    axes[3] = {x = width * math.cos(angle), y = width * math.sin(angle)}\n    axes[4] = {x = height * math.cos(angle + math.pi / 2), \n                y = height * math.sin(angle + math.pi / 2)}\n    return axes\nend\n{% endcodeblock %}\n2\\. 获得矩形的四个顶点\n{% codeblock lua %}\n--@description 获得矩形的四个顶点\nlocal function getVerticals(rect)\n    local verticals = {}\n    local angle = math.rad(rect.angle)\n    verticals[1] = {x = rect.x, y = rect.y}\n    local deltaX1, deltaY1 = rect.width * math.cos(angle) , rect.width * math.sin(angle)\n    local deltaX2, deltaY2 = rect.height * math.cos(angle + math.pi / 2) , \n                                rect.height * math.sin(angle + math.pi /2)\n    verticals[2] = {x = rect.x + deltaX1, y = rect.y + deltaY1}\n    verticals[3] = {x = rect.x + deltaX2, y = rect.y + deltaY2}\n    verticals[4] = {x = rect.x + deltaX1 + deltaX2, y = rect.y + deltaY1 + deltaY2}\n    return verticals \nend\n{% endcodeblock %}\n3\\. 获得矩形在轴上的投影\n{% codeblock lua %}\n-- @description 获得点在轴上的投影，这是一个凸多边形通用求法\n-- @return project project结构为{min = 1, max = 2}\nlocal function getProject(ver,axis)\n    local min, max = 1e99, -1e99\n    for k,v in pairs(ver) do\n        local num = dot(v,axis)\n        min = math.min(num, min)\n        max = math.max(num, max)\n    end\n    return {min = min, max = max}\nend\n{% endcodeblock %}\n4\\. 判断投影是否相交\n{% codeblock lua %}\nfor k,axis in pairs(axes) do\n    local proj1 = getProject(ver1, axis)\n    local proj2 = getProject(ver2, axis)\n    if proj1.min > proj2.max or proj1.max < proj2.min then\n        return false\n    end\nend\n{% endcodeblock %}\n\n测试效果图\n===\n![测试用的gif](/images/math/obb.gif)\n\n测试代码\n===\n\n{% codeblock lua %}\n\nlocal MainScene = class(\"MainScene\", cc.load(\"mvc\").ViewBase)\n\n--\n-- @author ccy\n-- @description OBB碰撞检测\n-- @date 2016/4/3\n--\n\n-- @description 获得四条轴\nlocal function getAxes(rect1,rect2)\n    local axes = {}\n    local width = rect1.width\n    local height = rect1.height\n    local angle = math.rad(rect1.angle)\n    axes[1] = {x = width * math.cos(angle), y = width * math.sin(angle)}\n    axes[2] = {x = height * math.cos(angle + math.pi / 2), \n                y = height * math.sin(angle + math.pi / 2)}\n    width, height, angle = rect2.width, rect2.height, math.rad(rect2.angle)\n    axes[3] = {x = width * math.cos(angle), y = width * math.sin(angle)}\n    axes[4] = {x = height * math.cos(angle + math.pi / 2), \n                y = height * math.sin(angle + math.pi / 2)}\n    return axes\nend\n\n--@description 获得矩形的四个顶点\nlocal function getVerticals(rect)\n    local verticals = {}\n    local angle = math.rad(rect.angle)\n    verticals[1] = {x = rect.x, y = rect.y}\n    local deltaX1, deltaY1 = rect.width * math.cos(angle) , rect.width * math.sin(angle)\n    local deltaX2, deltaY2 = rect.height * math.cos(angle + math.pi / 2) , \n                                rect.height * math.sin(angle + math.pi /2)\n    verticals[2] = {x = rect.x + deltaX1, y = rect.y + deltaY1}\n    verticals[3] = {x = rect.x + deltaX2, y = rect.y + deltaY2}\n    verticals[4] = {x = rect.x + deltaX1 + deltaX2, y = rect.y + deltaY1 + deltaY2}\n    return verticals \nend\n\n-- @description 数量积\nlocal function dot(vector1,vector2)\n    return vector1.x * vector2.x + vector1.y * vector2.y\nend\n\n-- @description 获得点在轴上的投影，这是一个凸多边形通用求法\n-- @return project project结构为{min = 1, max = 2}\nlocal function getProject(ver,axis)\n    local min, max = 1e99, -1e99\n    for k,v in pairs(ver) do\n        local num = dot(v,axis)\n        min = math.min(num, min)\n        max = math.max(num, max)\n    end\n    return {min = min, max = max}\nend\n\n-- @description obb碰撞检测\nlocal function obbIntersectsObb(rect1,rect2)\n    local axes = getAxes(rect1,rect2)\n    local ver1 = getVerticals(rect1)\n    local ver2 = getVerticals(rect2)\n    for k,axis in pairs(axes) do\n        local proj1 = getProject(ver1, axis)\n        local proj2 = getProject(ver2, axis)\n        if proj1.min > proj2.max or proj1.max < proj2.min then\n            return false\n        end\n    end\n    return true\nend\n\nfunction MainScene:onCreate()\n    display.newSprite(\"MainSceneBg.jpg\")\n        :move(display.center)\n        :addTo(self)\n    local foreverRotation1 = cc.RepeatForever:create(cc.RotateBy:create(5,360))\n    local foreverRotation2 = cc.RepeatForever:create(cc.RotateBy:create(3.5,-360))\n    self.rect1 = cc.Sprite:create(\"rect.png\")\n        :addTo(self)\n        :setAnchorPoint(cc.p(0,0))\n        :setPosition(cc.p(500,300))\n        :setRotation(30)\n    self.rect1:runAction(foreverRotation1)\n    self.rect2 = cc.Sprite:create(\"rect2.png\")\n        :addTo(self)\n        :setPosition(cc.p(620,300))\n        :setAnchorPoint(cc.p(0,0))\n        :setRotation(-45)\n        self.rect2:runAction(foreverRotation2)   \n    local label = cc.Label:createWithSystemFont(\"是否碰撞: true\", \"Arial\", 48)\n        :align(display.CENTER, display.center)\n        :addTo(self)\n    local moveCallback = function(touch,event)\n        local target = event:getCurrentTarget()\n        local x,y   = target:getPosition()\n        local delta = touch:getDelta()\n        target:setPosition(x+delta.x,y+delta.y)      \n    end\n    addTouchListener(self.rect1,nil,moveCallback)\n    addTouchListener(self.rect2,nil,moveCallback)\n    self:scheduleUpdate(function()\n        local x1,y1 = self.rect1:getPosition()\n        local angle1 = self.rect1:getRotation()\n        local x2,y2 = self.rect2:getPosition()\n        local angle2 = self.rect2:getRotation()\n        local rect1 = {x=x1,y=y1,width = 180, height = 72,angle = -angle1}\n        local rect2 = {x=x2,y=y2,width = 180, height = 72,angle = -angle2}\n        if obbIntersectsObb(rect2,rect1) then\n            label:setString(\"是否碰撞: true\")\n        else\n            label:setString(\"是否碰撞: false\")\n        end\n    end)\nend\n\nreturn MainScene\n\n{% endcodeblock %}\n\n就是这样。","slug":"2016-03-26-collide2","date":"2018-12-24T11:17:03.376Z","updated":"2018-12-24T11:56:33.410Z","_id":"cjq0w6f1o00123292de8top1x","comments":1,"photos":[],"link":"","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>在<a href=\"/images/math/collide\">简单几何图形的碰撞检测</a>里提到了几种几何图形的碰撞，但还不够完全，这篇文<br>章再补充一个—旋转矩形的碰撞(OBB)。</p>\n<h1 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h1><hr>\n<blockquote>\n<p><a href=\"https://zh.wikipedia.org/wiki/%E5%8C%85%E5%9B%B4%E4%BD%93\" target=\"_blank\" rel=\"noopener\">维基包围盒参考知识</a><br>AABB盒：各边平行于坐标轴的包围盒<br>OBB盒: 任意方向的包围盒</p>\n</blockquote>\n<hr>\n<blockquote>\n<p><a href=\"https://zh.wikipedia.org/wiki/%E5%90%91%E9%87%8F\" target=\"_blank\" rel=\"noopener\">维基向量参考知识</a><br>点积：A,B为任意向量,，<code>公式一：A·B=|A|*|B|cosθ</code>,A在B上的投影为|A|cosθ，当B为单位向量时，<br>A·B=|A|*|B|cosθ = |A|cosθ，A·B等于A在单位向量B上的投影。</p>\n</blockquote>\n<hr>\n<h1 id=\"定理\"><a href=\"#定理\" class=\"headerlink\" title=\"定理\"></a>定理</h1><blockquote>\n<p>SAT(Separating Axis Theorem),If two convex objects are not penetrating, there exists an axis for<br>which the projection of the objects will not overlap.<a href=\"http://www.dyn4j.org/2010/01/sat/#sat-intro\" target=\"_blank\" rel=\"noopener\">证明传送门</a></p>\n</blockquote>\n<blockquote>\n<p>分离轴定理：如果两个凸多边形不相交，那么一定存在一条轴，使它们在这条轴上的投影不重叠。</p>\n</blockquote>\n<h1 id=\"如何确定是否存在这条轴\"><a href=\"#如何确定是否存在这条轴\" class=\"headerlink\" title=\"如何确定是否存在这条轴?\"></a>如何确定是否存在这条轴?</h1><blockquote>\n<p>只需要判断凸多边形的每条边的法向量。如果在所有法向量上的投影相交，则不存这条轴，否则凸多边形不相交。</p>\n</blockquote>\n<h1 id=\"如何判断投影是否相交\"><a href=\"#如何判断投影是否相交\" class=\"headerlink\" title=\"如何判断投影是否相交?\"></a>如何判断投影是否相交?</h1><p><img src=\"/images/math/obb.jpg\" alt=\"投影图\"><br>图片中的红线是矩形在轴上的投影，长度为L1,L2,黑色是两个矩形中心在轴上的投影,L3。黑色线段的两个端点必然在两条红色<br>线段的中间。所以，(L1 + L2) &lt; L3 时，投影不重叠，否则重叠。</p>\n<p>上面的方法只适用于中心点必然在投影的中间。更通用的方法是:    </p>\n<blockquote>\n<p>对多边形所有的顶点进行投影，记录最大值和最小值。</p>\n</blockquote>\n<p>第一种方法dot次数是5，第二种方法dot次数是8。</p>\n<h1 id=\"实现代码\"><a href=\"#实现代码\" class=\"headerlink\" title=\"实现代码\"></a>实现代码</h1><p>主要分四个步骤    </p>\n<p>1. 获得四个需要判断的轴<br><figure class=\"highlight lua\"><figcaption><span>lua</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- @description 获得四条轴</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAxes</span><span class=\"params\">(rect1,rect2)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> axes = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">local</span> width = rect1.width</span><br><span class=\"line\">    <span class=\"keyword\">local</span> height = rect1.height</span><br><span class=\"line\">    <span class=\"keyword\">local</span> angle = <span class=\"built_in\">math</span>.<span class=\"built_in\">rad</span>(rect1.angle)</span><br><span class=\"line\">    axes[<span class=\"number\">1</span>] = &#123;x = width * <span class=\"built_in\">math</span>.<span class=\"built_in\">cos</span>(angle), y = width * <span class=\"built_in\">math</span>.<span class=\"built_in\">sin</span>(angle)&#125;</span><br><span class=\"line\">    axes[<span class=\"number\">2</span>] = &#123;x = height * <span class=\"built_in\">math</span>.<span class=\"built_in\">cos</span>(angle + <span class=\"built_in\">math</span>.<span class=\"built_in\">pi</span> / <span class=\"number\">2</span>), </span><br><span class=\"line\">                y = height * <span class=\"built_in\">math</span>.<span class=\"built_in\">sin</span>(angle + <span class=\"built_in\">math</span>.<span class=\"built_in\">pi</span> / <span class=\"number\">2</span>)&#125;</span><br><span class=\"line\">    width, height, angle = rect2.width, rect2.height, <span class=\"built_in\">math</span>.<span class=\"built_in\">rad</span>(rect2.angle)</span><br><span class=\"line\">    axes[<span class=\"number\">3</span>] = &#123;x = width * <span class=\"built_in\">math</span>.<span class=\"built_in\">cos</span>(angle), y = width * <span class=\"built_in\">math</span>.<span class=\"built_in\">sin</span>(angle)&#125;</span><br><span class=\"line\">    axes[<span class=\"number\">4</span>] = &#123;x = height * <span class=\"built_in\">math</span>.<span class=\"built_in\">cos</span>(angle + <span class=\"built_in\">math</span>.<span class=\"built_in\">pi</span> / <span class=\"number\">2</span>), </span><br><span class=\"line\">                y = height * <span class=\"built_in\">math</span>.<span class=\"built_in\">sin</span>(angle + <span class=\"built_in\">math</span>.<span class=\"built_in\">pi</span> / <span class=\"number\">2</span>)&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> axes</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure><br>2. 获得矩形的四个顶点<br><figure class=\"highlight lua\"><figcaption><span>lua</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--@description 获得矩形的四个顶点</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getVerticals</span><span class=\"params\">(rect)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> verticals = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">local</span> angle = <span class=\"built_in\">math</span>.<span class=\"built_in\">rad</span>(rect.angle)</span><br><span class=\"line\">    verticals[<span class=\"number\">1</span>] = &#123;x = rect.x, y = rect.y&#125;</span><br><span class=\"line\">    <span class=\"keyword\">local</span> deltaX1, deltaY1 = rect.width * <span class=\"built_in\">math</span>.<span class=\"built_in\">cos</span>(angle) , rect.width * <span class=\"built_in\">math</span>.<span class=\"built_in\">sin</span>(angle)</span><br><span class=\"line\">    <span class=\"keyword\">local</span> deltaX2, deltaY2 = rect.height * <span class=\"built_in\">math</span>.<span class=\"built_in\">cos</span>(angle + <span class=\"built_in\">math</span>.<span class=\"built_in\">pi</span> / <span class=\"number\">2</span>) , </span><br><span class=\"line\">                                rect.height * <span class=\"built_in\">math</span>.<span class=\"built_in\">sin</span>(angle + <span class=\"built_in\">math</span>.<span class=\"built_in\">pi</span> /<span class=\"number\">2</span>)</span><br><span class=\"line\">    verticals[<span class=\"number\">2</span>] = &#123;x = rect.x + deltaX1, y = rect.y + deltaY1&#125;</span><br><span class=\"line\">    verticals[<span class=\"number\">3</span>] = &#123;x = rect.x + deltaX2, y = rect.y + deltaY2&#125;</span><br><span class=\"line\">    verticals[<span class=\"number\">4</span>] = &#123;x = rect.x + deltaX1 + deltaX2, y = rect.y + deltaY1 + deltaY2&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> verticals </span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure><br>3. 获得矩形在轴上的投影<br><figure class=\"highlight lua\"><figcaption><span>lua</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- @description 获得点在轴上的投影，这是一个凸多边形通用求法</span></span><br><span class=\"line\"><span class=\"comment\">-- @return project project结构为&#123;min = 1, max = 2&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getProject</span><span class=\"params\">(ver,axis)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> <span class=\"built_in\">min</span>, <span class=\"built_in\">max</span> = <span class=\"number\">1e99</span>, <span class=\"number\">-1e99</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> k,v <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(ver) <span class=\"keyword\">do</span></span><br><span class=\"line\">        <span class=\"keyword\">local</span> num = dot(v,axis)</span><br><span class=\"line\">        <span class=\"built_in\">min</span> = <span class=\"built_in\">math</span>.<span class=\"built_in\">min</span>(num, <span class=\"built_in\">min</span>)</span><br><span class=\"line\">        <span class=\"built_in\">max</span> = <span class=\"built_in\">math</span>.<span class=\"built_in\">max</span>(num, <span class=\"built_in\">max</span>)</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;<span class=\"built_in\">min</span> = <span class=\"built_in\">min</span>, <span class=\"built_in\">max</span> = <span class=\"built_in\">max</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure><br>4. 判断投影是否相交<br><figure class=\"highlight lua\"><figcaption><span>lua</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> k,axis <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(axes) <span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> proj1 = getProject(ver1, axis)</span><br><span class=\"line\">    <span class=\"keyword\">local</span> proj2 = getProject(ver2, axis)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> proj1.<span class=\"built_in\">min</span> &gt; proj2.<span class=\"built_in\">max</span> <span class=\"keyword\">or</span> proj1.<span class=\"built_in\">max</span> &lt; proj2.<span class=\"built_in\">min</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"测试效果图\"><a href=\"#测试效果图\" class=\"headerlink\" title=\"测试效果图\"></a>测试效果图</h1><p><img src=\"/images/math/obb.gif\" alt=\"测试用的gif\"></p>\n<h1 id=\"测试代码\"><a href=\"#测试代码\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h1><figure class=\"highlight lua\"><figcaption><span>lua</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">local</span> MainScene = class(<span class=\"string\">\"MainScene\"</span>, cc.<span class=\"built_in\">load</span>(<span class=\"string\">\"mvc\"</span>).ViewBase)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--</span></span><br><span class=\"line\"><span class=\"comment\">-- @author ccy</span></span><br><span class=\"line\"><span class=\"comment\">-- @description OBB碰撞检测</span></span><br><span class=\"line\"><span class=\"comment\">-- @date 2016/4/3</span></span><br><span class=\"line\"><span class=\"comment\">--</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- @description 获得四条轴</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAxes</span><span class=\"params\">(rect1,rect2)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> axes = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">local</span> width = rect1.width</span><br><span class=\"line\">    <span class=\"keyword\">local</span> height = rect1.height</span><br><span class=\"line\">    <span class=\"keyword\">local</span> angle = <span class=\"built_in\">math</span>.<span class=\"built_in\">rad</span>(rect1.angle)</span><br><span class=\"line\">    axes[<span class=\"number\">1</span>] = &#123;x = width * <span class=\"built_in\">math</span>.<span class=\"built_in\">cos</span>(angle), y = width * <span class=\"built_in\">math</span>.<span class=\"built_in\">sin</span>(angle)&#125;</span><br><span class=\"line\">    axes[<span class=\"number\">2</span>] = &#123;x = height * <span class=\"built_in\">math</span>.<span class=\"built_in\">cos</span>(angle + <span class=\"built_in\">math</span>.<span class=\"built_in\">pi</span> / <span class=\"number\">2</span>), </span><br><span class=\"line\">                y = height * <span class=\"built_in\">math</span>.<span class=\"built_in\">sin</span>(angle + <span class=\"built_in\">math</span>.<span class=\"built_in\">pi</span> / <span class=\"number\">2</span>)&#125;</span><br><span class=\"line\">    width, height, angle = rect2.width, rect2.height, <span class=\"built_in\">math</span>.<span class=\"built_in\">rad</span>(rect2.angle)</span><br><span class=\"line\">    axes[<span class=\"number\">3</span>] = &#123;x = width * <span class=\"built_in\">math</span>.<span class=\"built_in\">cos</span>(angle), y = width * <span class=\"built_in\">math</span>.<span class=\"built_in\">sin</span>(angle)&#125;</span><br><span class=\"line\">    axes[<span class=\"number\">4</span>] = &#123;x = height * <span class=\"built_in\">math</span>.<span class=\"built_in\">cos</span>(angle + <span class=\"built_in\">math</span>.<span class=\"built_in\">pi</span> / <span class=\"number\">2</span>), </span><br><span class=\"line\">                y = height * <span class=\"built_in\">math</span>.<span class=\"built_in\">sin</span>(angle + <span class=\"built_in\">math</span>.<span class=\"built_in\">pi</span> / <span class=\"number\">2</span>)&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> axes</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--@description 获得矩形的四个顶点</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getVerticals</span><span class=\"params\">(rect)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> verticals = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">local</span> angle = <span class=\"built_in\">math</span>.<span class=\"built_in\">rad</span>(rect.angle)</span><br><span class=\"line\">    verticals[<span class=\"number\">1</span>] = &#123;x = rect.x, y = rect.y&#125;</span><br><span class=\"line\">    <span class=\"keyword\">local</span> deltaX1, deltaY1 = rect.width * <span class=\"built_in\">math</span>.<span class=\"built_in\">cos</span>(angle) , rect.width * <span class=\"built_in\">math</span>.<span class=\"built_in\">sin</span>(angle)</span><br><span class=\"line\">    <span class=\"keyword\">local</span> deltaX2, deltaY2 = rect.height * <span class=\"built_in\">math</span>.<span class=\"built_in\">cos</span>(angle + <span class=\"built_in\">math</span>.<span class=\"built_in\">pi</span> / <span class=\"number\">2</span>) , </span><br><span class=\"line\">                                rect.height * <span class=\"built_in\">math</span>.<span class=\"built_in\">sin</span>(angle + <span class=\"built_in\">math</span>.<span class=\"built_in\">pi</span> /<span class=\"number\">2</span>)</span><br><span class=\"line\">    verticals[<span class=\"number\">2</span>] = &#123;x = rect.x + deltaX1, y = rect.y + deltaY1&#125;</span><br><span class=\"line\">    verticals[<span class=\"number\">3</span>] = &#123;x = rect.x + deltaX2, y = rect.y + deltaY2&#125;</span><br><span class=\"line\">    verticals[<span class=\"number\">4</span>] = &#123;x = rect.x + deltaX1 + deltaX2, y = rect.y + deltaY1 + deltaY2&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> verticals </span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- @description 数量积</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dot</span><span class=\"params\">(vector1,vector2)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> vector1.x * vector2.x + vector1.y * vector2.y</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- @description 获得点在轴上的投影，这是一个凸多边形通用求法</span></span><br><span class=\"line\"><span class=\"comment\">-- @return project project结构为&#123;min = 1, max = 2&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getProject</span><span class=\"params\">(ver,axis)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> <span class=\"built_in\">min</span>, <span class=\"built_in\">max</span> = <span class=\"number\">1e99</span>, <span class=\"number\">-1e99</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> k,v <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(ver) <span class=\"keyword\">do</span></span><br><span class=\"line\">        <span class=\"keyword\">local</span> num = dot(v,axis)</span><br><span class=\"line\">        <span class=\"built_in\">min</span> = <span class=\"built_in\">math</span>.<span class=\"built_in\">min</span>(num, <span class=\"built_in\">min</span>)</span><br><span class=\"line\">        <span class=\"built_in\">max</span> = <span class=\"built_in\">math</span>.<span class=\"built_in\">max</span>(num, <span class=\"built_in\">max</span>)</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;<span class=\"built_in\">min</span> = <span class=\"built_in\">min</span>, <span class=\"built_in\">max</span> = <span class=\"built_in\">max</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- @description obb碰撞检测</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">obbIntersectsObb</span><span class=\"params\">(rect1,rect2)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> axes = getAxes(rect1,rect2)</span><br><span class=\"line\">    <span class=\"keyword\">local</span> ver1 = getVerticals(rect1)</span><br><span class=\"line\">    <span class=\"keyword\">local</span> ver2 = getVerticals(rect2)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> k,axis <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(axes) <span class=\"keyword\">do</span></span><br><span class=\"line\">        <span class=\"keyword\">local</span> proj1 = getProject(ver1, axis)</span><br><span class=\"line\">        <span class=\"keyword\">local</span> proj2 = getProject(ver2, axis)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> proj1.<span class=\"built_in\">min</span> &gt; proj2.<span class=\"built_in\">max</span> <span class=\"keyword\">or</span> proj1.<span class=\"built_in\">max</span> &lt; proj2.<span class=\"built_in\">min</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MainScene:onCreate</span><span class=\"params\">()</span></span></span><br><span class=\"line\">    display.newSprite(<span class=\"string\">\"MainSceneBg.jpg\"</span>)</span><br><span class=\"line\">        :move(display.center)</span><br><span class=\"line\">        :addTo(self)</span><br><span class=\"line\">    <span class=\"keyword\">local</span> foreverRotation1 = cc.RepeatForever:<span class=\"built_in\">create</span>(cc.RotateBy:<span class=\"built_in\">create</span>(<span class=\"number\">5</span>,<span class=\"number\">360</span>))</span><br><span class=\"line\">    <span class=\"keyword\">local</span> foreverRotation2 = cc.RepeatForever:<span class=\"built_in\">create</span>(cc.RotateBy:<span class=\"built_in\">create</span>(<span class=\"number\">3.5</span>,<span class=\"number\">-360</span>))</span><br><span class=\"line\">    self.rect1 = cc.Sprite:<span class=\"built_in\">create</span>(<span class=\"string\">\"rect.png\"</span>)</span><br><span class=\"line\">        :addTo(self)</span><br><span class=\"line\">        :setAnchorPoint(cc.p(<span class=\"number\">0</span>,<span class=\"number\">0</span>))</span><br><span class=\"line\">        :setPosition(cc.p(<span class=\"number\">500</span>,<span class=\"number\">300</span>))</span><br><span class=\"line\">        :setRotation(<span class=\"number\">30</span>)</span><br><span class=\"line\">    self.rect1:runAction(foreverRotation1)</span><br><span class=\"line\">    self.rect2 = cc.Sprite:<span class=\"built_in\">create</span>(<span class=\"string\">\"rect2.png\"</span>)</span><br><span class=\"line\">        :addTo(self)</span><br><span class=\"line\">        :setPosition(cc.p(<span class=\"number\">620</span>,<span class=\"number\">300</span>))</span><br><span class=\"line\">        :setAnchorPoint(cc.p(<span class=\"number\">0</span>,<span class=\"number\">0</span>))</span><br><span class=\"line\">        :setRotation(<span class=\"number\">-45</span>)</span><br><span class=\"line\">        self.rect2:runAction(foreverRotation2)   </span><br><span class=\"line\">    <span class=\"keyword\">local</span> label = cc.Label:createWithSystemFont(<span class=\"string\">\"是否碰撞: true\"</span>, <span class=\"string\">\"Arial\"</span>, <span class=\"number\">48</span>)</span><br><span class=\"line\">        :align(display.CENTER, display.center)</span><br><span class=\"line\">        :addTo(self)</span><br><span class=\"line\">    <span class=\"keyword\">local</span> moveCallback = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(touch,event)</span></span></span><br><span class=\"line\">        <span class=\"keyword\">local</span> target = event:getCurrentTarget()</span><br><span class=\"line\">        <span class=\"keyword\">local</span> x,y   = target:getPosition()</span><br><span class=\"line\">        <span class=\"keyword\">local</span> delta = touch:getDelta()</span><br><span class=\"line\">        target:setPosition(x+delta.x,y+delta.y)      </span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    addTouchListener(self.rect1,<span class=\"literal\">nil</span>,moveCallback)</span><br><span class=\"line\">    addTouchListener(self.rect2,<span class=\"literal\">nil</span>,moveCallback)</span><br><span class=\"line\">    self:scheduleUpdate(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span></span><br><span class=\"line\">        <span class=\"keyword\">local</span> x1,y1 = self.rect1:getPosition()</span><br><span class=\"line\">        <span class=\"keyword\">local</span> angle1 = self.rect1:getRotation()</span><br><span class=\"line\">        <span class=\"keyword\">local</span> x2,y2 = self.rect2:getPosition()</span><br><span class=\"line\">        <span class=\"keyword\">local</span> angle2 = self.rect2:getRotation()</span><br><span class=\"line\">        <span class=\"keyword\">local</span> rect1 = &#123;x=x1,y=y1,width = <span class=\"number\">180</span>, height = <span class=\"number\">72</span>,angle = -angle1&#125;</span><br><span class=\"line\">        <span class=\"keyword\">local</span> rect2 = &#123;x=x2,y=y2,width = <span class=\"number\">180</span>, height = <span class=\"number\">72</span>,angle = -angle2&#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> obbIntersectsObb(rect2,rect1) <span class=\"keyword\">then</span></span><br><span class=\"line\">            label:setString(<span class=\"string\">\"是否碰撞: true\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            label:setString(<span class=\"string\">\"是否碰撞: false\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> MainScene</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>就是这样。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>在<a href=\"/images/math/collide\">简单几何图形的碰撞检测</a>里提到了几种几何图形的碰撞，但还不够完全，这篇文<br>章再补充一个—旋转矩形的碰撞(OBB)。</p>\n<h1 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h1><hr>\n<blockquote>\n<p><a href=\"https://zh.wikipedia.org/wiki/%E5%8C%85%E5%9B%B4%E4%BD%93\" target=\"_blank\" rel=\"noopener\">维基包围盒参考知识</a><br>AABB盒：各边平行于坐标轴的包围盒<br>OBB盒: 任意方向的包围盒</p>\n</blockquote>\n<hr>\n<blockquote>\n<p><a href=\"https://zh.wikipedia.org/wiki/%E5%90%91%E9%87%8F\" target=\"_blank\" rel=\"noopener\">维基向量参考知识</a><br>点积：A,B为任意向量,，<code>公式一：A·B=|A|*|B|cosθ</code>,A在B上的投影为|A|cosθ，当B为单位向量时，<br>A·B=|A|*|B|cosθ = |A|cosθ，A·B等于A在单位向量B上的投影。</p>\n</blockquote>\n<hr>\n<h1 id=\"定理\"><a href=\"#定理\" class=\"headerlink\" title=\"定理\"></a>定理</h1><blockquote>\n<p>SAT(Separating Axis Theorem),If two convex objects are not penetrating, there exists an axis for<br>which the projection of the objects will not overlap.<a href=\"http://www.dyn4j.org/2010/01/sat/#sat-intro\" target=\"_blank\" rel=\"noopener\">证明传送门</a></p>\n</blockquote>\n<blockquote>\n<p>分离轴定理：如果两个凸多边形不相交，那么一定存在一条轴，使它们在这条轴上的投影不重叠。</p>\n</blockquote>\n<h1 id=\"如何确定是否存在这条轴\"><a href=\"#如何确定是否存在这条轴\" class=\"headerlink\" title=\"如何确定是否存在这条轴?\"></a>如何确定是否存在这条轴?</h1><blockquote>\n<p>只需要判断凸多边形的每条边的法向量。如果在所有法向量上的投影相交，则不存这条轴，否则凸多边形不相交。</p>\n</blockquote>\n<h1 id=\"如何判断投影是否相交\"><a href=\"#如何判断投影是否相交\" class=\"headerlink\" title=\"如何判断投影是否相交?\"></a>如何判断投影是否相交?</h1><p><img src=\"/images/math/obb.jpg\" alt=\"投影图\"><br>图片中的红线是矩形在轴上的投影，长度为L1,L2,黑色是两个矩形中心在轴上的投影,L3。黑色线段的两个端点必然在两条红色<br>线段的中间。所以，(L1 + L2) &lt; L3 时，投影不重叠，否则重叠。</p>\n<p>上面的方法只适用于中心点必然在投影的中间。更通用的方法是:    </p>\n<blockquote>\n<p>对多边形所有的顶点进行投影，记录最大值和最小值。</p>\n</blockquote>\n<p>第一种方法dot次数是5，第二种方法dot次数是8。</p>\n<h1 id=\"实现代码\"><a href=\"#实现代码\" class=\"headerlink\" title=\"实现代码\"></a>实现代码</h1><p>主要分四个步骤    </p>\n<p>1. 获得四个需要判断的轴<br><figure class=\"highlight lua\"><figcaption><span>lua</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- @description 获得四条轴</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAxes</span><span class=\"params\">(rect1,rect2)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> axes = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">local</span> width = rect1.width</span><br><span class=\"line\">    <span class=\"keyword\">local</span> height = rect1.height</span><br><span class=\"line\">    <span class=\"keyword\">local</span> angle = <span class=\"built_in\">math</span>.<span class=\"built_in\">rad</span>(rect1.angle)</span><br><span class=\"line\">    axes[<span class=\"number\">1</span>] = &#123;x = width * <span class=\"built_in\">math</span>.<span class=\"built_in\">cos</span>(angle), y = width * <span class=\"built_in\">math</span>.<span class=\"built_in\">sin</span>(angle)&#125;</span><br><span class=\"line\">    axes[<span class=\"number\">2</span>] = &#123;x = height * <span class=\"built_in\">math</span>.<span class=\"built_in\">cos</span>(angle + <span class=\"built_in\">math</span>.<span class=\"built_in\">pi</span> / <span class=\"number\">2</span>), </span><br><span class=\"line\">                y = height * <span class=\"built_in\">math</span>.<span class=\"built_in\">sin</span>(angle + <span class=\"built_in\">math</span>.<span class=\"built_in\">pi</span> / <span class=\"number\">2</span>)&#125;</span><br><span class=\"line\">    width, height, angle = rect2.width, rect2.height, <span class=\"built_in\">math</span>.<span class=\"built_in\">rad</span>(rect2.angle)</span><br><span class=\"line\">    axes[<span class=\"number\">3</span>] = &#123;x = width * <span class=\"built_in\">math</span>.<span class=\"built_in\">cos</span>(angle), y = width * <span class=\"built_in\">math</span>.<span class=\"built_in\">sin</span>(angle)&#125;</span><br><span class=\"line\">    axes[<span class=\"number\">4</span>] = &#123;x = height * <span class=\"built_in\">math</span>.<span class=\"built_in\">cos</span>(angle + <span class=\"built_in\">math</span>.<span class=\"built_in\">pi</span> / <span class=\"number\">2</span>), </span><br><span class=\"line\">                y = height * <span class=\"built_in\">math</span>.<span class=\"built_in\">sin</span>(angle + <span class=\"built_in\">math</span>.<span class=\"built_in\">pi</span> / <span class=\"number\">2</span>)&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> axes</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure><br>2. 获得矩形的四个顶点<br><figure class=\"highlight lua\"><figcaption><span>lua</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--@description 获得矩形的四个顶点</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getVerticals</span><span class=\"params\">(rect)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> verticals = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">local</span> angle = <span class=\"built_in\">math</span>.<span class=\"built_in\">rad</span>(rect.angle)</span><br><span class=\"line\">    verticals[<span class=\"number\">1</span>] = &#123;x = rect.x, y = rect.y&#125;</span><br><span class=\"line\">    <span class=\"keyword\">local</span> deltaX1, deltaY1 = rect.width * <span class=\"built_in\">math</span>.<span class=\"built_in\">cos</span>(angle) , rect.width * <span class=\"built_in\">math</span>.<span class=\"built_in\">sin</span>(angle)</span><br><span class=\"line\">    <span class=\"keyword\">local</span> deltaX2, deltaY2 = rect.height * <span class=\"built_in\">math</span>.<span class=\"built_in\">cos</span>(angle + <span class=\"built_in\">math</span>.<span class=\"built_in\">pi</span> / <span class=\"number\">2</span>) , </span><br><span class=\"line\">                                rect.height * <span class=\"built_in\">math</span>.<span class=\"built_in\">sin</span>(angle + <span class=\"built_in\">math</span>.<span class=\"built_in\">pi</span> /<span class=\"number\">2</span>)</span><br><span class=\"line\">    verticals[<span class=\"number\">2</span>] = &#123;x = rect.x + deltaX1, y = rect.y + deltaY1&#125;</span><br><span class=\"line\">    verticals[<span class=\"number\">3</span>] = &#123;x = rect.x + deltaX2, y = rect.y + deltaY2&#125;</span><br><span class=\"line\">    verticals[<span class=\"number\">4</span>] = &#123;x = rect.x + deltaX1 + deltaX2, y = rect.y + deltaY1 + deltaY2&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> verticals </span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure><br>3. 获得矩形在轴上的投影<br><figure class=\"highlight lua\"><figcaption><span>lua</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- @description 获得点在轴上的投影，这是一个凸多边形通用求法</span></span><br><span class=\"line\"><span class=\"comment\">-- @return project project结构为&#123;min = 1, max = 2&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getProject</span><span class=\"params\">(ver,axis)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> <span class=\"built_in\">min</span>, <span class=\"built_in\">max</span> = <span class=\"number\">1e99</span>, <span class=\"number\">-1e99</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> k,v <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(ver) <span class=\"keyword\">do</span></span><br><span class=\"line\">        <span class=\"keyword\">local</span> num = dot(v,axis)</span><br><span class=\"line\">        <span class=\"built_in\">min</span> = <span class=\"built_in\">math</span>.<span class=\"built_in\">min</span>(num, <span class=\"built_in\">min</span>)</span><br><span class=\"line\">        <span class=\"built_in\">max</span> = <span class=\"built_in\">math</span>.<span class=\"built_in\">max</span>(num, <span class=\"built_in\">max</span>)</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;<span class=\"built_in\">min</span> = <span class=\"built_in\">min</span>, <span class=\"built_in\">max</span> = <span class=\"built_in\">max</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure><br>4. 判断投影是否相交<br><figure class=\"highlight lua\"><figcaption><span>lua</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> k,axis <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(axes) <span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> proj1 = getProject(ver1, axis)</span><br><span class=\"line\">    <span class=\"keyword\">local</span> proj2 = getProject(ver2, axis)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> proj1.<span class=\"built_in\">min</span> &gt; proj2.<span class=\"built_in\">max</span> <span class=\"keyword\">or</span> proj1.<span class=\"built_in\">max</span> &lt; proj2.<span class=\"built_in\">min</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"测试效果图\"><a href=\"#测试效果图\" class=\"headerlink\" title=\"测试效果图\"></a>测试效果图</h1><p><img src=\"/images/math/obb.gif\" alt=\"测试用的gif\"></p>\n<h1 id=\"测试代码\"><a href=\"#测试代码\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h1><figure class=\"highlight lua\"><figcaption><span>lua</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">local</span> MainScene = class(<span class=\"string\">\"MainScene\"</span>, cc.<span class=\"built_in\">load</span>(<span class=\"string\">\"mvc\"</span>).ViewBase)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--</span></span><br><span class=\"line\"><span class=\"comment\">-- @author ccy</span></span><br><span class=\"line\"><span class=\"comment\">-- @description OBB碰撞检测</span></span><br><span class=\"line\"><span class=\"comment\">-- @date 2016/4/3</span></span><br><span class=\"line\"><span class=\"comment\">--</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- @description 获得四条轴</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAxes</span><span class=\"params\">(rect1,rect2)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> axes = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">local</span> width = rect1.width</span><br><span class=\"line\">    <span class=\"keyword\">local</span> height = rect1.height</span><br><span class=\"line\">    <span class=\"keyword\">local</span> angle = <span class=\"built_in\">math</span>.<span class=\"built_in\">rad</span>(rect1.angle)</span><br><span class=\"line\">    axes[<span class=\"number\">1</span>] = &#123;x = width * <span class=\"built_in\">math</span>.<span class=\"built_in\">cos</span>(angle), y = width * <span class=\"built_in\">math</span>.<span class=\"built_in\">sin</span>(angle)&#125;</span><br><span class=\"line\">    axes[<span class=\"number\">2</span>] = &#123;x = height * <span class=\"built_in\">math</span>.<span class=\"built_in\">cos</span>(angle + <span class=\"built_in\">math</span>.<span class=\"built_in\">pi</span> / <span class=\"number\">2</span>), </span><br><span class=\"line\">                y = height * <span class=\"built_in\">math</span>.<span class=\"built_in\">sin</span>(angle + <span class=\"built_in\">math</span>.<span class=\"built_in\">pi</span> / <span class=\"number\">2</span>)&#125;</span><br><span class=\"line\">    width, height, angle = rect2.width, rect2.height, <span class=\"built_in\">math</span>.<span class=\"built_in\">rad</span>(rect2.angle)</span><br><span class=\"line\">    axes[<span class=\"number\">3</span>] = &#123;x = width * <span class=\"built_in\">math</span>.<span class=\"built_in\">cos</span>(angle), y = width * <span class=\"built_in\">math</span>.<span class=\"built_in\">sin</span>(angle)&#125;</span><br><span class=\"line\">    axes[<span class=\"number\">4</span>] = &#123;x = height * <span class=\"built_in\">math</span>.<span class=\"built_in\">cos</span>(angle + <span class=\"built_in\">math</span>.<span class=\"built_in\">pi</span> / <span class=\"number\">2</span>), </span><br><span class=\"line\">                y = height * <span class=\"built_in\">math</span>.<span class=\"built_in\">sin</span>(angle + <span class=\"built_in\">math</span>.<span class=\"built_in\">pi</span> / <span class=\"number\">2</span>)&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> axes</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--@description 获得矩形的四个顶点</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getVerticals</span><span class=\"params\">(rect)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> verticals = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">local</span> angle = <span class=\"built_in\">math</span>.<span class=\"built_in\">rad</span>(rect.angle)</span><br><span class=\"line\">    verticals[<span class=\"number\">1</span>] = &#123;x = rect.x, y = rect.y&#125;</span><br><span class=\"line\">    <span class=\"keyword\">local</span> deltaX1, deltaY1 = rect.width * <span class=\"built_in\">math</span>.<span class=\"built_in\">cos</span>(angle) , rect.width * <span class=\"built_in\">math</span>.<span class=\"built_in\">sin</span>(angle)</span><br><span class=\"line\">    <span class=\"keyword\">local</span> deltaX2, deltaY2 = rect.height * <span class=\"built_in\">math</span>.<span class=\"built_in\">cos</span>(angle + <span class=\"built_in\">math</span>.<span class=\"built_in\">pi</span> / <span class=\"number\">2</span>) , </span><br><span class=\"line\">                                rect.height * <span class=\"built_in\">math</span>.<span class=\"built_in\">sin</span>(angle + <span class=\"built_in\">math</span>.<span class=\"built_in\">pi</span> /<span class=\"number\">2</span>)</span><br><span class=\"line\">    verticals[<span class=\"number\">2</span>] = &#123;x = rect.x + deltaX1, y = rect.y + deltaY1&#125;</span><br><span class=\"line\">    verticals[<span class=\"number\">3</span>] = &#123;x = rect.x + deltaX2, y = rect.y + deltaY2&#125;</span><br><span class=\"line\">    verticals[<span class=\"number\">4</span>] = &#123;x = rect.x + deltaX1 + deltaX2, y = rect.y + deltaY1 + deltaY2&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> verticals </span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- @description 数量积</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dot</span><span class=\"params\">(vector1,vector2)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> vector1.x * vector2.x + vector1.y * vector2.y</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- @description 获得点在轴上的投影，这是一个凸多边形通用求法</span></span><br><span class=\"line\"><span class=\"comment\">-- @return project project结构为&#123;min = 1, max = 2&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getProject</span><span class=\"params\">(ver,axis)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> <span class=\"built_in\">min</span>, <span class=\"built_in\">max</span> = <span class=\"number\">1e99</span>, <span class=\"number\">-1e99</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> k,v <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(ver) <span class=\"keyword\">do</span></span><br><span class=\"line\">        <span class=\"keyword\">local</span> num = dot(v,axis)</span><br><span class=\"line\">        <span class=\"built_in\">min</span> = <span class=\"built_in\">math</span>.<span class=\"built_in\">min</span>(num, <span class=\"built_in\">min</span>)</span><br><span class=\"line\">        <span class=\"built_in\">max</span> = <span class=\"built_in\">math</span>.<span class=\"built_in\">max</span>(num, <span class=\"built_in\">max</span>)</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;<span class=\"built_in\">min</span> = <span class=\"built_in\">min</span>, <span class=\"built_in\">max</span> = <span class=\"built_in\">max</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- @description obb碰撞检测</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">obbIntersectsObb</span><span class=\"params\">(rect1,rect2)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> axes = getAxes(rect1,rect2)</span><br><span class=\"line\">    <span class=\"keyword\">local</span> ver1 = getVerticals(rect1)</span><br><span class=\"line\">    <span class=\"keyword\">local</span> ver2 = getVerticals(rect2)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> k,axis <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(axes) <span class=\"keyword\">do</span></span><br><span class=\"line\">        <span class=\"keyword\">local</span> proj1 = getProject(ver1, axis)</span><br><span class=\"line\">        <span class=\"keyword\">local</span> proj2 = getProject(ver2, axis)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> proj1.<span class=\"built_in\">min</span> &gt; proj2.<span class=\"built_in\">max</span> <span class=\"keyword\">or</span> proj1.<span class=\"built_in\">max</span> &lt; proj2.<span class=\"built_in\">min</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MainScene:onCreate</span><span class=\"params\">()</span></span></span><br><span class=\"line\">    display.newSprite(<span class=\"string\">\"MainSceneBg.jpg\"</span>)</span><br><span class=\"line\">        :move(display.center)</span><br><span class=\"line\">        :addTo(self)</span><br><span class=\"line\">    <span class=\"keyword\">local</span> foreverRotation1 = cc.RepeatForever:<span class=\"built_in\">create</span>(cc.RotateBy:<span class=\"built_in\">create</span>(<span class=\"number\">5</span>,<span class=\"number\">360</span>))</span><br><span class=\"line\">    <span class=\"keyword\">local</span> foreverRotation2 = cc.RepeatForever:<span class=\"built_in\">create</span>(cc.RotateBy:<span class=\"built_in\">create</span>(<span class=\"number\">3.5</span>,<span class=\"number\">-360</span>))</span><br><span class=\"line\">    self.rect1 = cc.Sprite:<span class=\"built_in\">create</span>(<span class=\"string\">\"rect.png\"</span>)</span><br><span class=\"line\">        :addTo(self)</span><br><span class=\"line\">        :setAnchorPoint(cc.p(<span class=\"number\">0</span>,<span class=\"number\">0</span>))</span><br><span class=\"line\">        :setPosition(cc.p(<span class=\"number\">500</span>,<span class=\"number\">300</span>))</span><br><span class=\"line\">        :setRotation(<span class=\"number\">30</span>)</span><br><span class=\"line\">    self.rect1:runAction(foreverRotation1)</span><br><span class=\"line\">    self.rect2 = cc.Sprite:<span class=\"built_in\">create</span>(<span class=\"string\">\"rect2.png\"</span>)</span><br><span class=\"line\">        :addTo(self)</span><br><span class=\"line\">        :setPosition(cc.p(<span class=\"number\">620</span>,<span class=\"number\">300</span>))</span><br><span class=\"line\">        :setAnchorPoint(cc.p(<span class=\"number\">0</span>,<span class=\"number\">0</span>))</span><br><span class=\"line\">        :setRotation(<span class=\"number\">-45</span>)</span><br><span class=\"line\">        self.rect2:runAction(foreverRotation2)   </span><br><span class=\"line\">    <span class=\"keyword\">local</span> label = cc.Label:createWithSystemFont(<span class=\"string\">\"是否碰撞: true\"</span>, <span class=\"string\">\"Arial\"</span>, <span class=\"number\">48</span>)</span><br><span class=\"line\">        :align(display.CENTER, display.center)</span><br><span class=\"line\">        :addTo(self)</span><br><span class=\"line\">    <span class=\"keyword\">local</span> moveCallback = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(touch,event)</span></span></span><br><span class=\"line\">        <span class=\"keyword\">local</span> target = event:getCurrentTarget()</span><br><span class=\"line\">        <span class=\"keyword\">local</span> x,y   = target:getPosition()</span><br><span class=\"line\">        <span class=\"keyword\">local</span> delta = touch:getDelta()</span><br><span class=\"line\">        target:setPosition(x+delta.x,y+delta.y)      </span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    addTouchListener(self.rect1,<span class=\"literal\">nil</span>,moveCallback)</span><br><span class=\"line\">    addTouchListener(self.rect2,<span class=\"literal\">nil</span>,moveCallback)</span><br><span class=\"line\">    self:scheduleUpdate(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span></span><br><span class=\"line\">        <span class=\"keyword\">local</span> x1,y1 = self.rect1:getPosition()</span><br><span class=\"line\">        <span class=\"keyword\">local</span> angle1 = self.rect1:getRotation()</span><br><span class=\"line\">        <span class=\"keyword\">local</span> x2,y2 = self.rect2:getPosition()</span><br><span class=\"line\">        <span class=\"keyword\">local</span> angle2 = self.rect2:getRotation()</span><br><span class=\"line\">        <span class=\"keyword\">local</span> rect1 = &#123;x=x1,y=y1,width = <span class=\"number\">180</span>, height = <span class=\"number\">72</span>,angle = -angle1&#125;</span><br><span class=\"line\">        <span class=\"keyword\">local</span> rect2 = &#123;x=x2,y=y2,width = <span class=\"number\">180</span>, height = <span class=\"number\">72</span>,angle = -angle2&#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> obbIntersectsObb(rect2,rect1) <span class=\"keyword\">then</span></span><br><span class=\"line\">            label:setString(<span class=\"string\">\"是否碰撞: true\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            label:setString(<span class=\"string\">\"是否碰撞: false\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> MainScene</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>就是这样。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjq0w6f0700033292npwu97k3","category_id":"cjq0w6f0e00053292343syg63","_id":"cjq0w6f0w000f3292rj0437kc"},{"post_id":"cjq0w6f0j000832920rbn31z6","category_id":"cjq0w6f0o000a3292f0iag8jc","_id":"cjq0w6f16000m3292t4xzpziv"},{"post_id":"cjq0w6f0x000g32923g3q4720","category_id":"cjq0w6f0o000a3292f0iag8jc","_id":"cjq0w6f18000p32929ic09n59"},{"post_id":"cjq0w6f0m00093292wl4yfl3q","category_id":"cjq0w6f11000h3292943d5w79","_id":"cjq0w6f1d000s3292afza168b"},{"post_id":"cjq0w6f1d000t3292az2lhrdl","category_id":"cjq0w6f1h000w32924ja48h3b","_id":"cjq0w6f1k00113292zd3oefsj"},{"post_id":"cjq0w6f1o00123292de8top1x","category_id":"cjq0w6f0o000a3292f0iag8jc","_id":"cjq0w6f1r00143292cf4m25ts"},{"post_id":"cjq0w5ieb00003292imgg3vj4","category_id":"cjq28voe60000ex92y8xxhndv","_id":"cjq28voe80002ex92rz1yut5a"},{"post_id":"cjq0w5ieb00003292imgg3vj4","category_id":"cjq28voe70001ex92vwuu9ke9","_id":"cjq28voe80003ex92il8c9jt5"}],"PostTag":[{"post_id":"cjq0w6f0700033292npwu97k3","tag_id":"cjq0w6f0g00063292fxsvhcih","_id":"cjq0w6f0p000c32929ap3037s"},{"post_id":"cjq0w6f0j000832920rbn31z6","tag_id":"cjq0w6f0p000b32929gs71wxp","_id":"cjq0w6f12000j3292xvuwjd89"},{"post_id":"cjq0w6f0m00093292wl4yfl3q","tag_id":"cjq0w6f11000i3292q0jxfc8y","_id":"cjq0w6f18000q3292ydjjn57b"},{"post_id":"cjq0w6f0x000g32923g3q4720","tag_id":"cjq0w6f16000n32921ewfc41c","_id":"cjq0w6f1f000u32922f1sdrsw"},{"post_id":"cjq0w6f1d000t3292az2lhrdl","tag_id":"cjq0w6f1h000x32923fq4omuw","_id":"cjq0w6f1j00103292cvq7wycg"},{"post_id":"cjq0w6f1o00123292de8top1x","tag_id":"cjq0w6f1q00133292ps24egee","_id":"cjq0w6f1s00153292ai4vq42h"}],"Tag":[{"name":"skynet server","_id":"cjq0w6f0g00063292fxsvhcih"},{"name":"normal distribution","_id":"cjq0w6f0p000b32929gs71wxp"},{"name":"music","_id":"cjq0w6f11000i3292q0jxfc8y"},{"name":"collide math","_id":"cjq0w6f16000n32921ewfc41c"},{"name":"cocos","_id":"cjq0w6f1h000x32923fq4omuw"},{"name":"math collide","_id":"cjq0w6f1q00133292ps24egee"}]}}